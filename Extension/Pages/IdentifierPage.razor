@page "/Identifier.html/{prefix}"

@inject HttpClient httpClient
@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService
@inject NavigationManager navManager
@inject IJSRuntime js
@inject ILogger<IdentifierPage> logger
@inject ISignifyClientService signifyClientService;
@inject IDialogService dialogService
@inject ISnackbar snackbar

@using Extension.Services.SignifyService.Models

@code {
    // "Prefix" here is the Prefix under inspection, not necessarily the one in Prefs.Prefix
    [Parameter]
    public required string Prefix { get; set; }
    [CascadingParameter]
    public Preferences Prefs { get; set; } = new Preferences();

    // typedefs and records
    record KeyEvent
    {
        public int Seq { get; init; }
        public string EventType { get; init; } = "";
        public DateTime DateTime { get; init; }
        public string Details { get; init; } = "";
    }

    record Element
    {
        public int Group { get; init; }
        public int GroupThreshold { get; init; }
        public int Weight { get; init; }
        public string? Identicon { get; init; }
        public string? PubKey { get; init; }
    }

    record WitnessInfo
    {
        public string PublicKey { get; init; } = "";
        public string? Identicon { get; init; }
    }

    record DelegateeInfo
    {
        public string Prefix { get; init; } = "";
        public string Name { get; init; } = "";
        public string? Identicon { get; init; }
    }

    // Key state data from KERI
    RecursiveDictionary? keyStateData;
    RecursiveDictionary? keyEventsData;

    IEnumerable<Element> signingKeys = new List<Element>();
    IEnumerable<Element> nextKeys = new List<Element>();
    IEnumerable<WitnessInfo> witnesses = new List<WitnessInfo>();
    IEnumerable<KeyEvent> keyEventsList = new List<KeyEvent>();
    IEnumerable<DelegateeInfo> delegatees = new List<DelegateeInfo>();

    string signingThreshold = "0";
    string nextThreshold = "0";
    int witnessThreshold = 0;
    string? delegator = null;

    // fields
    Aid? currentAid;
    bool isEditingAlias = false;
    string? editedAliasValue;

    // properties
    bool IsWaiting { get; set; }
    // TODO add IsTransferrable is needed, then add this to Aid and make it reactive
    bool IsTransferrable { get; set; }
    string DialogResult { get; set; } = "unknown";

    // reactive properties
    string? Identicon => Helper.Identicon.MakeIdenticon(Prefix);
    string? AliasOrNothing => currentAid?.Name;

    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnParametersSetAsync()
    {
        logger.LogInformation($"OnParametersSetAsync");

        // Fetch the AID details by prefix to get the alias
        await LoadIdentifierDetails();
    }

    async Task LoadIdentifierDetails()
    {
        try
        {
            IsWaiting = true;
            StateHasChanged();

            var result = await signifyClientService.GetIdentifier(Prefix);
            if (result.IsSuccess)
            {
                currentAid = result.Value;
                IsTransferrable = currentAid.Transferable;
                logger.LogInformation("Loaded identifier: {name} ({prefix})", currentAid.Name, currentAid.Prefix);

                // Load key state and key events
                await LoadKeyStateData();
                await LoadKeyEventsData();
                await LoadDelegateesData();
            }
            else
            {
                logger.LogWarning("Failed to load identifier by prefix: {errors}", result.Errors);
                snackbar.Add($"Failed to load identifier: {result.Errors.FirstOrDefault()?.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error loading identifier details");
            snackbar.Add($"Error loading identifier: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsWaiting = false;
            StateHasChanged();
        }
    }

    async Task LoadKeyStateData()
    {
        try
        {
            var result = await signifyClientService.GetKeyState(Prefix);
            if (result.IsSuccess)
            {
                keyStateData = result.Value;
                ParseKeyStateData();
                logger.LogInformation("Loaded key state for {prefix}", Prefix);
            }
            else
            {
                logger.LogWarning("Failed to load key state: {errors}", result.Errors);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error loading key state");
        }
    }

    async Task LoadKeyEventsData()
    {
        try
        {
            var result = await signifyClientService.GetKeyEvents(Prefix);
            if (result.IsSuccess)
            {
                keyEventsData = result.Value;
                ParseKeyEventsData();
                logger.LogInformation("Loaded key events for {prefix}", Prefix);
            }
            else
            {
                logger.LogWarning("Failed to load key events: {errors}", result.Errors);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error loading key events");
        }
    }

    void ParseKeyStateData()
    {
        if (keyStateData == null) return;

        try
        {
            // Parse signing keys (current keys)
            var keysValue = keyStateData.GetByPath("k");
            if (keysValue?.List != null)
            {
                var keysList = new List<Element>();
                for (int i = 0; i < keysValue.List.Count; i++)
                {
                    var key = keysValue.List[i].StringValue ?? "";
                    keysList.Add(new Element
                    {
                        Group = 1,
                        GroupThreshold = keysValue.List.Count,
                        Weight = 1,
                        Identicon = Helper.Identicon.MakeIdenticon(key),
                        PubKey = key
                    });
                }
                signingKeys = keysList;
            }

            // Parse signing threshold (kt)
            var ktValue = keyStateData.GetByPath("kt");
            signingThreshold = ktValue?.StringValue ?? ktValue?.IntegerValue?.ToString() ?? "0";

            // Parse next keys (n)
            var nextKeysValue = keyStateData.GetByPath("n");
            if (nextKeysValue?.List != null)
            {
                var nextKeysList = new List<Element>();
                for (int i = 0; i < nextKeysValue.List.Count; i++)
                {
                    var key = nextKeysValue.List[i].StringValue ?? "";
                    nextKeysList.Add(new Element
                    {
                        Group = 1,
                        GroupThreshold = nextKeysValue.List.Count,
                        Weight = 1,
                        Identicon = Helper.Identicon.MakeIdenticon(key),
                        PubKey = key
                    });
                }
                nextKeys = nextKeysList;
            }

            // Parse next threshold (nt)
            var ntValue = keyStateData.GetByPath("nt");
            nextThreshold = ntValue?.StringValue ?? ntValue?.IntegerValue?.ToString() ?? "0";

            // Parse witnesses (b)
            var witnessesValue = keyStateData.GetByPath("b");
            if (witnessesValue?.List != null)
            {
                var witnessList = new List<WitnessInfo>();
                foreach (var witness in witnessesValue.List)
                {
                    var witnessKey = witness.StringValue ?? "";
                    witnessList.Add(new WitnessInfo
                    {
                        PublicKey = witnessKey,
                        Identicon = Helper.Identicon.MakeIdenticon(witnessKey)
                    });
                }
                witnesses = witnessList;
            }

            // Parse witness threshold (bt)
            var btValue = keyStateData.GetByPath("bt");
            witnessThreshold = (int)(btValue?.IntegerValue ?? 0);

            // Parse delegator (di)
            var diValue = keyStateData.GetByPath("di");
            delegator = diValue?.StringValue;
            if (!string.IsNullOrEmpty(delegator))
            {
                logger.LogInformation("This identifier is delegated by: {delegator}", delegator);
            }

            logger.LogInformation("Parsed key state: {signingKeys} signing keys, {nextKeys} next keys, {witnesses} witnesses",
                signingKeys.Count(), nextKeys.Count(), witnesses.Count());
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error parsing key state data");
        }
    }

    void ParseKeyEventsData()
    {
        if (keyEventsData == null) return;

        try
        {
            var eventsList = new List<KeyEvent>();

            // KeyEvents data is an array of event objects, each with 'ked' (key event data) field
            foreach (var kvp in keyEventsData)
            {
                var eventWrapper = kvp.Value.Dictionary;
                if (eventWrapper == null) continue;

                // Extract the 'ked' field which contains the actual key event data
                var kedValue = eventWrapper.GetByPath("ked");
                var eventData = kedValue?.Dictionary;
                if (eventData == null) continue;

                // Extract event fields from ked
                var seqValue = eventData.GetByPath("s");
                var typeValue = eventData.GetByPath("t");
                var dtValue = eventData.GetByPath("dt");
                var saidValue = eventData.GetByPath("d");

                // Sequence number can be either a string or integer in KERI
                int seq = 0;
                if (seqValue?.StringValue != null && int.TryParse(seqValue.StringValue, out var seqParsed))
                {
                    seq = seqParsed;
                }
                else if (seqValue?.IntegerValue != null)
                {
                    seq = (int)seqValue.IntegerValue.Value;
                }

                string eventType = typeValue?.StringValue ?? "unknown";
                string dtString = dtValue?.StringValue ?? "";
                string said = saidValue?.StringValue ?? "";

                // Parse datetime and ensure it's in UTC
                DateTime dateTime = DateTime.UtcNow;
                if (!string.IsNullOrEmpty(dtString))
                {
                    if (DateTime.TryParse(dtString, null, System.Globalization.DateTimeStyles.RoundtripKind, out var parsedDt))
                    {
                        dateTime = parsedDt.ToUniversalTime();
                    }
                }

                eventsList.Add(new KeyEvent
                {
                    Seq = seq,
                    EventType = eventType,
                    DateTime = dateTime,
                    Details = said
                });
            }

            keyEventsList = eventsList.OrderBy(e => e.Seq);
            logger.LogInformation("Parsed {count} key events", keyEventsList.Count());
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error parsing key events data");
        }
    }

    async Task LoadDelegateesData()
    {
        try
        {
            // Get all identifiers and filter for those delegated by this identifier
            var identifiersResult = await signifyClientService.GetIdentifiers();
            if (identifiersResult.IsSuccess)
            {
                var allAids = identifiersResult.Value.Aids;
                var delegateesList = new List<DelegateeInfo>();

                foreach (var aid in allAids)
                {
                    // Check if this AID is delegated by the current identifier
                    // The Di property is in the Controller.State, not the top-level State
                    var delegatorPrefix = aid.State?.Controller?.State?.Di;
                    if (!string.IsNullOrEmpty(delegatorPrefix) && delegatorPrefix == Prefix)
                    {
                        delegateesList.Add(new DelegateeInfo
                        {
                            Prefix = aid.Prefix,
                            Name = aid.Name,
                            Identicon = Helper.Identicon.MakeIdenticon(aid.Prefix)
                        });
                    }
                }

                delegatees = delegateesList;
                logger.LogInformation("Found {count} delegatees for {prefix}", delegatees.Count(), Prefix);
            }
            else
            {
                logger.LogWarning("Failed to load identifiers for delegatee check: {errors}", identifiersResult.Errors);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error loading delegatees data");
        }
    }

    async Task StartEditAlias()
    {
        if (currentAid == null) return;
        editedAliasValue = currentAid.Name;
        isEditingAlias = true;
        StateHasChanged();
    }

    async Task SaveAlias()
    {
        if (currentAid == null || string.IsNullOrWhiteSpace(editedAliasValue)) return;

        try
        {
            IsWaiting = true;
            StateHasChanged();

            var result = await signifyClientService.RenameAid(currentAid.Name, editedAliasValue);
            if (result.IsSuccess)
            {
                snackbar.Add($"Renamed identifier from '{currentAid.Name}' to '{editedAliasValue}'", Severity.Success);
                // Reload to get updated data
                await LoadIdentifierDetails();
                isEditingAlias = false;
            }
            else
            {
                logger.LogWarning("Failed to rename identifier: {errors}", result.Errors);
                snackbar.Add($"Failed to rename: {result.Errors.FirstOrDefault()?.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Error renaming identifier");
            snackbar.Add($"Error renaming: {ex.Message}", Severity.Error);
        }
        finally
        {
            IsWaiting = false;
            StateHasChanged();
        }
    }

    void CancelEditAlias()
    {
        isEditingAlias = false;
        editedAliasValue = null;
        StateHasChanged();
    }

    async Task UpdateKeyState()
    {
        await Task.Delay(0);
        snackbar.Add("Not implemented", Severity.Error);
    }

    public static string cardClass(string activeAid2, string rowIdentifier) =>
        (string)activeAid2 == rowIdentifier ? "border-left: 4px solid var(--mud-palette-text-primary);" : "";

    async Task SetActiveAid(string identifier)
    {
        await preferencesService.SetPreferences(Prefs with { SelectedPrefix = identifier });
    }
}

<div id="@this.GetType().Name" class="bt-body-page">
    <div class="d-flex gap-3 bt-main">
        <div class="bt-main-inside-scroll">
            <MudText Typo="Typo.h6">Identifier</MudText>
            @if (!string.IsNullOrEmpty(Prefix))
            {
                <MudStack Row Class="pb-3">
                    <MudTooltip Text="Set Identifier as active" Delay="1000">
                        <MudButton OnClick="async () => await SetActiveAid(Prefix)">
                            <MudIcon ViewBox="0 0 100 100" Icon="@Identicon" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                        </MudButton>
                    </MudTooltip>
                    <MudStack Style="width:100%; word-break: break-all">
                        <MudStack Row AlignItems="AlignItems.Center">
                            @if (isEditingAlias)
                            {
                                <MudTextField @bind-Value="editedAliasValue"
                                              Label="Alias"
                                              Variant="Variant.Outlined"
                                              Margin="Margin.Dense"
                                              Immediate="true"
                                              Style="max-width: 300px;" />
                                <MudIconButton Icon="@Icons.Material.Filled.Check"
                                               Color="Color.Success"
                                               Size="Size.Small"
                                               OnClick="SaveAlias"
                                               Disabled="@IsWaiting" />
                                <MudIconButton Icon="@Icons.Material.Filled.Close"
                                               Color="Color.Default"
                                               Size="Size.Small"
                                               OnClick="CancelEditAlias"
                                               Disabled="@IsWaiting" />
                            }
                            else
                            {
                                <MudTooltip Text="Alias" Delay="1000">
                                    <MudText Style="font-weight:bold">@AliasOrNothing</MudText>
                                </MudTooltip>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Size="Size.Small"
                                               Disabled="@IsWaiting"
                                               OnClick="StartEditAlias"
                                               Color="Color.Primary" />
                            }
                            <MudSpacer />
                        </MudStack>
                        <MudTooltip Text="Autonomous Identifier (AID) Prefix" Delay="1000">
                            <Ellipsis StringContent="@Prefix" MaxLength="999" IncludeCopyIcon="true"></Ellipsis>
                        </MudTooltip>
                    </MudStack>
                </MudStack>

                <!-- TODO P3 intentionally not displayed until features are implemented -->
                <div>
                    <MudExpansionPanels MultiExpansion>
                        <MudExpansionPanel Class="my-3">
                            <TitleContent>
                                <MudText>
                                    Delegator @(string.IsNullOrEmpty(delegator) ? "(None)" : "")
                                </MudText>
                            </TitleContent>
                            <ChildContent>
                                @if (!string.IsNullOrEmpty(delegator))
                                {
                                    <MudText>This identifier's signing authority is delegated from:</MudText>
                                    <MudStack Row AlignItems="AlignItems.Center" Class="mt-2">
                                        <MudIcon ViewBox="0 0 100 100" Icon="@Helper.Identicon.MakeIdenticon(delegator)" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                                        <Ellipsis StringContent="@delegator" MaxLength="999" IncludeCopyIcon="true"></Ellipsis>
                                    </MudStack>
                                }
                                else
                                {
                                    <MudText>This identifier is not delegated. It has full signing authority.</MudText>
                                }
                            </ChildContent>
                        </MudExpansionPanel>
                        <MudExpansionPanel Class="my-3">
                            <TitleContent>
                                <MudText>Key State</MudText>
                            </TitleContent>
                            <ChildContent>
                                @if (IsTransferrable)
                                {
                                    <MudText>Signing control is transferable</MudText>
                                }
                                else
                                {
                                    <MudText>Signing control is not transferable</MudText>
                                }
                                <MudExpansionPanel>
                                    <TitleContent>
                                        <MudText>Signing Keys (@signingKeys.Count())</MudText>
                                    </TitleContent>
                                    <ChildContent>
                                        <MudText>Threshold = @signingThreshold</MudText>
                                        <MudTable Items="@signingKeys">
                                            <HeaderContent>
                                                <MudTh Class="py-0 my-0">Group</MudTh>
                                                <MudTh Class="py-0 my-0">Group Threshold</MudTh>
                                                <MudTh Class="py-0 my-0">Weight</MudTh>
                                                <MudTh Class="py-0 my-0">Public Key Hash Icon</MudTh>
                                                <MudTh Class="py-0 my-0">Public Key</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd Class="py-0 my-0">@context.Group</MudTd>
                                                <MudTd Class="py-0 my-0">@context.GroupThreshold</MudTd>
                                                <MudTd Class="py-0 my-0">@context.Weight / @context.GroupThreshold</MudTd>
                                                <MudTd Class="py-0 my-0">
                                                    @{
                                                        // TODO P3 could we know in advance what the aid would be?
                                                    }
                                                    <MudIcon ViewBox="0 0 100 100" Icon="@context.Identicon" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                                                </MudTd>
                                                <MudTd Class="py-0 my-0">
                                                    <Ellipsis StringContent="@context.PubKey" MaxLength="999" IncludeCopyIcon="true"></Ellipsis>
                                                </MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    </ChildContent>
                                </MudExpansionPanel>

                                <MudExpansionPanel>
                                    <TitleContent>
                                        <MudText>Delegatees (@delegatees.Count())</MudText>
                                    </TitleContent>
                                    <ChildContent>
                                        @if (delegatees.Any())
                                        {
                                            <MudText>You delegated signing authority to @delegatees.Count() delegatee(s).</MudText>
                                            <MudTable Items="@delegatees" Hover="true" Dense="true" Class="mt-2">
                                                <HeaderContent>
                                                    <MudTh Class="py-0 my-0">Identicon</MudTh>
                                                    <MudTh Class="py-0 my-0">Name</MudTh>
                                                    <MudTh Class="py-0 my-0">Prefix</MudTh>
                                                </HeaderContent>
                                                <RowTemplate>
                                                    <MudTd Class="py-0 my-0">
                                                        <MudIcon ViewBox="0 0 100 100" Icon="@context.Identicon" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                                                    </MudTd>
                                                    <MudTd Class="py-0 my-0">@context.Name</MudTd>
                                                    <MudTd Class="py-0 my-0">
                                                        <Ellipsis StringContent="@context.Prefix" MaxLength="999" IncludeCopyIcon="true"></Ellipsis>
                                                    </MudTd>
                                                </RowTemplate>
                                            </MudTable>
                                            <MudButton StartIcon="@Icons.Material.Filled.PersonRemove" OnClick="async () => await UpdateKeyState()" Variant="Variant.Filled" Color="Color.Primary" Class="mt-2" Disabled>Revoke Delegatee</MudButton>
                                            <MudButton StartIcon="@Icons.Material.Filled.PersonAddAlt1" OnClick="async () => await UpdateKeyState()" Variant="Variant.Filled" Color="Color.Primary" Class="mt-2" Disabled>Add Delegatee</MudButton>
                                        }
                                        else
                                        {
                                            <MudText>No delegatees. You have not delegated signing authority to any other identifiers.</MudText>
                                            <MudButton StartIcon="@Icons.Material.Filled.PersonAddAlt1" OnClick="async () => await UpdateKeyState()" Variant="Variant.Filled" Color="Color.Primary" Class="mt-2" Disabled>Add Delegatee</MudButton>
                                        }
                                    </ChildContent>
                                </MudExpansionPanel>

                                <MudExpansionPanel>
                                    <TitleContent>
                                        <MudText>Key Update Authorities (@nextKeys.Count())</MudText>
                                    </TitleContent>
                                    <ChildContent>
                                        <MudText>Total Threshold = @nextThreshold</MudText>
                                        <MudTable Items="@nextKeys">
                                            <HeaderContent>
                                                <MudTh Class="py-0 my-0">Group</MudTh>
                                                <MudTh Class="py-0 my-0">Group Threshold</MudTh>
                                                <MudTh Class="py-0 my-0">Weight</MudTh>
                                                <MudTh Class="py-0 my-0">Public Key Hash Icon</MudTh>
                                                <MudTh Class="py-0 my-0">Public Key Hash</MudTh>
                                                <MudTh Class="py-0 my-0">Actions</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd Class="py-0 my-0">@context.Group</MudTd>
                                                <MudTd Class="py-0 my-0">@context.GroupThreshold</MudTd>
                                                <MudTd Class="py-0 my-0">@context.Weight / @context.GroupThreshold</MudTd>
                                                <MudTd Class="py-0 my-0">
                                                    <MudIcon ViewBox="0 0 100 100" Icon="@context.Identicon" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                                                </MudTd>
                                                <MudTd Class="py-0 my-0">
                                                    <Ellipsis StringContent="@context.PubKey" MaxLength="999" IncludeCopyIcon="true"></Ellipsis>
                                                </MudTd>
                                                <MudTd Class="py-0 my-0">
                                                    @if (nextKeys.Any() && @context.PubKey == nextKeys.First().PubKey)
                                                    {
                                                        // TODO P2 remove hack that shows action only on first row as an example
                                                        <MudButton StartIcon="@Icons.Material.Filled.Update" OnClick="@(async () => await UpdateKeyState())" Variant="Variant.Filled" Color="Color.Primary">Initiate Update</MudButton>
                                                    }
                                                </MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    </ChildContent>
                                </MudExpansionPanel>
                                <MudExpansionPanel>
                                    <TitleContent>
                                        <MudText>Witnesses (@witnesses.Count())</MudText>
                                    </TitleContent>
                                    <ChildContent>
                                        <MudText>Witness Threshold = @witnessThreshold</MudText>
                                        @if (witnesses.Any())
                                        {
                                            <MudTable Items="@witnesses">
                                                <HeaderContent>
                                                    <MudTh Class="py-0 my-0">Identicon</MudTh>
                                                    <MudTh Class="py-0 my-0">Public Key</MudTh>
                                                </HeaderContent>
                                                <RowTemplate>
                                                    <MudTd Class="py-0 my-0">
                                                        <MudIcon ViewBox="0 0 100 100" Icon="@context.Identicon" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                                                    </MudTd>
                                                    <MudTd Class="py-0 my-0">
                                                        <Ellipsis StringContent="@context.PublicKey" MaxLength="999" IncludeCopyIcon="true"></Ellipsis>
                                                    </MudTd>
                                                </RowTemplate>
                                            </MudTable>
                                        }
                                        else
                                        {
                                            <MudText>No witnesses configured</MudText>
                                        }
                                    </ChildContent>
                                </MudExpansionPanel>
                                <MudExpansionPanel>
                                    <TitleContent>
                                        <MudText>More...</MudText>
                                    </TitleContent>
                                    <ChildContent>
                                        <MudText>Oobis, Endroles, Members, Registries, Contacts, Credentials, Exchanges, Multisig, Ipex, ... See http://localhost:3901/spec.yaml</MudText>
                                    </ChildContent>
                                </MudExpansionPanel>
                            </ChildContent>
                        </MudExpansionPanel>

                        <MudExpansionPanel Class="my-3">
                            <TitleContent>
                                <MudText>Key Events (@keyEventsList.Count())</MudText>
                            </TitleContent>
                            <ChildContent>
                                <MudTable Items="@keyEventsList.Reverse()">
                                    <HeaderContent>
                                        <MudTh Class="py-0 my-0">Sequence</MudTh>
                                        <MudTh Class="py-0 my-0">Event Type</MudTh>
                                        <MudTh Class="py-0 my-0">DateTime</MudTh>
                                        <MudTh Class="py-0 my-0">Details</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd Class="py-0 my-0">@context.Seq</MudTd>
                                        <MudTd Class="py-0 my-0">@context.EventType</MudTd>
                                        <MudTd Class="py-0 my-0">@context.DateTime.ToString("yyyy-MM-dd HH:mm:ss.ffffff") UTC</MudTd>
                                        <MudTd Class="py-0 my-0"><MudLink Href="">&hellip;</MudLink></MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </div>

                @if (IsWaiting)
                {
                    <div style="display:flex; align-items: center; justify-content:center; position:absolute; z-index:999; top:50%; left:50%; transform: translate(-50%, -50%); width:300px; height:200px;  ">
                        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                    </div>
                }
            }
        </div>
    </div>
    <MudStack Row="true" class="bt-button-tray">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
        <MudSpacer />
        <!--
        <MudButton StartIcon="@Icons.Material.Filled.Add" Disabled="@IsWaiting" OnClick="async () => await AddIdentifier()" Variant="Variant.Filled" Color="Color.Primary">Add Identifier</MudButton>
        -->
    </MudStack>
</div>
