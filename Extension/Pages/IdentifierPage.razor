@page "/Identifier/{prefix}"


@inject HttpClient httpClient
@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService
@inject NavigationManager navManager
@inject IJSRuntime js
@inject ILogger<IdentifierPage> logger
@inject IdentifiersService identifiersService;
@inject ISignifyClientService signifyClientService;
@inject IDialogService dialogService
@inject ISnackbar snackbar

@code {
    // "Prefix" here is the Prefix under inspection, not necessarily the one in Prefs.Prefix
    [Parameter]
    public required string Prefix { get; set; }
    [CascadingParameter]
    public Preferences Prefs { get; set; } = new Preferences();

    // typedefs and records
    record KeyEvent
    {
        public int Seq { get; init; }
        public string EventType { get; init; } = "";
        public DateTime DateTime { get; init; }
        public string Details { get; init; } = "";
    }

    record Element
    {
        public int Group { get; init; }
        public int GroupThreshold { get; init; }
        public int Weight { get; init; }
        public string? Identicon { get; init; }
        public string? PubKey { get; init; }
    }

    IEnumerable<Element> Elements = new List<Element>()
    {
        new Element() { Group = 1, GroupThreshold = 3, Weight = 2, Identicon = MakeIdenticon("asdf"), PubKey = "0x1234123411" },
        new Element() { Group = 1, GroupThreshold = 3, Weight = 1, Identicon = MakeIdenticon("asdf3"), PubKey = "0x1234123411" },
        new Element() { Group = 1, GroupThreshold = 3, Weight = 1, Identicon = MakeIdenticon("asdf0x123412345"), PubKey = "0x1234123422" },
        new Element() { Group = 2, GroupThreshold = 1, Weight = 1, Identicon = MakeIdenticon("asdx1234653x3"), PubKey = "0x1234123433" },
        new Element() { Group = 2, GroupThreshold = 1, Weight = 1, Identicon = MakeIdenticon("asdx1234653sx3"), PubKey = "0x1234123444" }
    };

    IEnumerable<Element> Elements2 = new List<Element>()
    {
        new Element() { Group = 1, GroupThreshold = 4, Weight = 2, Identicon = MakeIdenticon("erty"), PubKey = "0x1234123411777" },
        new Element() { Group = 1, GroupThreshold = 4, Weight = 2, Identicon = MakeIdenticon("rtyurtyu"), PubKey = "0x1234123411888" },
        new Element() { Group = 1, GroupThreshold = 4, Weight = 2, Identicon = MakeIdenticon("tyuityuityui"), PubKey = "0x1234123422999" },
        new Element() { Group = 1, GroupThreshold = 4, Weight = 1, Identicon = MakeIdenticon("dfght6u456"), PubKey = "0x1234123433000" },
        new Element() { Group = 1, GroupThreshold = 4, Weight = 1, Identicon = MakeIdenticon("asdx1234653sx3"), PubKey = "0x123412344411" }
    };

    IEnumerable<KeyEvent> KeyEvents = new List<KeyEvent>()
        {
        new KeyEvent() { Seq = 1, EventType = "inception", DateTime = DateTime.Now - new TimeSpan(20,0,0,0), Details = "details" },
        new KeyEvent() { Seq = 2, EventType = "rotate", DateTime = DateTime.Now - new TimeSpan(10,0,0,0), Details = "details" },
        new KeyEvent() { Seq = 3, EventType = "delegate", DateTime = DateTime.Now - new TimeSpan(5,0,0,0), Details = "details" },
        new KeyEvent() { Seq = 4, EventType = "prod", DateTime = DateTime.Now - new TimeSpan(2,0,0,0), Details = "details" },
        new KeyEvent() { Seq = 5, EventType = "rotate", DateTime = DateTime.Now - new TimeSpan(0,1,0,0), Details = "details" }
    };

    // fields

    // properties
    bool IsWaiting { get; set; }
    // TODO add IsTransferrable is needed, then add this to IdentifierHeadline and make it reactive
    bool IsTransferrable { get; set; }
    List<IdentifierHeadline> MyIdentifierHeadlines { get; set; } = [];
    string DialogResult { get; set; } = "unknown";

    // reactive properties
    string? Identicon => MyIdentifierHeadlines.FirstOrDefault(a => a.Prefix == Prefix)?.Identicon;
    string? AliasOrNothing => MyIdentifierHeadlines.FirstOrDefault(a => a.Prefix == Prefix)?.Alias;

    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnParametersSetAsync()
    {
        logger.LogInformation($"OnParametersSetAsync");

        await GetHeadlines();

        // TODO P3 move this comment to a better place...
        // Use Alias (versus Prefix) to get the full Identifier.
        // Its awkward that the underlying signify-ts get() method does not seem to accept a Prefix value, even though the code implies that
        // Root issue might be how the underlying KERIA hab is storing it. signify-ts tests all seem to have Alias names
        // https://github.com/WebOfTrust/signify-ts/blob/f368351f976ceeefc19082fc8351adbb359c4e77/src/keri/app/aiding.ts#L116
    }

    async Task UpdateKeyState()
    {
        await Task.Delay(0);
        snackbar.Add("Not implemented", Severity.Error);
    }

    private async Task GetHeadlines()
    {
        logger.LogInformation("GetHeadlines");
        var identifierHeadlinesRes = await identifiersService.GetIdentifierHeadlines();
        if (identifierHeadlinesRes != null && identifierHeadlinesRes.IsSuccess)
        {
            MyIdentifierHeadlines = identifierHeadlinesRes.Value;
        } else
        {
            logger.LogError("Could not get IdentifierHeadlines");
        };
    }

    public static string cardClass(string activeAid2, string rowIdentifier) =>
        (string)activeAid2 == rowIdentifier ? "border-left: 4px solid var(--mud-palette-text-primary);" : "";

    async Task SetActiveAid(string identifier)
    {
        await preferencesService.SetPreferences(Prefs with { SelectedPrefix = identifier });
    }
}

<div id="@this.GetType().Name" class="bt-body-page">
    <div class="d-flex gap-3 bt-main">
        <div class="bt-main-inside-scroll">
            <MudText Typo="Typo.h6">Identifier</MudText>
            @if (!string.IsNullOrEmpty(Prefix))
            {
                <MudStack Row Class="pb-3">
                    <MudTooltip Text="Set Identifier as active" Delay="1000">
                        <MudButton OnClick="async () => await SetActiveAid(Prefix)">
                            <MudIcon ViewBox="0 0 100 100" Icon="@Identicon" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                        </MudButton>
                    </MudTooltip>
                    <MudStack Style="width:100%; word-break: break-all">
                        <MudStack Row>
                            <MudTooltip Text="Alias" Delay="1000">
                                <MudText Style="font-weight:bold">@AliasOrNothing</MudText>
                            </MudTooltip>
                            <MudSpacer />
                            <!-- TODO P3 Intentionally not displaying the Edit icon until "rename Alias" feature is supported -->
                            <div style="display: none !important;">
                                <MudButton StartIcon="@Icons.Material.Filled.Edit" Disabled="@IsWaiting" OnClick="async () => await Task.Delay(0)" Variant="Variant.Text" Color="Color.Primary" Class="pa-0"></MudButton>
                            </div>
                        </MudStack>
                        <MudTooltip Text="Autonomous Identifier (AID) Prefix" Delay="1000">
                            <Ellipsis StringContent="@Prefix" MaxLength="999" IncludeCopyIcon="true"></Ellipsis>
                        </MudTooltip>
                    </MudStack>
                </MudStack>

                <!-- TODO P3 intentionally not displayed until features are implemented -->
                <div style="display:none !important;">
                    <MudExpansionPanels MultiExpansion>
                        <MudExpansionPanel Class="my-3">
                            <TitleContent>
                                <MudText>
                                    Delegatee for Identifiers (2)
                                </MudText>
                            </TitleContent>
                            <ChildContent>
                                <MudStack>
                                    <MudText>2 identities delegated signing authority to you.</MudText>
                                    @{
                                        /*
                                        <MudTable>
                                        <HeaderContent>
                                        <MudTh>Alias</MudTh>
                                        <MudTh>Identicon</MudTh>
                                        <MudTh>Prefix</MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                        <MudTd>Delegator</MudTd>
                                        <MudTd>Delegator Alias</MudTd>
                                        <MudTd>
                                        <MudIcon ViewBox="0 0 100 100" Icon="@Identicon" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                                        </MudTd>
                                        <MudTd>
                                        <Ellipsis StringContent="@Prefix" MaxLength="999" IncludeCopyIcon="true"></Ellipsis>
                                        </MudTd>
                                        <MudTd>
                                        <Ellipsis StringContent="0x1234123411" MaxLength="999" IncludeCopyIcon="true"></Ellipsis>
                                        </MudTd>
                                        </RowTemplate>
                                        </MudTable>
                                        */
                                    }
                                </MudStack>
                            </ChildContent>
                        </MudExpansionPanel>
                        <MudExpansionPanel Class="my-3">
                            <TitleContent>
                                <MudText>Key State</MudText>
                            </TitleContent>
                            <ChildContent>
                                @if (IsTransferrable)
                                {
                                    <MudText>Signing control is transferable</MudText>
                                }
                                else
                                {
                                    <MudText>Signing control is not transferable</MudText>
                                }
                                <MudExpansionPanel>
                                    <TitleContent>
                                        <MudText>Signing Keys (@Elements.Count())</MudText>
                                    </TitleContent>
                                    <ChildContent>
                                        <MudText>Threshold = 4</MudText>
                                        <MudTable Items="@Elements">
                                            <HeaderContent>
                                                <MudTh Class="py-0 my-0">Group</MudTh>
                                                <MudTh Class="py-0 my-0">Group Threshold</MudTh>
                                                <MudTh Class="py-0 my-0">Weight</MudTh>
                                                <MudTh Class="py-0 my-0">Public Key Hash Icon</MudTh>
                                                <MudTh Class="py-0 my-0">Public Key</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd Class="py-0 my-0">@context.Group</MudTd>
                                                <MudTd Class="py-0 my-0">@context.GroupThreshold</MudTd>
                                                <MudTd Class="py-0 my-0">@context.Weight / @context.GroupThreshold</MudTd>
                                                <MudTd Class="py-0 my-0">
                                                    @{
                                                        // TODO P3 could we know in advance what the aid would be?
                                                    }
                                                    <MudIcon ViewBox="0 0 100 100" Icon="@context.Identicon" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                                                </MudTd>
                                                <MudTd Class="py-0 my-0">
                                                    <Ellipsis StringContent="@context.PubKey" MaxLength="999" IncludeCopyIcon="true"></Ellipsis>
                                                </MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    </ChildContent>
                                </MudExpansionPanel>

                                <MudExpansionPanel>
                                    <TitleContent>
                                        <MudText>Delegatees (1)</MudText>
                                    </TitleContent>
                                    <ChildContent>
                                        <MudText>You delegated signing authority to 1 delegatee(s).</MudText>
                                        @foreach (var item in new List<string>() { "1111", "2222" })
                                        {
                                            <MudText>@item</MudText>
                                        }
                                        <MudButton StartIcon="@Icons.Material.Filled.PersonRemove" OnClick="async () => await UpdateKeyState()" Variant="Variant.Filled" Color="Color.Primary">Revoke Delegatee</MudButton>
                                        <MudButton StartIcon="@Icons.Material.Filled.PersonAddAlt1" OnClick="async () => await UpdateKeyState()" Variant="Variant.Filled" Color="Color.Primary">Add Delegatee</MudButton>
                                    </ChildContent>
                                </MudExpansionPanel>

                                <MudExpansionPanel>
                                    <TitleContent>
                                        <MudText>Key Update Authorities (@Elements2.Count())</MudText>
                                    </TitleContent>
                                    <ChildContent>
                                        <MudText>Total Threshold = 4</MudText>
                                        <MudTable Items="@Elements2">
                                            <HeaderContent>
                                                <MudTh Class="py-0 my-0">Group</MudTh>
                                                <MudTh Class="py-0 my-0">Group Threshold</MudTh>
                                                <MudTh Class="py-0 my-0">Weight</MudTh>
                                                <MudTh Class="py-0 my-0">Public Key Hash Icon</MudTh>
                                                <MudTh Class="py-0 my-0">Public Key Hash</MudTh>
                                                <MudTh Class="py-0 my-0">Actions</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                <MudTd Class="py-0 my-0">@context.Group</MudTd>
                                                <MudTd Class="py-0 my-0">@context.GroupThreshold</MudTd>
                                                <MudTd Class="py-0 my-0">@context.Weight / @context.GroupThreshold</MudTd>
                                                <MudTd Class="py-0 my-0">
                                                    <MudIcon ViewBox="0 0 100 100" Icon="@context.Identicon" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                                                </MudTd>
                                                <MudTd Class="py-0 my-0">
                                                    <Ellipsis StringContent="@context.PubKey" MaxLength="999" IncludeCopyIcon="true"></Ellipsis>
                                                </MudTd>
                                                <MudTd Class="py-0 my-0">
                                                    @if (@context.PubKey == @Elements2.First().PubKey)
                                                    {
                                                        // TODO P2 remove hack that shows action only on first row as an example
                                                        <MudButton StartIcon="@Icons.Material.Filled.Update" OnClick="async () => await UpdateKeyState()" Variant="Variant.Filled" Color="Color.Primary">Initiate Update</MudButton>
                                                    }
                                                </MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    </ChildContent>
                                </MudExpansionPanel>
                                <MudExpansionPanel>
                                    <TitleContent>
                                        <MudText>Witnesses (3)</MudText>
                                    </TitleContent>
                                </MudExpansionPanel>
                                <MudExpansionPanel>
                                    <TitleContent>
                                        <MudText>More...</MudText>
                                    </TitleContent>
                                    <ChildContent>
                                        <MudText>Oobis, Endroles, Members, Registries, Contacts, Credentials, Exchanges, Multisig, Ipex, ... See http://localhost:3901/spec.yaml</MudText>
                                    </ChildContent>
                                </MudExpansionPanel>
                            </ChildContent>
                        </MudExpansionPanel>

                        <MudExpansionPanel Class="my-3">
                            <TitleContent>
                                <MudText>Key Events (@KeyEvents.Count())</MudText>
                            </TitleContent>
                            <ChildContent>
                                <MudTable Items="@KeyEvents.Reverse()">
                                    <HeaderContent>
                                        <MudTh Class="py-0 my-0">Sequence</MudTh>
                                        <MudTh Class="py-0 my-0">Event Type</MudTh>
                                        <MudTh Class="py-0 my-0">DateTime</MudTh>
                                        <MudTh Class="py-0 my-0">Details</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd Class="py-0 my-0">@context.Seq</MudTd>
                                        <MudTd Class="py-0 my-0">@context.EventType</MudTd>
                                        <MudTd Class="py-0 my-0">@context.DateTime</MudTd>
                                        <MudTd Class="py-0 my-0"><MudLink Href="">&hellip;</MudLink></MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </ChildContent>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </div>

                @if (IsWaiting)
                {
                    <div style="display:flex; align-items: center; justify-content:center; position:absolute; z-index:999; top:50%; left:50%; transform: translate(-50%, -50%); width:300px; height:200px;  ">
                        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                    </div>
                }
            }
        </div>
    </div>
    <MudStack Row="true" class="bt-button-tray">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
        <MudSpacer />
        <!--
        <MudButton StartIcon="@Icons.Material.Filled.Add" Disabled="@IsWaiting" OnClick="async () => await AddIdentifier()" Variant="Variant.Filled" Color="Color.Primary">Add Identifier</MudButton>
        -->
    </MudStack>
</div>
