@page "/NewRelease.html"

@using Extension.Helper
@using Extension.Models
@using Extension.Services
@using Extension
@using Extension.Components
@using Extension.Services.SignifyService
@using Extension.Services.SignifyService.Models
@using static Extension.Helper.PreviousPage
@using static Extension.AppConfig;
@using static Extension.Helper.UIHelper;
@using static Extension.Services.SignifyService.SignifyServiceConfig
@using FluentResults
@using JsBind.Net
@using JsBind.Net.Configurations
@using System.Diagnostics
@using System.Text.Json
@using System.Text.Json.Nodes
@using Blazor.BrowserExtension
@using System.Web
@using Microsoft.AspNetCore.WebUtilities
@using WebExtensions.Net
@using WebExtensions.Net.Runtime
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using JsonSerializer = System.Text.Json.JsonSerializer
@using static System.Net.WebRequestMethods
@using System.ComponentModel.DataAnnotations
@using System.Linq
@using System.Text
@using System.Security.Cryptography

@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject ILogger<NewReleasePage> logger
@inject HttpClient http
@inject NavigationManager navManager
@inject IJSRuntime js
@inject ISignifyClientService signifyClientService
@inject IJsRuntimeAdapter jsRuntimeAdapter
@inject ISnackbar snackbar
@inject IStorageService storageService

@code {
    // fields
    MudButton? buttonRef;
    const string releaseUrlPath = "content/release.html";
    static MarkupString releaseMarkup = new("Placeholder for Release Notes");
    const string releaseHistoryUrlPath = "content/release_history.html";
    static MarkupString releaseHistoryMarkup = new("Placeholder for Release Notes");
    private WebExtensionsApi? webExtensionsApi;

    // properties
    string ManifestVersion { get; set; } = "unset";
    string? PriorVersion { get; set; }
    OnboardState? MyOnboardState { get; set; }
    UpdateDetails? MyUpdateDetails { get; set; }

    // reactive properties


    protected override async Task OnInitializedAsync()
    {
        // logger.LogInformation("OnInitializedAsync");
        releaseMarkup = new MarkupString(await http.GetStringAsync(releaseUrlPath));
        releaseHistoryMarkup = new MarkupString(await http.GetStringAsync(releaseHistoryUrlPath));

        webExtensionsApi = new WebExtensionsApi(jsRuntimeAdapter);

        // Get version info from Manifest file
        // TODO P3 Refactor some of this and similar in Mainlayout and NewReleases into App, and pass into Layouts or Pages
        webExtensionsApi = new WebExtensionsApi(jsRuntimeAdapter);
        var manifestJsonElement = webExtensionsApi.Runtime.GetManifest();
        if (manifestJsonElement.TryGetProperty("version", out JsonElement versionElement) && versionElement.ValueKind ==
        JsonValueKind.String)
        {
            ManifestVersion = versionElement.ToString();
        }

        var res = await storageService.GetItem<OnboardState>();
        if (res.IsFailed || res.Value is null)
        {
            throw new Exception("Failed to get OnboardState");
        }
        MyOnboardState = res.Value;

        var updateDetailsRes = await storageService.GetItem<UpdateDetails>();
        if (updateDetailsRes.IsSuccess && updateDetailsRes.Value is not null)
        {
            MyUpdateDetails = updateDetailsRes.Value;
        }
    }

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (/* isFirstRender && */ buttonRef is not null)
            await buttonRef.FocusAsync();
    }

    async Task AckNewRelease()
    {
        if (MyOnboardState is null)
            MyOnboardState = new OnboardState
            {
                AcknowledgedInstalledVersion = ManifestVersion
            };
        else
        {
            MyOnboardState = MyOnboardState! with
            {
                AcknowledgedInstalledVersion = ManifestVersion
            };
            _ = await storageService.SetItem<OnboardState>(MyOnboardState);
        }

        await storageService.RemoveItem<UpdateDetails>();

        navManager.NavigateTo(RouteToIndex);
    }
}


<div id="@this.GetType().Name" class="bt-body-page">
    <div class="d-flex gap-3 bt-main">
        <MudStack Style="max-width:-webkit-fill-available">
            @if (MyOnboardState is null || MyOnboardState.AcknowledgedInstalledVersion is null)
            {
                <MudText Typo="Typo.h6">Fresh Install</MudText>
                <MudText>
                    KERI Auth version @ManifestVersion has been installed.
                </MudText>
            }
            else
            {
                <MudText Typo="Typo.h6">Updated Release Installed</MudText>
                if (MyUpdateDetails is null || MyUpdateDetails.CurrentVersion == MyUpdateDetails.PreviousVersion)
                {
                    <!-- reloaded can occur via DevTools, loading an unpacked extension -->
                    <MudText>
                        KERI Auth has been reloaded or updated to version @ManifestVersion.
                    </MudText>
                }
                else
                {
                    <MudText>
                        KERI Auth has been automatically updated from version @MyOnboardState.AcknowledgedInstalledVersion to
                        @(MyUpdateDetails.CurrentVersion).
                    </MudText>
                }
                <MudText>
                    Your previous configuration will be used unless you delete it.
                </MudText>
            }
            <MudText>
                You can review the Release Notes and Release History below.
            </MudText>

            <MudStack Style="gap:0;">
                <MudStack Class="d-flex bt-terms-section">
                    <MudIconButton Icon="@Icons.Material.Filled.Print" Variant="Variant.Text" Href="@releaseUrlPath"
                        Target="_blank" Class="bt-terms-button" />
                    <div class="bt-terms-markup">
                        @(releaseMarkup)
                    </div>
                </MudStack>
                <MudStack Class="d-flex bt-terms-section">
                    <MudIconButton Icon="@Icons.Material.Filled.Print" Variant="Variant.Text"
                        Href="@releaseHistoryUrlPath" Target="_blank" Class="bt-terms-button" />
                    <div class="bt-terms-markup">
                        @(releaseHistoryMarkup)
                    </div>
                </MudStack>
                <MudStack class="d-flex mt-5 justify-end" Style="align-items:center;">
                    <!-- placeholder for potential width alignment -->
                </MudStack>

            </MudStack>
        </MudStack>
    </div>
    <MudStack Row="true" class="bt-button-tray">
        <MudSpacer></MudSpacer>
        <MudButton @ref="buttonRef" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => AckNewRelease())"
            Class="justify-end" data-testid="next">Next</MudButton>
    </MudStack>
</div>
