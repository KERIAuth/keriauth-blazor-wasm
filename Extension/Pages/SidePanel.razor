@page "/sidepanel.html"
@using WebExtensions.Net.Tabs
@inherits Blazor.BrowserExtension.Pages.BasePage
@inject ILogger<SidePanel> _logger;

<div class="text-container">
    <h1>My Sidepanel</h1>
    <p>This is a demo of the extension side panel.</p>
    @if (activeTab is not null)
    {
        <p>The current active tab title is @activeTab.Title</p>
    }
</div>

@code {
    WebExtensions.Net.Tabs.Tab? activeTab = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // TODO P2 this is expected to fail without "tabs" permission
        WebExtensions.Tabs.OnActivated.AddListener(OnTabChanged);
        activeTab = (await WebExtensions.Tabs.Query(new()
            {
                Active = true,
                CurrentWindow = true
            })).FirstOrDefault();
        // Note: id and url are null here but will be null without "tabs" permission (or possibly getting here via OnAction listener)
        _logger.LogInformation("SidePanel initialized, active tab: t: {tab} id: {id} url: {url}", activeTab?.Title, activeTab?.Id, activeTab?.Url);
    }

    void OnTabChanged(ActiveInfo activeTabInfo)
    {
        _ = OnTabChangedAsync(activeTabInfo);
    }

    async Task OnTabChangedAsync(ActiveInfo activeTabInfo)
    {
        activeTab = await WebExtensions.Tabs.Get(activeTabInfo.TabId);
        // Note: id and url are null here but will be null without "tabs" permission (or possibly getting here via OnAction listener)
        _logger.LogInformation("SidePanel tab changed, active tab: t: {tab} id: {id} url: {url}", activeTab?.Title, activeTab?.Id, activeTab?.Url);
        StateHasChanged();
    }
}
