@page "/Websites"
@layout Layouts.MainLayout

@using System.Linq
@using System.Text.Json
@using Extension.Helper
@using Extension.Models
@using Extension.Components
@using Extension.Pages
@using Extension.Services
@using Extension.Services.SignifyService
@using Extension.Services.SignifyService.Models
@using static Extension.AppConfig
@using System.Diagnostics
@using Microsoft.AspNetCore.WebUtilities
@using MudBlazor
@using FluentResults
@using System.Web
@using System.Text.Json.Serialization
@using System;
@using System.Collections.Generic;
@using static Extension.Helper.GetNumberFromHash

@inject IStorageService storageService
@inject IStateService stateService
@inject NavigationManager navManager
@inject IJSRuntime js
@using static Extension.Helper.PreviousPage
@inject ILogger<WebsitesPage> logger
@inject IdentifiersService identifiersService
@inject ISignifyClientService signifyClientService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inject IWebsiteConfigService websiteConfigService
@inject IStorageService storageService
@inject IPreferencesService preferencesService
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject IAppSwMessagingService appSwMessagingService
@inject IJSRuntime jsRuntime

@code {
    // fields

    // properties
    List<WebsiteConfig>? WWebsites { get; set; }
    string? SelectedWebsiteOrigin { get; set; }

    // reactive properties
    string CountLabel => (WWebsites is not null) ? "(" + WWebsites.Count() + ")" : "...";

    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation($"OnInitializedAsync");
        return;
    }

    protected override async Task OnParametersSetAsync()
    {
        logger.LogInformation($"OnParametersSetAsync");
        var websitesRes = await websiteConfigService.GetList();
        if (websitesRes is not null && websitesRes.IsSuccess && websitesRes.Value is not null && websitesRes.Value.WebsiteList.Any())
        {
            WWebsites = websitesRes.Value.WebsiteList;
            SelectedWebsiteOrigin = WWebsites.First().Origin.OriginalString;
        }
        else
        {
            WWebsites = [];
            SelectedWebsiteOrigin = null;
        }
        StateHasChanged();
    }

    // TODO P2 Update the callback signature to just send a complete WebsiteConfig?
    // TODO P2 Persist the change, then refetch the entire WebsiteConfigList and return that?
    // Handle callback from the WebsiteConfigDisplay
    private void HandleValueChanged((string selectedPrefix, Dictionary<string, object>? selectedCredentialOrNothing) value)
    {
        logger.LogError($"NOT YET IMPLEMENTED HandleValueChanged prefix {value.selectedPrefix} | selectedCredential {value.selectedCredentialOrNothing is not null}");
        StateHasChanged();
    }

    async Task UpdateSelectedWebsiteOrigin(string s)
    {
        SelectedWebsiteOrigin = s;
        StateHasChanged();
        return;
    }

    async Task navigateToWebsitePage(string origin)
    {
        navManager.NavigateTo(AppConfig.RouteToWebsite + HttpUtility.UrlEncode(origin.ToString()));
    }
}

<div id="@this.GetType().Name" class="bt-body-page">
    <MudStack Class="bt-main">
        <div class="bt-main-inside-scroll">
            <MudStack Row="true">
                <MudText Typo="Typo.h6">Websites</MudText>
                <MudText Typo="Typo.h6">@CountLabel</MudText>
            </MudStack>
            @if (WWebsites is not null && WWebsites.Any())
            {
                <MudPaper>
                    <MudTable Items="WWebsites" Hover="false" Striped="true">
                        <HeaderContent>
                            <MudTh Style="width: 65%; white-space: normal; font-weight:600;">Website</MudTh>
                            <MudTh Style="width: 10%; white-space: normal; font-weight:600;">Identifier</MudTh>
                            <!-- <MudTh Style="width: 15%; white-space: normal; font-weight:600;">Auto-sign Http Request Headers that have no side effects?</MudTh>
                                -->
                            <MudTh Style="width: 10%; white-space: normal; font-weight:600;">Edit</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Website"><MudLink Href="@context.Origin.OriginalString" Target="@((GetNumberFromHash.HashInt(context.Origin.OriginalString)).ToString())">@context.Origin.OriginalString</MudLink></MudTd>
                            <MudTd DataLabel="Identifier">
                                @if (context.RememberedPrefixOrNothing is not null)
                                {
                                    <MudIcon ViewBox="0 0 100 100" Icon="@(Helper.Identicon.MakeIdenticon(context.RememberedPrefixOrNothing))" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                                }
                            </MudTd>
                            <!--
                            <MudTd DataLabel="AutoSign">@(context.IsAutoSignSafeHeaders ? "Yes" : "No")</MudTd>
                            -->
                            <MudTd DataLabel="Edit">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => navigateToWebsitePage(@context.Origin.OriginalString))"></MudIconButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            }
            else
            {
                <MudText>After navigating to a website supporting KERI browser extensions and then interacting with this extension, the website will be listed here.</MudText>
            }
        </div>
    </MudStack>
    <MudStack Row="true" class="bt-button-tray">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@(async () => await GoBack(js))' Class="justify-start" />
        <MudSpacer></MudSpacer>
    </MudStack>
</div>

<style>
    .mud-select .mud-select-input .mud-input-slot {
        height: auto;
    }

    .selected-item {
        border-left: 4px solid blue;
    }
</style>
