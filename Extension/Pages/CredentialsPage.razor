@page "/Credentials"
@layout Layouts.MainLayout

@using System.Collections.Immutable

@inject NavigationManager navManager
@inject IJSRuntime js
@inject ILogger<CredentialsPage> logger
@inject ISignifyClientService signifyClientService

@code {
    [CascadingParameter]
    public Preferences Prefs { get; set; } = new Preferences();

    // fields
    List<Dictionary<string, object>> credentials = new();

    // properties
    bool IsFiltered { get; set; } = true;
    bool IsCredentialsFetched;
    List<Dictionary<string, object>> DisplayedCredentials => IsFiltered ? IssuerCredentials : credentials;

    // reactive properties
    Preferences PrefsOrDefault => Prefs ?? new Preferences();
    string CountLabel => IssuedAndHeldCredentials.Count.ToString();
    List<Dictionary<string, object>> IssueeCredentials => (credentials is null || PrefsOrDefault.SelectedPrefix is null) ? new List<Dictionary<string, object>>() : WebsiteConfigDisplay.filterCredentials(credentials, [("sad.a.i", PrefsOrDefault.SelectedPrefix)]);
    List<Dictionary<string, object>> IssuerCredentials => (credentials is null || PrefsOrDefault.SelectedPrefix is null) ? new List<Dictionary<string, object>>() : WebsiteConfigDisplay.filterCredentials(credentials, [("sad.i", PrefsOrDefault.SelectedPrefix)]);
    List<Dictionary<string, object>> IssuedAndHeldCredentials => (credentials is null || PrefsOrDefault.SelectedPrefix is null) ? new List<Dictionary<string, object>>() : WebsiteConfigDisplay.filterCredentials(credentials, [("sad.a.i", PrefsOrDefault.SelectedPrefix), ("sad.i", PrefsOrDefault.SelectedPrefix)]);

    // TODO P2 what about other presented credentials for verification?

    string Identicon => Helper.Identicon.MakeIdenticon(PrefsOrDefault.SelectedPrefix);

    protected override async Task OnInitializedAsync()
    {
        // logger.LogInformation($"OnInitializedAsync");
    }

    protected override async Task OnParametersSetAsync()
    {
        var selectedPrefix = PrefsOrDefault.SelectedPrefix;
        await getCredentials();
        IsCredentialsFetched = true;
        StateHasChanged();
    }

    // TODO P2 DRY with other invocations of GetCredentials
    private async Task getCredentials()
    {
        var res = await signifyClientService.GetCredentials();
        if (res.IsFailed || res.Value is null)
        {
            logger.LogWarning($"Error: {res.Errors}");
            return;
        }
        else
        {
            credentials = res.Value as List<Dictionary<string, object>>;
        }
    }

    private void setIsFiltered(bool b)
    {
        IsFiltered = b;
        StateHasChanged();
    }
}


<div id="@this.GetType().Name" class="bt-body-page">
    <MudStack Class="bt-main">
        <div class="bt-main-inside-scroll">
            <div style="display:flex;">
                <MudStack Row="true">
                    <MudText Typo="Typo.h6">Credentials</MudText>
                    <MudText Typo="Typo.h6">(@CountLabel)</MudText>
                    <MudTooltip Delay="0.5"
                                Text="">
                        <MudIcon Icon="@Icons.Material.Outlined.Info" Class="bt-info-icon" />
                    </MudTooltip>
                </MudStack>
            </div>

            @if (IsCredentialsFetched)
            {
                <MudStack Class="d-flex justify-center">
                    @if (credentials.Any())
                    {
                        @if (IssueeCredentials.Any())
                        {
                            <MudExpansionPanels Dense="true" Elevation="1" MultiExpansion="true">
                                <MudExpansionPanel>
                                    <TitleContent>
                                        <MudText><b>Held as Issuee</b> (@IssueeCredentials.Count())</MudText>
                                    </TitleContent>
                                    <ChildContent>
                                        <MudExpansionPanels Dense="true" Elevation="0" MultiExpansion="true" Class="ml-4">
                                            @foreach (var credential in IssueeCredentials)
                                            {
                                                var ct = DictionaryConverter.GetValueByPath(credential, "schema.title")?.Value?.ToString() ?? string.Empty;
                                                <MudExpansionPanel>
                                                    <TitleContent>
                                                        <MudText><b>@ct</b></MudText>
                                                    </TitleContent>
                                                    <ChildContent>
                                                        <CredentialDisplay credential="@credential" displayDetail="@CredentialDisplay.CredDetail.Typical" />
                                                    </ChildContent>
                                                </MudExpansionPanel>
                                            }
                                        </MudExpansionPanels>
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudExpansionPanels>
                        }

                        @if (IssuerCredentials.Any())
                        {
                            <MudExpansionPanels Dense="true" Elevation="1" MultiExpansion="true">
                                <MudExpansionPanel>
                                    <TitleContent>
                                        <MudText><b>Issued as Issuer</b> (@IssuerCredentials.Count())</MudText>
                                    </TitleContent>
                                    <ChildContent>
                                        <MudExpansionPanels Dense="true" Elevation="0" MultiExpansion="true" Class="ml-4">
                                            @foreach (var credential in IssuerCredentials)
                                            {
                                                var ct = DictionaryConverter.GetValueByPath(credential, "schema.title")?.Value?.ToString() ?? string.Empty;
                                                <MudExpansionPanel>
                                                    <TitleContent>
                                                        <MudText><b>@ct</b></MudText>
                                                    </TitleContent>
                                                    <ChildContent>
                                                        <CredentialDisplay credential="@credential" displayDetail="@CredentialDisplay.CredDetail.Typical" />
                                                    </ChildContent>
                                                </MudExpansionPanel>
                                            }
                                        </MudExpansionPanels>
                                    </ChildContent>
                                </MudExpansionPanel>
                            </MudExpansionPanels>
                        }
                    }
                    else
                    {
                        <MudCard>No credentials found.</MudCard>
                    }
                </MudStack>
            }
        </div>
    </MudStack>
    <MudStack Row="true" class="bt-button-tray">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@(async () => await GoBack(js))' Class="justify-start" />
        <MudSpacer></MudSpacer>
    </MudStack>
</div>
