@page "/Welcome.html"
@layout MainLayout

@using Extension.Layouts
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using static System.Net.WebRequestMethods

@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject ILogger<WelcomePage> logger
@inject HttpClient http
@inject NavigationManager navManager
@inject IJSRuntime js
@inject ISignifyClientService signifyClientService
@inject ISnackbar snackbar

@code {
    // fields
    MudButton? nextButton;

    // properties

    // reactive properties


    protected override async Task OnInitializedAsync()
    {
        // logger.LogInformation("OnInitializedAsync");
    }

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (/* isFirstRender && */ nextButton is not null)
            await nextButton.FocusAsync();
    }

    async Task AcknowledgeWelcome()
    {
        var res = await storageService.GetItem<OnboardState>();
        // logger.LogWarning("pre-stored OnboardStateRes: {s}", res);
        if (res.IsFailed || res.Value is null)
        {
            throw new Exception("OnboardState not found");
        }
        var onboardState = res.Value;
        onboardState = onboardState with { HasAcknowledgedInstall = true };
        await storageService.SetItem(onboardState);

        navManager.NavigateTo(RouteToIndex);
        return;
    }
}

<div id="@this.GetType().Name" class="bt-body-page">
    <div class="d-flex gap-3 bt-main">
        <div class="bt-main-inside-scroll">
            <MudText Typo="Typo.h6">Welcome</MudText>
            <MudStack>
                <MudText Typo="Typo.body1">
                    Thank you for installing the KERI Auth browser extension.
                    This beta release provides the following features:
                </MudText>
                <MudText Class="bt-terms-markup mud-typography mud-typography-body1" >
                    <ol>
                        <li>Configure a connection with a KERI Agent Service (KERIA) of your choosing</li>
                        <ul>
                            <li>As a usage prerequisite, you'll need to arrange access to a KERIA instance provided by a vendor, or host an instance yourself</li>
                            <li>Use a passcode you previously created with your KERIA connection, or create a new passcode if permitted by the provider</li>
                        </ul>
                        <li>Create one or more identifiers</li>
                        <li>Select your current identifier</li>
                        <li>View credentials issued to your identifiers</li>
                        <li>Visit websites supporting KERI's polaris-web / signify protocol:
                            <ul>
                                <li>First, you'll allow KERI Auth to interact with the current web page by pressing the extension's action icon (in the top-right corner of your browser's window or click the extension/puzzle piece icon)</li>
                                <li>Follow instructions on the web page</li>
                                <li>Sign In with one of your KERI identifiers or credentials</li>
                                <li>Authorize access to website resources when prompted (to sign HTTP Request Headers)</li>
                            </ul>
                        </li>
                    </ol>
                </MudText>
                <MudText Typo="Typo.body1">For more information, see <a href="https://keriauth.com" target="blank">keriauth.com</a>.</MudText>
            </MudStack>
        </div>
    </div>
    <MudStack Row="true" class="bt-button-tray">
        <MudSpacer></MudSpacer>
        <MudButton @ref="nextButton" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await AcknowledgeWelcome())" Class="justify-end" data-testid="next">Next</MudButton>
    </MudStack>
</div>
