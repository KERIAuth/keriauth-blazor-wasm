@page "/Identifiers.html"


@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService
@inject NavigationManager navManager
@inject IJSRuntime js
@inject ILogger<IdentifiersPage> logger
@inject ISignifyClientService signifyClientService;
@inject IDialogService dialogService
@inject ISnackbar snackbar

@using Extension.Services.SignifyService.Models

@code {
    [CascadingParameter]
    public Preferences Prefs { get; set; } = new Preferences();

    // fields
    string DialogResult { get; set; } = "unknown";

    // properties
    bool IsAddingAid { get; set; }
    List<Aid>? MyIdentifiers { get; set; }

    // reactive properties
    string CountLabel => (MyIdentifiers is not null) ? "(" + MyIdentifiers.Count + ")" : "...";
    public static string CardClass(string activeAid2, string rowIdentifier) => (string)activeAid2 == rowIdentifier ? "4px solid var(--mud-palette-primary);" : "4px solid transparent;";
    string ActiveAid => Prefs.SelectedPrefix;

    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation($"OnInitializedAsync");
    }

    protected override async Task OnParametersSetAsync()
    {
        logger.LogInformation($"OnParametersSetAsync");
        await GetIdentifiers();
    }

    private async Task GetIdentifiers()
    {
        logger.LogInformation("GetIdentifiers");
        var res = await signifyClientService.GetIdentifiers();
        if (res != null && res.IsSuccess)
        {
            logger.LogInformation("GetIdentifiers: {1}", res.Value.Aids.Count);
            MyIdentifiers = res.Value.Aids.OrderBy(a => a.Name).ToList();
        };
    }

    private async Task AddIdentifier()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                BackdropClick = false,
                CloseButton = true,
                Position = DialogPosition.Center,
            };
        var dialog = await dialogService.ShowAsync<AddIdentifierDialog>("Add Identifier", parameters, options);
        var result = await dialog.Result;
        if (result is null || result.Canceled)
        {
            DialogResult = "Dialog was cancelled";
        }
        else
        {
            DialogResult = $"Dialog result: {result.Data}";
            logger.LogInformation("AddIdentifier: {1}", result.Data);
            IsAddingAid = true;
            StateHasChanged();
            var res = await signifyClientService.RunCreateAid(result.Data?.ToString() ?? String.Empty);
            if (res.IsFailed || res.Value is null)
            {
                logger.LogWarning("AddIdentifier failed: {e}", string.Join("; ", res.Errors.Select(e => e.Message)));
                snackbar.Add("Failed to add identifier", Severity.Error);
            }
            else
            {
                logger.LogInformation("AddIdentifier: {1}", res.Value);
                await GetIdentifiers();
                var prefs = await preferencesService.GetPreferences();
                await preferencesService.SetPreferences(prefs with { SelectedPrefix = res.Value });
            }
        }
        IsAddingAid = false;
        StateHasChanged();
    }

    async Task SetActiveAid(string identifier)
    {
        var newPrefs = Prefs with { SelectedPrefix = identifier };
        await preferencesService.SetPreferences(newPrefs);
    }
}

<div id="@this.GetType().Name" class="bt-body-page">
    <MudStack Class="bt-main">
        <div class="bt-main-inside-scroll">
            <MudStack Row="true">
                <MudText Typo="Typo.h6">Identifiers</MudText>
                <MudText Typo="Typo.h6">@CountLabel</MudText>
                <MudTooltip Delay="0.5"
                            Text="">
                    <MudIcon Icon="@Icons.Material.Outlined.Info" Class="bt-info-icon" />
                </MudTooltip>

            </MudStack>

            @if (MyIdentifiers is not null)
            {
                @foreach (Aid aid in MyIdentifiers)
                {
                    <MudLink OnClick="() => navManager.NavigateTo(RouteToIdentifier + aid.Prefix)">
                        <MudCard Class="py-0 my-1">
                            <div class="d-flex" style=@("align-items:center; border-left: " + CardClass((string)(ActiveAid ?? ""), aid.Prefix))>
                                <MudTooltip Text="Set Identifier as active" Delay="1000">
                                    <MudButton OnClick="async () => await SetActiveAid(aid.Prefix)">
                                        <MudIcon ViewBox="0 0 100 100" Icon="@Helper.Identicon.MakeIdenticon(aid.Prefix)" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                                    </MudButton>
                                </MudTooltip>
                                <MudText Typo="Typo.h6">@aid.Name</MudText>
                            </div>
                        </MudCard>
                    </MudLink>
                }
            }
            @if (IsAddingAid)
            {
                <div style="display:flex; align-items: center; justify-content:center; position:absolute; z-index:999; top:50%; left:50%; transform: translate(-50%, -50%); width:300px; height:200px;  ">
                    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                </div>
            }
        </div>
    </MudStack>
    <MudStack Row="true" class="bt-button-tray">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
        <MudSpacer />
        <MudButton StartIcon="@Icons.Material.Filled.Add" Disabled="@IsAddingAid" OnClick="async () => await AddIdentifier()" Variant="Variant.Filled" Color="Color.Primary">Add Identifier</MudButton>
    </MudStack>
</div>
