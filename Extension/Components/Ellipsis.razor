@inject IJSRuntime js
@using System.Diagnostics
@using Extension
@using Extension.Helper
@using static Extension.Helper.UIHelper;

<MudStack Row="true" Class="rounded px-0 py-0">
    @if (StringContent is not null && StringContent.Length != 0)
    {
        if (StringContent.Length <= MaxLength)
        {
            <span>@StringContent</span>
        }
        else
        {
            <span>@StringContent.Substring(0, (int)Math.Min(MaxLength/2, Math.Round(StringContent.Length / 2f, MidpointRounding.ToZero)))&hellip;@StringContent.Substring(StringContent.Length-2-(int)MaxLength/2)</span>
        }
    }
    @if (IncludeCopyIcon)
    {
        <MudIconButton Style="padding: 0px !important;" Size="Size.Small" OnClick="async () => await CopyToClipboard2()" Icon="@Icons.Material.Filled.ContentCopy" aria-label="delete"></MudIconButton>
    }
</MudStack>

@code {
    [Parameter]
    public string StringContent { get; set; } = "";

    [Parameter]
    public int MaxLength { get; set; } = 10;

    [Parameter]
    public bool IncludeCopyIcon { get; set; } = false;

    private async Task CopyToClipboard2()
    {
        Debug.Assert(StringContent is not null);
        await UIHelper.Copy2Clipboard(StringContent);
    }
}