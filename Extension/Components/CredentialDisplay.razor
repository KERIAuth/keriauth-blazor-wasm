@using Microsoft.VisualBasic
@using System.Diagnostics.CodeAnalysis
@inject ILogger<CredentialDisplay> logger
@inject IJSRuntime js
@inject ISnackbar snackbar
@inject IStorageService storageService

@code {
    [Parameter]
    [NotNull]
    public RecursiveDictionary? credential { get; init; }

    [Parameter]
    [NotNull]
    public CredDetail displayDetail { get; init; }

    // fields and types
    public enum CredDetail
    {
        Minimal,
        Typical
    }

    // properties

    // reactive properties

    // Common schema properties
    string? SchemaId => credential?.GetValueByPath("schema.$id")?.Value?.ToString() ?? string.Empty;
    //
    string? CredentialType => credential?.GetValueByPath("schema.$credentialType")?.Value?.ToString() ??
    string.Empty;
    //
    string? SchemaTitle => credential?.GetValueByPath("schema.title")?.Value?.ToString() ??
    string.Empty;
    string? SchemaDescr => credential?.GetValueByPath("schema.description")?.Value?.ToString() ??
    string.Empty;
    //
    string? IssuerLabel => credential?.GetValueByPath(
    "schema.properties.i.description")?.Value?.ToString() ?? String.Empty;
    string? IssuerValue => credential?.GetValueByPath("sad.i")?.Value.ToString() ?? String.Empty;
    //
    string? IssuedDate => credential?.GetValueByPath("sad.a.dt")?.Value?.ToString()?.Substring(0, 10) ??
    string.Empty;

    // Unique schema properties
    string? PersonLegalNameLabel => (SchemaProperties1 is null) ? null :
    SchemaProperties1?.GetValueByPath("properties.personLegalName.description")?.Value.ToString() ??
    String.Empty;
    string? PersonLegalNameValue => credential?.GetValueByPath(
    "sad.a.personLegalName")?.Value.ToString() ?? String.Empty;
    //
    string? RequestingLEILabel => (SchemaProperties1 is null) ? null : SchemaProperties1.GetValueByPath(
    "properties.LEI.description")?.Value.ToString() ?? String.Empty;
    string? RequestingLEIValue => credential?.GetValueByPath("sad.a.LEI")?.Value.ToString() ??
    String.Empty;
    //
    string? IssueeLabel => (SchemaProperties1 is null) ? null : SchemaProperties1.GetValueByPath(
    "properties.i.description")?.Value.ToString() ?? String.Empty;
    string? IssueeValue => credential?.GetValueByPath("sad.a.i")?.Value.ToString() ?? String.Empty;
    //
    string? EcrDescription => (SchemaProperties1 is null) ? null : @SchemaProperties1.GetValueByPath(
    "properties.engagementContextRole.description")?.Value.ToString() ?? String.Empty;
    string? EcrValue => @credential?.GetValueByPath("sad.a.engagementContextRole")?.Value.ToString() ??
    String.Empty;
    //
    TypedValue? SchemaPropertiesTypeValue => credential?.GetValueByPath("schema.properties.a.oneOf");
    List<object>? SchemaProperties => SchemaPropertiesTypeValue?.Value as List<object>;
    RecursiveDictionary? SchemaProperties1 => (SchemaProperties is null || SchemaProperties[1] is null) ? null :
    SchemaProperties[1] as RecursiveDictionary ?? RecursiveDictionary.FromObjectDictionary((Dictionary<string, object>)SchemaProperties[1]);


    // TBD P2 implement usage of this
    // Check whether the expected credential type matches the schema id. Assumes the current versions as of 2025-08-26
    private Boolean CheckExpectedCredentialType() => (SchemaId) switch
    {
        "EBNaNu-M9P5cgrnfl2Fvymy4E_jvxxyjb70PRtiANlJy" => OOR_Cred == CredentialType,
        "EH6ekLjSr8V32WyFbGe1zXjTzFs9PkTYmupJ9H65O14g" => ECRAuth_Cred == CredentialType,
        "EEy9PkikFcANV1l7EHukCeXqrzT1hNZjGlUk7wuMO5jw" => ECR_Cred == CredentialType,
        "ENPXp1vQzRF6JwIuS-mp2U8Uf1MoADoP_GqQ62VsDZWY" => VLEI_Cred == CredentialType,
        "EKA57bKBKxr_kN7iN5i7lMUxpMG-s19dRcmov1iDxz-E" => OORAuth_Cred == CredentialType,
        "EBfdlu8R27Fbx-ehrqwImnK-8Cm79sqbAQ4MmvEAYqao" => QVI_Cred == CredentialType,
        "EMhvwOlyEJ9kN4PrwCpr9Jsv7TxPhiYveZ0oP3lJzdEi" => XBRL_Attest == CredentialType,
        // otherwise, an unknown schema id or unexpected mismatch
        _ => false
    };

    const string OOR_Cred = "LegalEntityOfficialOrganizationalRolevLEICredential";
    const string ECRAuth_Cred = "ECRAuthorizationvLEICredential";
    const string ECR_Cred = "LegalEntityEngagementContextRolevLEICredential";
    const string VLEI_Cred = "LegalEntityvLEICredential";
    const string OORAuth_Cred = "OORAuthorizationvLEICredential";
    const string QVI_Cred = "QualifiedvLEIIssuervLEICredential";
    const string XBRL_Attest = "iXBRLDataAttestation";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        logger.LogInformation("OnInitializedAsync");
    }

    protected override async Task OnParametersSetAsync()
    {
        // StateHasChanged();
    }
}

<MudCard Class="pa-3">
    <MudStack>
        @*  // TODO P2: validate that the credential type matches the schema id, and show details depending on that
        *@
        @*        // Title *@
        @switch (CredentialType, displayDetail)
        {
            case (_, CredDetail.Minimal):
                <MudText><b>@SchemaTitle </b></MudText>
                break;
            case (_, CredDetail.Typical):

            default:
                <MudText><b>@SchemaTitle </b><br /><em>@SchemaDescr</em></MudText>
                break;
        }

        @* // Issuer *@
        @switch (CredentialType, displayDetail)
        {
            case (_, CredDetail.Typical):
            case (_, CredDetail.Minimal):
                <MudText><b>Issued</b> @IssuedDate</MudText>

                if (IssuerLabel != String.Empty)
                {
                    <MudText><b>Issuer</b></MudText>
                    <MudStack Row Style="align-items: center;">
                        <MudIcon ViewBox="0 0 100 100" Icon="@MakeIdenticon(IssuerValue)"
                            Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                        <MudText Style="overflow-wrap: anywhere;">@IssuerLabel: <br /><b>@IssuerValue</b></MudText>
                    </MudStack>
                }
                break;

            default:
                break;
        }

        @* // Issuee *@
        @switch (CredentialType, displayDetail)
        {

            case (_, _):
            default:
                <MudText><b>Issuee</b></MudText>

                if (RequestingLEILabel != String.Empty)
                {
                    <MudText>
                        @RequestingLEILabel: <b>@RequestingLEIValue</b>
                        <MudIconButton Icon="@Icons.Material.Filled.Link" Target="_blank"
                            Href="@($"https://search.gleif.org/#/search/simpleSearch={RequestingLEIValue}&fulltextFilterId=LEIREC_FULLTEXT")"
                            Style="margin-left: 4px;" />
                    </MudText>
                }

                if (PersonLegalNameLabel != String.Empty)
                {
                    <MudText>
                        @PersonLegalNameLabel: <b>@PersonLegalNameValue</b>
                    </MudText>
                }

                if (IssueeLabel is not null && IssueeLabel != String.Empty && IssueeValue is not null)
                {
                    <MudStack Row Style="align-items: center;">
                        <MudIcon ViewBox="0 0 100 100" Icon="@MakeIdenticon(IssueeValue)"
                            Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                        <MudText Style="overflow-wrap: anywhere;">@IssueeLabel: <br /><b>@IssueeValue</b></MudText>
                    </MudStack>
                }
                break;
        }

        @* // Credential-specific properties *@
        @if (!string.IsNullOrEmpty(EcrDescription))
        {
            @switch (CredentialType, displayDetail)
            {
                default:
                    <MudText>@EcrDescription: <b>@EcrValue</b></MudText>
                    break;
            }
        }

    </MudStack>
    @{
        switch (CredentialType, displayDetail)
        {
            case (_, CredDetail.Typical):
                <MudStack Row>
                    <MudSpacer />
                    @* TODO P1 Add copy to clipboard *@
                    <MudIconButton Style="padding: 0px !important;" Size="Size.Small"
                        OnClick="async () => {}"
                        Icon="@Icons.Material.Filled.ContentCopy" aria-label="delete"></MudIconButton>
                </MudStack>
                break;
            default:
                break;
        }
    }
</MudCard>
