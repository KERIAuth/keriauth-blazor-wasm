@inherits LayoutComponentBase
@implements IDisposable
@using KeriAuth.BrowserExtension;
@using KeriAuth.BrowserExtension.Helper;
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.UI.Views
@using FluentResults;
@using System.Diagnostics;
@using static KeriAuth.BrowserExtension.AppConfig;
@using System.Reactive.Linq
@using MudBlazor
@using MudBlazor.Utilities
@using System.Text.Json
@inject HttpClient http
@inject IJSRuntime js
<!-- inject Blazor.BrowserExtension.IBrowserExtensionEnvironment BrowserExtensionEnvironment  -->
@inject NavigationManager navManager
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject IStorageService storageService
@inject IStateService stateService
@inject IPreferencesService preferencesService
@inject ISnackbar snackbar
@inject IAlarmService timerService
@inject ILogger<MainLayout> logger
@inject IStateService stateService
@inject IdentifiersService identifiersService

<MudThemeProvider Theme="MyCustomTheme" @bind-IsDarkMode="@isDarkTheme" />
<MudDialogProvider />
<MudSnackbarProvider Style="z-index:9999" />

<MudLayout id="MainLayout" Style="overflow-y:hidden; overflow-x:hidden; box-sizing: border-box; position:absolute; top:0; width:100vw;">

    <MudAppBar Elevation="2" Style="padding-left: 0px; padding-right: 0px; height:var(--bt-appbar-height);">
        <MudStack Style="height:inherit; width: 100%; padding-bottom:8px;" Class="d-flex pt-2" Row="true">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleMenuDrawer" Style="padding-left: 5px;" data-testid="menuHamburger" />
            <MudButton Href="@RouteToStart" Style="padding: 0; border: none; background: none; ">
                <img src="images/512_keri_logo.png" alt="Icon" style="width: 24px; height: 24px;" />
                <MudText Style="margin-left:7px; font-size:larger; color:hsl(274deg 78% 75%)">KERI Auth</MudText>
            </MudButton>

            <MudSpacer />
            <div style="align-items: center; display: flex; Background:Transparent">
                @if (hasNewMessages)
                {
                    <MudTooltip Text="Notifications" Delay="1000">
                        <MudIconButton OnClick="GoToChat" Icon="@Icons.Material.Filled.Message" Color="Color.Inherit" />
                    </MudTooltip>
                }
            </div>
            <!-- Identicon: -->
            <div hidden="@IsIdenticonHidden" style="align-self:center; height: 35px; margin-right: -8px;">
                <MudTooltip Text="@activeAidTooltip" Arrow="true" Placement="Placement.Left" Delay="1000">
                    <MudIcon @onclick="ClickToggleProfilePanel" ViewBox="0 0 100 100" Icon="@activeAidIdenticon" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                </MudTooltip>
            </div>

        </MudStack>
        <!-- The AID selector overlay covers entire page -->
        <MudOverlay DarkBackground LightBackground @bind-Visible="@isProfilePanelOpen" OnClick="ToggleProfilePanel" Style="display: block; width:100vw; min-height:100vh; height:fit-content; overflow-y:auto; color:var(--mud-palette-primary);">
            <div style="background:var(--mud-palette-background); position:absolute; height: auto; right: 0px; display:block; width:300px; margin-top: var(--bt-appbar-height); border-style: solid; border-top-style:none; border-width: 1px; border-color: #CACACA;">
                <MudList Clickable="true" @bind-SelectedValue="activeAid" Class="bt-sad-4;" Style="padding: 0px">
                    @foreach (var identifierHeadline in identifiersHeadlines) {
                        <MudListItem Value="@identifierHeadline.Prefix" OnClick="async () => await SetActiveAid()" Style="@IdentifiersView.cardClass((string)activeAid, identifierHeadline.Prefix)" Class="bt-sad-5">
                            <MudStack Row="true">
                                <MudIcon Icon=@identifierHeadline.Identicon ViewBox="0 0 100 100" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden; margin-top: 3px;" />
                                <div class="bt-sad-2">
                                    <MudStack>
                                    <MudText Typo="Typo.subtitle2" Color="Color.Primary">@identifierHeadline.Alias</MudText>
                                        <MudTooltip Text="Copy to clipboard" Delay="1000" Placement="Placement.Left">
                                            <MudText Typo="Typo.body2" Style="margin-left: -8px; margin-top: -12px;">
                                                <Ellipsis StringContent="@identifierHeadline.Prefix" IncludeCopyIcon="true"></Ellipsis>
                                            </MudText>
                                        </MudTooltip>
                                    </MudStack>
                                </div>
                            </MudStack>
                        </MudListItem>
                        <MudDivider DividerType="DividerType.Inset" />
                    }
                </MudList>
                <MudStack Row="true" Class="mt-3 mb-3 d-flex justify-end" Style="padding-right:8px;">
                    <MudSpacer></MudSpacer>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" Href=@RouteToIdentifiers>Manage Identifiers</MudButton>
                </MudStack>
            </div>
        </MudOverlay>
    </MudAppBar>
    @{
        /* TODO P3 the linear gradient background experiment should either eliminated or make visually good and depending on IsDarkTheme setting */
    }
    <MudDrawerContainer id="MudDrawerContainer" Style="height:calc(100vh - var(--mud-appbar-height)); top:var(--mud-appbar-height); position:absolute; width:inherit; display:flex;">
        <!--  background-image:linear-gradient( 135deg, HSLA(205, 45%, 44%, 0.0), HSLA(189, 100%, 50%, 0.1) );">  -->
        <MudDrawer id="MudDrawer" @ref="mudDrawerRef" @bind-Open="@isMenuDrawerOpen" Elevation="1" ClipMode="DrawerClipMode.Never" Variant="@drawerMode" OpenMiniOnHover="true">
            <MudNavMenu Style="Background: var(--mud-palette-appbar-background); height:calc(100vh - var(--mud-appbar-height)); overflow-y:auto;">
                <MudNavLink Href=@RouteToIdentifiers Disabled="@(!isAuthenticated)" Icon="@Icons.Material.Filled.Key" IconColor="Color.Surface">Identifiers</MudNavLink>
                <MudNavLink Href=@RouteToGroups Disabled="@(!isAuthenticated)" Icon="@Icons.Material.Filled.Groups" IconColor="Color.Surface">Groups</MudNavLink>
                <MudNavLink Href=@RouteToCredentials Disabled="@(!isAuthenticated)" Icon="@Icons.Material.Filled.Badge" IconColor="Color.Surface">Credentials</MudNavLink>
                <MudNavLink Href=@RouteToNotifications Disabled="@(!isAuthenticated)" Icon="@Icons.Material.Filled.Notifications" IconColor="Color.Surface">Notifications</MudNavLink>
                <MudNavLink Href=@RouteToContacts Disabled="@(!isAuthenticated)" Icon="@Icons.Material.Filled.Contacts" IconColor="Color.Surface">Contacts</MudNavLink>
                <MudNavLink Href=@RouteToSchemas Disabled="@(!isAuthenticated)" Icon="@Icons.Material.Filled.Schema" IconColor="Color.Surface">Schemas</MudNavLink>
                <MudNavLink Href=@RouteToContacts Disabled="@(!isAuthenticated)" Icon="@Icons.Material.Filled.Web" IconColor="Color.Surface" data-testid="menuContacts">Websites</MudNavLink>
                @if (isInPopup)
                {
                    <MudNavLink OnClick=OpenTabAndClosePopUp Icon="@Icons.Material.Filled.OpenInFull" IconColor="Color.Surface">Pop out to tab</MudNavLink>
                }
                <MudNavGroup Title="Advanced" Icon="@Icons.Material.Filled.Settings" IconColor="Color.Surface">
                    @{
                        /* TODO P3 convert to a "navigate(url)" type of method, so tooltip of URL doesn't show in browser?' */
                    }
                    <MudNavLink Href=@RouteToManagePrefs Disabled="@(!isAuthenticated)" Icon="@Icons.Material.Filled.SettingsApplications" IconColor="Color.Surface">Preferences</MudNavLink>
                    <MudNavLink Href=@RouteToManageAgents Disabled="@(!isAuthenticated)" Icon="@Icons.Material.Outlined.PeopleOutline" IconColor="Color.Surface">KERIA Agent Services</MudNavLink>
                    @{
                        /*
                        <MudNavLink Disabled="true" Icon="@Icons.Material.Filled.Key" IconColor="Color.Surface">Keys</MudNavLink>
                        */
                    }
                    <MudNavLink OnClick="async () => await Lock()" Disabled="@(!isAuthenticated)" Icon="@Icons.Material.Filled.Lock" IconColor="Color.Surface">Lock</MudNavLink>
                    <MudNavLink Href=@RouteToDelete Icon="@Icons.Material.Filled.DeleteForever" IconColor="Color.Surface">Delete Configuration&hellip;</MudNavLink>
                </MudNavGroup>
                <MudNavGroup Title="About" Icon="@Icons.Material.Filled.Info" IconColor="Color.Surface">
                    <MudNavLink Href=@RouteToHelp Target="_blank" Icon="@Icons.Material.Filled.Help" IconColor="Color.Surface">Help</MudNavLink>
                    <MudNavLink Href=@RouteToRelease Target="_blank" Icon="@Icons.Material.Filled.StickyNote2" IconColor="Color.Surface">Current Release Notes</MudNavLink>
                    <MudNavLink Href=@RouteToReleaseHistory Icon="@Icons.Material.Filled.StickyNote2" IconColor="Color.Surface">Release History</MudNavLink>
                    <MudNavLink Href=@RouteToTerms Target="_blank" Icon="@Icons.Material.Filled.StickyNote2" IconColor="Color.Surface">Terms of Use</MudNavLink>
                    <MudNavLink Href=@RouteToPrivacy Target="_blank" Icon="@Icons.Material.Filled.StickyNote2" IconColor="Color.Surface">Privacy Policy</MudNavLink>
                    <MudNavLink Href=@RouteToLicenses Icon="@Icons.Material.Filled.StickyNote2" IconColor="Color.Surface">Licenses</MudNavLink>
                    <MudNavLink Href=@RouteToReleaseHistory Icon="@Icons.Material.Filled.Info" IconColor="Color.Surface">Version @version_name</MudNavLink>
                </MudNavGroup>
            </MudNavMenu>
        </MudDrawer>
        <MudMainContent Class="bt-main-content" Style="@mainContentStyle">
            <MudContainer MaxWidth="MaxWidth.Large" Style="height:inherit; min-height:inherit; padding-left:0; padding-right:0;">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudDrawerContainer>
</MudLayout>

<style>
    :root {
        --appbar-height: 64px;
        /* TODO override MudBlazor behavior making it smaller at narrow widths */
        --bt-buttontray-height: 60px;
        --bt-chatbox-height: 60px;
    }

    .mud-appbar .mud-toolbar-appbar {
        /* Fixed height. We don't want Mudblazor default of changing height depending on media width */
        height: var(--appbar-height);
    }

    .mud-button {
        text-transform: capitalize;
    }

    .mud-chip {
        text-wrap: wrap; /* known CSS102 issue. Experimental feature, but supported in Chrome 114. no easy workaround yet. */
        /* TODO P3 try this fix for text-wrap:wrap instead:  word-wrap: break-word;  */
    }

    .mud-navmenu.mud-navmenu-default .mud-nav-link.active:not(.mud-nav-link-disabled) {
        color: #eaff00;
        background-color: #373737;
    }

    .mud-nav-link.active:not(.mud-nav-link-disabled) {
        color: green;
    }

    .mud-nav-link-disabled {
        background: transparent;
    }

    /* Known false warning in VS of CSS002 issue.
                                                                                                                                                        See https://github.com/dotnet/razor/issues/7349 */
    /*
                                                                                                                                                        @@media (min-width: 960px) {
                                                                                                                                                        .mud-drawer-open-responsive-md-left.mud-drawer-left-clipped-never .mud-appbar {
                                                                                                                                                        margin-left: 0;
                                                                                                                                                        width: inherit;
                                                                                                                                                        }
                                                                                                                                                        }
                                                                                                                                                        */

    .mud-typography {
        overflow-wrap: break-word;
    }

    <!-- Select Active DID classes -->
    .bt-sad-1 {
        align-items: center;
    }

    .bt-sad-2 {
        margin-left: 12px;
        min-width: 100%;
    }

    .bt-sad-3 {
        display: inline-block;
        width: inherit;
    }

    .bt-sad-4 {
    }

    .bt-sad-5 {
        padding-left: 8px;
        padding-right: 8px;
    }

    .bt-sad-6 {
        overflow: hidden;
        text-overflow: ellipsis;
        width: 195px;
    }

    .bt-sad-8 {
        float: right;
    }

    .bt-body-page {
        height: inherit;
        min-height: inherit;
    }

    /* bt-main is used in on many pages, typically with the preceeding classes: d-flex flex-column??? gap-3 d-flex */
    .bt-main {
        height: calc(100vh - var(--appbar-height) - var(--bt-buttontray-height));
        overflow-y: auto;
        padding-left: 16px;
        padding-right: 0px; /* so that scrollbars hug right edge */
        padding-top: 10px;
    }

    .bt-main-inside-scroll {
        padding-right: 12px;
        width: -webkit-fill-available; /* known CSS105 issue. no easy workaround. */
    }

    .bt-main-content {
        position: relative;
        padding-top: 0;
    }

    .bt-chat-group-header {
        /* width: -webkit-fill-available; */
        align-items: center;
        gap: 0;
        padding-right: 4px;
        padding-top: 8px;
    }

    .bt-chaticon {
        margin-left: 0px;
        margin-right: 8px;
    }

    .bt-button-tray {
        justify-content: flex-end;
        padding-left: 15px;
        padding-right: 15px;
        padding-bottom: 15px;
        height: var(--bt-buttontray-height);
    }

    .bt-chatbox {
        height: var(--bt-chatbox-height);
    }

    .bt-stack-item {
        justify-content: flex-end;
        padding-left: 15px;
        padding-right: 15px;
        align-items: center;
        height: 48px;
    }

    .bt-identicon {
        border-style: solid;
        border-color: black;
        border-width: 2px;
        border-radius: 50%;
        width: 35px;
        height: 35px;
        overflow: hidden;
    }

    .bt-info-icon {
        height: 15px;
        color: lightslategrey;
        position: relative;
        top: 10px;
    }
</style>

@code {
    bool isMenuDrawerOpen;
    bool isProfilePanelOpen;
    bool isDarkTheme;
    bool isInExtension;
    bool IsIdenticonHidden
    {
        get
        {
            return stateService.GetState() != IStateService.States.Authenticated || string.IsNullOrEmpty((string)activeAid);
        }
    }
    bool isInPopup;
    bool hasNewMessages;
    object activeAid { get; set; } = "unselectedDid";
    string activeAidIdenticon { get; set; } = "";
    // string activeAidName { get; set; } = "";
    string activeAidTooltip { get; set; } = "";
    string version = "0.0.0";
    string version_name = "unset 33";
    string mainContentStyle = " left:0; ";
    bool isAuthenticated { get; set; }
    MudBlazor.MudDrawer mudDrawerRef = new();
    DrawerVariant drawerMode;
    IdleAlarm? idleAlarm;

    // TODO: Implement instead the newer [JSExport] attribute? See https://learn.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/import-export-interop?view=aspnetcore-8.0
    [JSInvokable]
    public Task ResetInactivityTimer()   // this method name needs to match the JS literal that invokes this
    {
        Debug.Assert(idleAlarm != null);
        idleAlarm.Reset();
        return Task.CompletedTask;
    }

    private async Task OnIdleHandler()
    {
        // Action to perform on inactivity
        logger.LogInformation("Timed out OnIdleHandler");
        await stateService.TimeOut();
        // note that lock() will be invoked in a reactive method
    }

    public class ManifestData
    {
        public string Version { get; set; } = "0.0.0";
        public string Version_name { get; set; } = "unset verson name";
    }

    // TODO P2: need to revisit this list, especially RouteToManagePrefs
    static List<string> ViewsNotRequiringAuth = new() { RouteToStart, RouteToDelete, RouteToRestore, RouteToCreate, RouteToNewInstall, RouteToReleaseHistory, RouteToManagePrefs };

    private IDisposable? preferencesSubscription;
    private IDisposable? stateSubscription;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        logger.LogInformation("OnParametersSetAsync");

        // If not currently authenticated and are now on a page
        // that requires authentication, then redirect to Start
        isAuthenticated = await stateService.IsAuthenticated();
        if (!isAuthenticated)
        {
            var ap = new Uri(navManager.Uri).AbsolutePath;
            if (ViewsNotRequiringAuth.Contains(ap))
            {
                return;
            }
            else
            {
                navManager.NavigateTo(RouteToStart);
            }
        }
    }

    static public IJSObjectReference? utilModule;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            logger.LogInformation("OnAfterRenderAsync firstRender=true");

            preferencesSubscription = preferencesService.Subscribe(
                onNext: async (Preferences value) => await HandleNextFromPreferencesService(value),
                onError: async (Exception error) => await HandleErrorFromPreferencesService(error),
                onCompleted: async () => await HandleCompletedFromPreferencesService());

            stateSubscription = stateService.Subscribe(
                onNext: async (IStateService.States value) => await HandleNextFromStateService(value),
                onError: async (Exception error) => await HandleErrorFromStateService(error),
                onCompleted: async () => await HandleCompletedFromStateService());

            idleAlarm = new IdleAlarm(timerService, async () => await OnIdleHandler());
            await js.InvokeVoidAsync("window.registerInactivityTimerResetEvents", DotNetObjectReference.Create(this));
        }

        var res = await identifiersService.GetIdentifierHeadlines();
        if (res.IsSuccess)
        {
            identifiersHeadlines = res.Value;
        }
    }

    List<IdentifierHeadline> identifiersHeadlines = [];

    // Compute the Left position for MainContent depending on the type of Drawer and its open state
    // This complexity might be needed because we want to support multiple DrawerVariant's and because of issues such as mentioned here: https://github.com/MudBlazor/MudBlazor/issues/4213
    private void UpdateMainContentStyle()
    {
        const string miniWidth = "var(--mud-drawer-mini-width-left)";
        const string openWidth = "var(--mud-drawer-width-left)";

        // TODO P3 Menu: Handle the corner case: if the Panel's Variant is Responsive and left value is not 0, then the left value is negative and off-screen.  Effectively, it is closed.
        // This can be seen in the dynamic classes for MudDrawer such as "mud-drawer.mud-drawer-responsive.mud-drawer-pos-left.mud-drawer--open"
        // An implemenentation idea is to compute the MudDrawer's "effectiveOpenState" for how it appears visually.
        // One could get the html MudDrawer element by id and/or class, and see if its left value is 0 or something else.
        // See also https://www.syncfusion.com/faq/blazor/javascript-interop/how-do-i-get-an-element-by-id-or-class-in-blazor

        // logger.LogInformation("MainLayout: UpdateMainContentStyle: isMenuDrawerOpen:" + isMenuDrawerOpen + " mudDrawerRef.Variant=" + mudDrawerRef.Variant);

        mainContentStyle = (isMenuDrawerOpen, mudDrawerRef.Variant) switch
        {
            (_, DrawerVariant.Mini) => $"left: {miniWidth}; width:calc(100vw - {miniWidth});",
            (_, DrawerVariant.Temporary) => $"left: 0; width:calc(100vw);",
            (true, DrawerVariant.Persistent) => $"left: {openWidth}; width:calc(100vw - {openWidth}); padding-right: {openWidth};",
            (false, DrawerVariant.Persistent) => $"left: 0; width:calc(100vw);",
            (true, _) => $"left: 0; width:calc(100vw);",
            (false, _) => $"left: {openWidth}; width:calc(100vw - {openWidth});",
        };
        StateHasChanged();
    }

    public void Dispose()
    {
        preferencesSubscription?.Dispose();
    }

    async Task HandleNextFromPreferencesService(Preferences value)
    {
        await InitializeOrOnNextPrefs(value);
    }

    async Task HandleErrorFromPreferencesService(Exception error)
    {
        logger.LogError("Error from PreferencesService: " + error.Message);
        await Task.Delay(0); // hack
    }

    async Task HandleCompletedFromPreferencesService()
    {
        logger.LogInformation("Completed from PreferencesService");
        await Task.Delay(0); // hack
    }

    async Task HandleNextFromStateService(IStateService.States updatedState)
    {
        await Task.Delay(0);
        switch (CurrentState, updatedState)
        {
            case (IStateService.States.Authenticated, IStateService.States.Unauthenticated):
            case (IStateService.States.Unauthenticated, IStateService.States.Unauthenticated):
                navManager.NavigateTo(RouteToStart);
                return;
            case (_, _):
                CurrentState = updatedState;
                StateHasChanged();
                break;
        }
    }

    async Task HandleErrorFromStateService(Exception error)
    {
        logger.LogError("Error from stateService: " + error.Message);
        await Task.Delay(0); // hack
    }

    async Task HandleCompletedFromStateService()
    {
        logger.LogInformation("Completed from stateService");
        await Task.Delay(0); // hack
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        logger.LogInformation("OnInitializedAsync");

        // TODO P3 why not derive this from ExtensionEnvironmentService?
        isInExtension = storageService.GetAppHostingKind() == IStorageService.AppHostingKind.BlazorWasmExtension;

        // Set properties affecting UI layout depending on the hosting environment
        switch (extensionEnvironmentService.ExtensionEnvironment)
        {
            case ExtensionEnvironment.ActionPopup:
                isInPopup = true;
                break;
            case ExtensionEnvironment.None:
                break;
            case ExtensionEnvironment.Popup:
                isInPopup = true;
                break;
            case ExtensionEnvironment.Iframe:
            case ExtensionEnvironment.Extension:
            default:
                break;
        }

        // TODO P2: update this to use chrome.runtime.getManifest()
        // Get version info from Manifest file
        const string manifestFilePath = "./manifest.json";
        var manifestData = await http.GetFromJsonAsync<ManifestData>(manifestFilePath);
        if (manifestData is not null)
        {
            version = manifestData.Version;
            version_name = manifestData.Version_name;
        }

        CurrentState = stateService.GetState();

        await InitializeOrOnNextPrefs(await preferencesService.GetPreferences());

        StateHasChanged(); // Necessary?

        return;
    }

    async Task ToggleDarkTheme()
    {
        var prefs = await preferencesService.GetPreferences();
        if (prefs.IsDarkTheme)
        {
            prefs.IsDarkTheme = false;
        }
        else
        {
            prefs.IsDarkTheme = true;
        }
        isDarkTheme = prefs.IsDarkTheme;
        await preferencesService.SetPreferences(prefs);
    }

    void UpdateDrawerMode(DrawerVariant oldDrawerMode, Preferences prefs)
    {
        // set drawerMode based on environment and preferences
        // TODO move this drawerMode code
        switch (extensionEnvironmentService.ExtensionEnvironment)
        {
            case ExtensionEnvironment.Iframe:
            case ExtensionEnvironment.Popup:
            case ExtensionEnvironment.ActionPopup:
                drawerMode = prefs.DrawerVariantInPopup;
                break;
            case ExtensionEnvironment.None:
            case ExtensionEnvironment.Extension:
            default:
                drawerMode = prefs.DrawerVariantInTab;
                break;
        }
        // if the drawer mode has changed, update the UI to reasonable drawer state
        if (oldDrawerMode != drawerMode)
        {
            // TODO this might be better if dependant on (oldDrawerMode, drawerMode, isMenuDrawerOpen)
            switch (drawerMode)
            {
                case DrawerVariant.Mini:
                    isMenuDrawerOpen = false;
                    break;
                case DrawerVariant.Temporary:
                    isMenuDrawerOpen = true;
                    break;
                case DrawerVariant.Responsive:
                    isMenuDrawerOpen = false;
                    break;
                case DrawerVariant.Persistent:
                default:
                    break;
            }
        }
        // TODO persiste the isMenuDrawerOpen state in preferences if Persistence drawer mode is selected. Depends on ExtensionEnvironment.
        // For now, just assume the following:
        if (drawerMode == DrawerVariant.Persistent && extensionEnvironmentService.ExtensionEnvironment == ExtensionEnvironment.None)
        {
            isMenuDrawerOpen = true;
        }
    }

    async Task InitializeOrOnNextPrefs(Preferences prefs)
    {
        isDarkTheme = prefs.IsDarkTheme;
        // TODO P4 set the background-image depending on isDarkTheme.
        activeAid = (object)prefs.SelectedAid;
        UpdateDrawerMode(drawerMode, prefs);
        UpdateMainContentStyle();
        await UpdateActiveAid(prefs.SelectedAid);
        StateHasChanged();
    }

    async Task UpdateActiveAid(string activeAid)
    {
        // if (WalletService.Wallet is not null)
        // {
        //     var result = WalletService.SetActiveDidByIdentifier((string)activeAid);
        //     if (result.IsSuccess)
        //     {
        //         var res = WalletService.GetActiveWalletDid();
        //         if (res.IsSuccess)
        //         {
        //             var did = res.Value;
        //             activeDidIdenticon = did.Identicon;
        //             activeDidName = did.Name;
        //             activeDidTooltip = string.Concat(activeDidName, " ", did.Did.ToString().Remove(18), "...");
        //             IsIdenticonHidden = false;
        //             return;
        //         }
        //     }
        //     else
        //     {
        //         logger.LogInformation("updateActiveDid Failed");
        //     }
        // }
        activeAidIdenticon = Helper.Identicon.MakeIdenticon(activeAid);
        var result = await identifiersService.GetIdentifierService(activeAid);
        if (result.IsSuccess)
        {
            activeAidTooltip = result.Value.cachedAid.Alias;
            return;
        }
        // TODO throw error?
        return;
    }

    async Task OpenTabAndClosePopUp()
    {
        if (utilModule is null)
        {
            logger.LogError("OpenTabAndClosePopUp: utilModule is null!");
            return;
        }
        await UIHelper.NewTabAndClosePopup();
        return;
    }

    async Task Lock()
    {
        await stateService.Unauthenticate();
        // subscription to stateService will handle the rest
    }

    async Task SetActiveAid()
    {
        // TODO should be more reactive?
        isProfilePanelOpen = false;
        var pref = await preferencesService.GetPreferences();
        pref.SelectedAid = (string)activeAid;
        await preferencesService.SetPreferences(pref);
        // Other actions will be reactive. See IObserver<Preferences>
    }

    private void ClickToggleProfilePanel(MouseEventArgs args)
    {
        ToggleProfilePanel();
    }

    void ToggleProfilePanel()
    {
        isProfilePanelOpen = !isProfilePanelOpen;
    }

    void OpenMenuDrawer()
    {
        isMenuDrawerOpen = true;
        UpdateMainContentStyle();
    }

    void ToggleMenuDrawer()
    {
        isMenuDrawerOpen = !isMenuDrawerOpen;
        UpdateMainContentStyle();
    }

    private void GoToChat()
    {
        // TODO P3 Chat: hasNewMessages should be responsive to existence of unread messages, not this click
        hasNewMessages = false;
        navManager.NavigateTo(RouteToChat);
    }

    public static IStateService.States CurrentState { get; set; } = IStateService.States.Unknown;

    MudTheme MyCustomTheme = new MudTheme()
        {
            // See also https://mudblazor.com/customization/default-theme
            Palette = new PaletteLight()
            {
                Primary = new MudColor(201, 1.0, 0.38, 1.0), // Colors.Indigo.Default,
                PrimaryLighten = Colors.Indigo.Lighten1,
                PrimaryDarken = Colors.Indigo.Darken1,
                PrimaryContrastText = Colors.Grey.Lighten5,
                // TextPrimary **

                Secondary = Colors.Brown.Default,
                SecondaryLighten = Colors.Brown.Lighten1,
                SecondaryDarken = Colors.Brown.Darken1,
                SecondaryContrastText = Colors.Grey.Lighten5,
                // TextSecondary  **

                Tertiary = Colors.DeepOrange.Default,
                TertiaryLighten = Colors.DeepOrange.Lighten1,
                TertiaryDarken = Colors.DeepOrange.Darken1,
                TertiaryContrastText = Colors.Grey.Lighten5,

                // Info
                // InfoLighten
                // InfoDarken
                // InfoContrastText

                // Success
                // SuccessLighten
                // SuccessDarken
                // SuccessContrastText
                // TextSuccess

                // Warning,
                // WarningLighten,
                // WarningDarken,
                // WarningContrastText,

                // Error,
                // ErrorDarken,
                // ErrorLighten,
                // ErrorContrastText,

                // Dark
                // DarkLighten
                // DarkDarken
                // DarkContrastText

                Background = new MudColor(0, 0.0, 0.96, 1.0),
                BackgroundGrey = new MudColor(0, 0.0, 0.76, 1.0),

                AppbarBackground = new MudColor(200, 0.17, 0.26, 1.0),
                // AppbarText

                TextDisabled = new MudColor(0, 0.0, 0.53, 1.0),

                DrawerBackground = new MudColor(0, 100, 10, 1.0),
                DrawerIcon = new MudColor(0, 1.0, 1.0, 1.0),
                DrawerText = new MudColor(0, 1.0, 1.0, 1.0),

                ActionDisabled = Colors.Grey.Default,

                Surface = new MudColor(0, 0.0, 0.90, 1.0),
                /*
                White
                Black

                TableStriped
                TableLines
                TableHover

                Surface

                OverlayLight
                OverlayDark

                LinesInputs
                LinesDefault

                HoverOpacity

                GrayLighter
                GrayLight
                GrayDefault
                GrayDarker
                GrayDark

                Divider
                DividerLight
                DividerDark

                ActionDisabledBackground
                ActionDisabled
                ActionDefault
                */
            },
            PaletteDark = new PaletteDark()
            {
                Primary = Colors.LightBlue.Lighten4,
                PrimaryLighten = Colors.LightBlue.Lighten3,
                PrimaryDarken = Colors.Cyan.Lighten5,
                PrimaryContrastText = Colors.Grey.Darken4,

                Secondary = Colors.Amber.Lighten4,
                SecondaryLighten = Colors.Amber.Lighten3,
                SecondaryDarken = Colors.Amber.Lighten5,
                SecondaryContrastText = Colors.Grey.Darken4,

                Tertiary = Colors.DeepOrange.Lighten4,
                TertiaryLighten = Colors.DeepOrange.Lighten3,
                TertiaryDarken = Colors.DeepOrange.Lighten5,
                TertiaryContrastText = Colors.Grey.Darken4,

                ActionDisabled = Colors.Grey.Darken1,
                ActionDisabledBackground = Colors.Grey.Default,

                Background = new MudColor(201, 0.23, 0.12, 1.0),
                BackgroundGrey = new MudColor(0, 0.0, 0.13, 1.0),
                Success = new MudColor(123, 0.41, 0.45, 1.0),
                // Error = new MudColor(244, 0.67, 0.54, 1.0),
                AppbarBackground = new MudColor(200, 0.19, 0.18, 1.0),
                TextPrimary = new MudColor(0, 0.0, 0.92, 1.0),

                TextSecondary = new MudColor(0, 0.0, 0.45, 1.0),
                Surface = new MudColor(0, 0.0, 0.21, 1.0),
                LinesDefault = new MudColor(0, 0.0, 1.0, 0.12),

                DrawerText = new MudColor(0, 0.0, 1.0, 1.0),
                TextDisabled = new MudColor(0, 0.0, 0.53, 1.0),
                DrawerBackground = new MudColor(200, 0.19, 0.18, 1.0),
                DrawerIcon = new MudColor(0, 1.0, 1.0, 1.0),
            },
        };
}
