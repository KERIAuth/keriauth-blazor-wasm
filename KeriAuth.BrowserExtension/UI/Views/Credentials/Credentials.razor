@page "/Credentials"
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.UI.Components
@using System.Collections.Immutable
@using System.Diagnostics
@using static KeriAuth.BrowserExtension.AppConfig;
@using static KeriAuth.BrowserExtension.Helper.PreviousPage

@inject NavigationManager NavManager
@inject IJSRuntime js
@inject ILogger<Credentials> Logger

<div id="Connections" class="bt-body-page">
    <div class="d-flex gap-3 bt-main">
        <div class="bt-main-inside-scroll">
            <div style="display:flex;">
                <MudText Typo="Typo.h6">Credentials Held</MudText>
                <MudTooltip Delay="0.5"
                            Text="">
                    <MudIcon Icon="@Icons.Material.Outlined.Info" Class="bt-info-icon" />
                </MudTooltip>
            </div>

            <MudStack Class="d-flex justify-center">
                <MudChip Label="true">No credentials found.</MudChip>
            </MudStack>
        </div>
    </div>
    <MudStack Row="true" class="bt-button-tray">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
        <MudSpacer></MudSpacer>
        <MudButton Disabled="true" StartIcon="@Icons.Material.Filled.ImportExport" Color="Color.Primary" OnClick="@(() => ImportSample())" Variant="Variant.Filled">Import</MudButton>
    </MudStack>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation($"OnInitializedAsync");
        await Task.Delay(0); // hack
        // await CredentialService.GetCredentials();
    }

    // TODO P2 20230906-006 this code is broken Credentials ImportSample()
    void ImportSample()
    {
        // var credential = new Blocktrust.Mediator.Common.Models.Credential.Credential();
        // Example from https://www.w3.org/TR/vc-data-model/

        // From https://github.com/danubetech/verifiable-credentials-java/blob/main/examples-jwt.md

        //         string json = "{\n\n  \"@context\": [\n    \"https://www.w3.org/2018/credentials/v1\",\n    \"https://www.w3.org/2018/credentials/examples/v1\"\n  ],\n\n  \"id\": \"http://example.edu/credentials/1872\",\n\n  \"type\": [\"VerifiableCredential\", \"AlumniCredential\"],\n\n  \"issuer\": \"https://example.edu/issuers/565049\",\n\n  \"issuanceDate\": \"2010-01-01T19:23:24Z\",\n\n  \"credentialSubject\": {\n\n    \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",\n\n    \"alumniOf\": {\n      \"id\": \"did:example:c276e12ec21ebfeb1f712ebc6f1\",\n      \"name\": [{\n        \"value\": \"Example University\",\n        \"lang\": \"en\"\n      }, {\n        \"value\": \"Exemple d'Université\",\n        \"lang\": \"fr\"\n      }]\n    }\n  },\n\n\n  \"proof\": {\n\n    \"type\": \"RsaSignature2018\",\n\n    \"created\": \"2017-06-18T21:19:10Z\",\n\n    \"proofPurpose\": \"assertionMethod\",\n\n    \"verificationMethod\": \"https://example.edu/issuers/565049#key-1\",\n\n    \"jws\": \"eyJhbGciOiJSUzI1NiIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TCYt5X\\nsITJX1CxPCT8yAV-TVkIEq_PbChOMqsLfRoPsnsgw5WEuts01mq-pQy7UJiN5mgRxD-WUc\\nX16dUEMGlv50aqzpqh4Qktb3rk-BuQy72IFLOqV0G_zS245-kronKb78cPN25DGlcTwLtj\\nPAYuNzVBAh4vGHSrQyHUdBBPM\"\n  }\n}";
        // string json = "{\"@context\": [\"https://www.w3.org/2018/credentials/v1\",    \"https://www.w3.org/2018/credentials/examples/v1\"  ],  \"id\": \"http://example.edu/credentials/1872\",  \"type\": [\"VerifiableCredential\", \"AlumniCredential\"],  \"issuer\": \"https://example.edu/issuers/565049\",  \"issuanceDate\": \"2010-01-01T19:23:24Z\",  \"credentialSubject\": {    \"id\": \"did:example:ebfeb1f712ebc6f1c276e12ec21\",    \"alumniOf\": {      \"id\": \"did:example:c276e12ec21ebfeb1f712ebc6f1\",      \"name\": [{        \"value\": \"Example University\",        \"lang\": \"en\"      }, {        \"value\": \"Exemple d'Université\",        \"lang\": \"fr\"      }]    }  },  \"proof\": {    \"type\": \"RsaSignature2018\",    \"created\": \"2017-06-18T21:19:10Z\",    \"proofPurpose\": \"assertionMethod\",    \"verificationMethod\": \"https://example.edu/issuers/565049#key-1\",    \"jws\": \"eyJhbGciOiJSUzI1NiIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TCYt5X\\nsITJX1CxPCT8yAV-TVkIEq_PbChOMqsLfRoPsnsgw5WEuts01mq-pQy7UJiN5mgRxD-WUc\\nX16dUEMGlv50aqzpqh4Qktb3rk-BuQy72IFLOqV0G_zS245-kronKb78cPN25DGlcTwLtj\\nPAYuNzVBAh4vGHSrQyHUdBBPM\"  } }";

        try
        {
            // credential.Parse(json);
        }
        catch (Exception e)
        {
            Logger.LogError(e.ToString());
            return;
        }

        // var credentials = new List<Blocktrust.Mediator.Common.Models.Credential.Credential>();
        // credentials.Add(credential);

        var tos = new List<string>();
        tos.Add("did:example:ebfeb1f712ebc6f1c276e12ec21");

        // var responseMessage = new Blocktrust.DIDComm.Message.Messages.Message();

        // var issueCredentialOfferPreview = new Blocktrust.Mediator.Common.Models.CredentialOffer.IssueCredentialOfferPreview();

        // var presentations = new List<Blocktrust.Mediator.Common.Models.CredentialOffer.Presentation>();

        // IssueCredentialOfferMessage issueCredentialOfferMessage = new IssueCredentialOfferMessage("from", tos, "messageId", responseMessage, issueCredentialOfferPreview, presentations);
    }
}