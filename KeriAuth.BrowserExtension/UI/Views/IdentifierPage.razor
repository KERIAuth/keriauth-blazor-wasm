@page "/Identifier/{prefix?}"

@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.AppConfig;
@using System.Diagnostics
@using System.Text.Json

@implements IDisposable;
@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService
@inject NavigationManager navManager
@inject IJSRuntime js
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@inject ILogger<IdentifierPage> logger
@inject IdentifiersService identifiersService;
@inject ISignifyClientService signifyClientService;
@inject IDialogService dialogService
@inject ISnackbar snackbar

<div id="@this.GetType().Name" class="bt-body-page">
    <div class="d-flex gap-3 bt-main">
        <div class="bt-main-inside-scroll">
            <MudText Typo="Typo.h6">Identifier</MudText>
            <MudText>
                Prefix:
                <div>
                    <Ellipsis StringContent="@Prefix" MaxLength="999" IncludeCopyIcon="true"></Ellipsis>
                </div>
            </MudText>
            <MudText>Alias: @Alias</MudText>
            <MudTooltip Text="Set Identifier as active" Delay="1000">
                <MudButton OnClick="async () => await SetActiveAid(Prefix)">
                    <MudIcon ViewBox="0 0 100 100" Icon="@Identicon" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                </MudButton>
            </MudTooltip>
            <MudText>Delegates:</MudText>
            <MudText>Delegatee of:</MudText>
            <MudText>Key State:</MudText>
            <MudText>Signing Key(s): List of Signing Keys or Digests and Weights  (fractions) (copy)  (type Ed25519)</MudText>
            <MudText>Key Type:</MudText>https://travel.state.gov/content/travel/en/us-visas/tourism-visit/visitor.html#overview
            <MudText>List of Next Key Digests, threshold, weights (fractions) (copy)</MudText>
            <MudText>Witnesses:</MudText>
            <MudText>Key Event Log:</MudText>

            @if (IsWaiting)
            {
                <div style="display:flex; align-items: center; justify-content:center; position:absolute; z-index:999; top:50%; left:50%; transform: translate(-50%, -50%); width:300px; height:200px;  ">
                    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                </div>
            }
        </div>
    </div>
    <MudStack Row="true" class="bt-button-tray">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
        <MudSpacer />
        <!--
        <MudButton StartIcon="@Icons.Material.Filled.Add" Disabled="@IsWaiting" OnClick="async () => await AddIdentifier()" Variant="Variant.Filled" Color="Color.Primary">Add Identifier</MudButton>
        -->
    </MudStack>
</div>

@code {
    [Parameter]
    public string? Prefix { get; set; }

    private bool IsWaiting { get; set; }
    private string ActiveAid { get; set; } = string.Empty;
    private string Identicon { get; set; } = string.Empty;

    public void Dispose()
    {
        preferencesSubscription?.Dispose();
    }

    async void HandleNextFromPreferencesService(Preferences value)
    {
        await Task.Run(() => InitializeOrOnNextPrefs(value));
    }

    async void HandleErrorFromPreferencesService(Exception error)
    {
        await Task.Run(() => logger.LogInformation("Error from PreferencesService: " + error.Message));
    }

    async void HandleCompletedFromPreferencesService()
    {
        await Task.Run(() => logger.LogInformation("Completed from PreferencesService"));
    }

    IDisposable? preferencesSubscription;

    List<CachedAid> cachedAids = new List<CachedAid>();

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await Task.Delay(0);
        logger.LogInformation($"OnInitializedAsync");
        preferencesSubscription = preferencesService.Subscribe(
           onNext: (Preferences value) => HandleNextFromPreferencesService(value),
           onError: (Exception error) => HandleErrorFromPreferencesService(error),
           onCompleted: () => HandleCompletedFromPreferencesService());
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        logger.LogInformation($"OnParametersSetAsync");

        var prefs = await preferencesService.GetPreferences();
        InitializeOrOnNextPrefs(prefs);
        logger.LogInformation(JsonSerializer.Serialize(prefs));
        if (string.IsNullOrEmpty(Prefix))
        {
            Prefix = prefs.SelectedAid;
        }
        Identicon = Helper.Identicon.MakeIdenticon(Prefix);
        await GetHeadlines();
        Alias = cachedAids.FirstOrDefault(a => a.Prefix == Prefix)?.Alias;
        // var identifierService = new IdentifierService(Prefix, item.Name, Guid.NewGuid(), new Logger<IdentifierService>(), storageService);
    }

    private string Alias { get; set; } = string.Empty;

    private async Task GetHeadlines()
    {
        logger.LogWarning("TEMP5");
        var res = await identifiersService.GetIdentifierHeadlines();
        if (res != null)
        {
            logger.LogInformation("GetIdentifierHeadlines: {1}", res.Value.Count);
            cachedAids.Clear();
            foreach (var item in res.Value)
            {
                // logger.LogWarning("adding aid {1}", item.Prefix);
                cachedAids.Add(new CachedAid(item.Prefix, item.Alias, Guid.NewGuid()));
            }
            cachedAids = cachedAids.OrderBy(a => a.Alias).ToList();
        };
    }



    void InitializeOrOnNextPrefs(Preferences prefs)
    {
        ActiveAid = prefs.SelectedAid;
        this.StateHasChanged();
    }

    public static string cardClass(string activeAid2, string rowIdentifier) =>
        (string)activeAid2 == rowIdentifier ? "border-left: 4px solid var(--mud-palette-text-primary);" : "";

    // Set ActiveDid based on value of activeDidIdentifier,
    // retrieved from picker or via preferences
    async Task SetActiveAid(string identifier)
    {
        var prefs2 = await preferencesService.GetPreferences();
        prefs2 = prefs2 with { SelectedAid = identifier };
        await preferencesService.SetPreferences(prefs2);
        // Other side-effects will be reactive to subscribed updates of Preferences
    }

    private string DialogResult { get; set; } = "unknown";
}