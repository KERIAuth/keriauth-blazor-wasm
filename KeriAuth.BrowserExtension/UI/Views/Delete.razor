@page "/Delete"
@using KeriAuth.BrowserExtension.Services
@inject IJSRuntime js
@inject NavigationManager navManager
@inject IStorageService storageService
@inject IStateService stateService
@using static KeriAuth.BrowserExtension.AppConfig;
@inject IDialogService dialogService
@inject ILogger<Delete> logger
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@using static KeriAuth.BrowserExtension.Helper.UIHelper

<div id="Delete" class="bt-body-page">
    <div class="d-flex gap-3 bt-main">
        <div class="bt-main-inside-scroll">
            <MudText Typo="Typo.h6">Delete Wallet</MudText>
            <MudStack class="d-flex mt-2 justify-center">
                <MudText>Are you sure you want to delete your wallet? </MudText>
                <MudText>
                    If you want to recover your wallet later, first be sure you have an up-to-date backup (json-content file) and password, and then you'll be able to restore your entire wallet.
                    However, with only your seed phrase you previously wrote down, you'll be able to only recover your public-private key pairs and perhaps your DIDs, but not your credentials and chat messages.
                </MudText>
            </MudStack>
        </div>
    </div>
    <MudStack Row="true" class="bt-button-tray">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="async () => await DeleteWallet()" Class="justify-end">Delete</MudButton>
    </MudStack>
</div>

@code {
    private async Task DeleteWallet()
    {
        bool isRemoveConfirmed;

        // show a dialog to confirm deletion
        var result = await dialogService.ShowMessageBox(
            "Delete Wallet",
            $"Are you sure you want to delete all your wallet contents?",
            yesText: "Yes, Delete",
            cancelText: "Cancel",
             options: new DialogOptions()
                 {
                     CloseOnEscapeKey = true,
                 }
         );
        // TODO P3 delete confirmation should not delete when a return is entered.
        isRemoveConfirmed = result.GetValueOrDefault();
        if (isRemoveConfirmed)
        {
            // TODO P1: delete wallet or clear storage
            // await WalletService.DeleteWallet();
            // restart app
            // TODO P1: fix the restart without an eval
            RestartBlazorApp(RouteToIndex);
            // await js.InvokeVoidAsync("eval", $"window.location.href='{RouteToIndex}'");
        } else
        {
            navManager.NavigateTo(RouteToHome);
        }
    }
}