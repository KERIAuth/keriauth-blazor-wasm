@page "/RequestSignIn"
@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.AppConfig;
@using System.Diagnostics
@using MudBlazor

@implements IDisposable;

@inject IStorageService storageService
@inject IStateService stateService
@inject NavigationManager navManager
@inject IJSRuntime js
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@inject ILogger<IdentifiersView> logger
@inject IdentifiersService identifiersService;
@inject ISignifyClientService signifyClientService;
@inject IDialogService dialogService
@inject ISnackbar snackbar

<div id="@this.GetType().Name" class="bt-body-page">
    <div class="d-flex gap-3 bt-main">
        <div class="bt-main-inside-scroll">
            <MudText Typo="Typo.h6">Request to Sign In</MudText>
            <MudText Typo="Typo.body1"><em>https://foo.bar.com</em></MudText>
            <!-- TODO:  https://foo.bar.com is requesting you to sign in -->

            <MudText Class="mt-6"><b>Select Identifier</b></MudText>
            <MudSelect T="string" bind-Value="@SelectedStrings">
                @foreach (var identifierHeadline in IdentifiersHeadlines)
                {
                    <!-- TODO selection should be on Prefix, not Alias -->
                    <MudSelectItem Value="@identifierHeadline.Prefix" >
                        <MudStack Row Style="align-items:center;">
                            <MudIcon Icon=@identifierHeadline.Identicon ViewBox="0 0 100 100" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden; margin-top: 3px;" />
                            <div class="bt-sad-2" style="display:contents;">
                                <MudText Typo="Typo.subtitle2" Color="Color.Primary">@identifierHeadline.Alias</MudText>
                            </div>
                            <!--
                            <MudDivider DividerType="DividerType.Inset" />
                            -->
                        </MudStack>
                    </MudSelectItem>
                }
            </MudSelect>

            <MudStack>
                <MudText Class="mt-6"><b>Options</b></MudText>
                <MudText Typo="Typo.body1">For future requests from <em>https://foo.bar.com</em></MudText>
                <MudCheckBox Label="Remember this identifier as preferred" @bind-Value="@IsChoiceRemembered" />
                <!-- TODO disable unless at least one identifier is remembered for this site-->
                <MudCheckBox Label="Allow automatic CheckIn" @bind-Value="@WillSignInAutomatically" />
            </MudStack>
        </div>
    </div>
    <MudStack Row="true" class="bt-button-tray">
        <MudSpacer />
        <MudButton StartIcon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled" Color="Color.Tertiary">Cancel</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.Login" Variant="Variant.Filled" Color="Color.Primary">Sign In</MudButton>
    </MudStack>
</div>

<style>
    .mud-select .mud-select-input .mud-input-slot {
        height: auto;
    }
</style>

@code {
    private string ActiveAid { get; set; } = string.Empty;

    List<CachedAid> cachedAids = new List<CachedAid>();

    List<IdentifierHeadline> IdentifiersHeadlines { get; set; } = [];

    bool IsChoiceRemembered { get; set; }

    string[] SelectedStrings { get; set; } = [];

    bool WillSignInAutomatically
    {
        get; set;
    }

    IdentifierHeadline? DefaultIdentifierHeadline { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await Task.Delay(0);
        logger.LogInformation($"OnInitializedAsync");
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        logger.LogInformation($"OnParametersSetAsync");
        await GetHeadlines();
    }

    private async Task GetHeadlines()
    {
        logger.LogWarning("GetHeadlines");
        var res = await identifiersService.GetIdentifierHeadlines();
        if (res != null && res.IsSuccess)
        {
            logger.LogInformation("GetIdentifierHeadlines: {1}", res.Value.Count);
            IdentifiersHeadlines = res.Value;
            IdentifiersHeadlines = IdentifiersHeadlines.OrderBy(a => a.Alias).ToList();
            if (IdentifiersHeadlines.Count > 0)
            {
                // TODO look up in database for this website.  If preference not remembered for this website, use the User's general preferences
                DefaultIdentifierHeadline = IdentifiersHeadlines[0];
                SelectedStrings = new string[] { IdentifiersHeadlines[0].Alias };
            }
            else
            {
                SelectedStrings = new string[] { };
            }
        };
    }

    void InitializeOrOnNextPrefs(Preferences prefs)
    {
        ActiveAid = prefs.SelectedAid;
        // TODO decide whether the Select Identifier value should change
        this.StateHasChanged();
    }

    public static string cardClass(string activeAid2, string rowIdentifier) =>
        (string)activeAid2 == rowIdentifier ? "border-left: 4px solid var(--mud-palette-text-primary);" : "";

    private string DialogResult { get; set; } = "unknown";

    public void Dispose()
    {
        ;
    }
}