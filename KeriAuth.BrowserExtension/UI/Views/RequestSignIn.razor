@page "/RequestSignIn"
@page "/RequestSignIn/{originUri}"
@using System.Linq
@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.AppConfig
@using System.Diagnostics
@using MudBlazor
@using FluentResults

@implements IDisposable

@inject IStorageService storageService
@inject IStateService stateService
@inject NavigationManager navManager
@inject IJSRuntime js
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@inject ILogger<RequestSignIn> logger
@inject IdentifiersService identifiersService
@inject ISignifyClientService signifyClientService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inject IWebsitesService websitesService
@inject IStorageService storageService
@inject IPreferencesService preferencesService

@code {
    [Parameter]
    public string originUri { get; set; } = "http:unset.com";

    private Uri UriUri { get; set; } = new Uri("http://unset.com");

    private string ActiveAid { get; set; } = string.Empty;

    List<CachedAid> cachedAids = new List<CachedAid>();

    List<IdentifierHeadline> IdentifiersHeadlines { get; set; } = [];

    private bool _isChoiceRemembered = false;

    bool IsChoiceRemembered => _isChoiceRemembered;

    async Task updateIsChoiceRemembered(bool willRememberChoice)
    {
        var getOrCreateWebsiteRes = await getOrCreateWebsite(UriUri);
        if (getOrCreateWebsiteRes.IsFailed)
        {
            logger.LogError("Error in websiteService {0}", getOrCreateWebsiteRes.Errors);
            return;
        }
        Website newWebsite = getOrCreateWebsiteRes.Value;
        if (SelectedHeadlineOrNothing is not null)
        {
            if (willRememberChoice)
            {
                newWebsite = newWebsite with { RememberedPrefixOrNothing = SelectedHeadlineOrNothing.Prefix };
            }
            else
            {
                newWebsite = newWebsite with { RememberedPrefixOrNothing = null };
            }

            logger.LogInformation("updateIsChoiceRemembered: about to update: {0}", newWebsite);
            var res = await websitesService.Update(newWebsite);
            if (res is null || res.IsFailed)
            {
                _isChoiceRemembered = false;
                logger.LogError("Error updating website: {0}", res?.Errors);
            }
            else
            {
                logger.LogInformation("updateIsChoiceRemembered: setting willRememberChoice {0}", res);
                _isChoiceRemembered = willRememberChoice;
            }
        }
        else
        {
            logger.LogError("Unexpected null Identifier selection");
        }
        return;
    }

    // TODO move this to the WebsitesService
    async Task<Result<Website>> getOrCreateWebsite(Uri originUri)
    {
        Websites websites;
        var getWebsitesRes = await websitesService.GetWebsites();
        if (getWebsitesRes.IsFailed)
        {
            logger.LogError("Error in websiteService {0}", getWebsitesRes.Errors);
            return Result.Fail(getWebsitesRes.Errors.FirstOrDefault());
        }
        else
        {
            logger.LogInformation("getOrCreateWebsite: 1 {0} {1}", getWebsitesRes, getWebsitesRes.Value);

            if (getWebsitesRes.Value is null)
            {
                // This is the first website. Add the Websites collection
                websites = new Websites(WebsiteList: new List<Website>() { new Website(UriUri, new List<WebsiteInteraction>() { }, null, null, AutoSignInMode.None) });
                var setItemRes = await storageService.SetItem<Websites>(websites);
                if (setItemRes.IsFailed)
                {
                    logger.LogError("getOrCreateWebsite: Error adding websites to database: {0}", setItemRes.Errors);
                    return Result.Fail(setItemRes.Errors.FirstOrDefault());
                }
                else
                {
                    logger.LogInformation("Added websites to database");
                }
            }
            else
            {
                websites = getWebsitesRes.Value;
            }

            // Find the website in the collection
            var websiteOrNothing = websites.WebsiteList.FirstOrDefault<Website>(a => a.Origin == UriUri);
            logger.LogInformation("getOrCreateWebsite: 2 {0}", websiteOrNothing);
            if (websiteOrNothing is null)
            {
                //WillSignInAutomatically = false;
                logger.LogError("Error finding website");
                return Result.Fail("Error finding website");
            }
            else
            {
                Website website = websiteOrNothing;
                return Result.Ok(website);
            }
        }
    }
    
    async Task updateWillSignInAutomatically(bool willSignInAutomatically2)
    {
        var result = await getOrCreateWebsite(UriUri);

        Website newWebsite = result.Value;
        if (SelectedHeadlineOrNothing is not null)
        {
            if (willSignInAutomatically2)
            {
                // TODO issues if user changes identifier after setting willSignInAutomatically or if willSignAutomatically was set for a different identifier earlier
                newWebsite = newWebsite with { RememberedPrefixOrNothing = SelectedHeadlineOrNothing.Prefix, AutoSignInChoice = AutoSignInMode.Identifier };
            }
            else
            {
                newWebsite = newWebsite with { RememberedPrefixOrNothing = SelectedHeadlineOrNothing.Prefix, AutoSignInChoice = AutoSignInMode.None };
            }


            logger.LogInformation("updateWillSignInAutomatically: about to update: {0}", newWebsite);
            var res = await websitesService.Update(newWebsite);
            if (res is null || res.IsFailed)
            {
                WillSignInAutomatically = false;
                logger.LogError("Error updating website: {0}", res?.Errors);
            }
            else
            {
                logger.LogInformation("updateWillSignInAutomatically: setting willSignInAutomatically2 {0}", res);
                WillSignInAutomatically = willSignInAutomatically2;
            }
        }
        else
        {
            logger.LogError("Unexpected null Identifier selection");
        }
    }


    IdentifierHeadline? SelectedHeadlineOrNothing { get; set; }

    bool WillSignInAutomatically
    {
        get; set;
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await Task.Delay(0);
        logger.LogInformation($"OnInitializedAsync");
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        logger.LogInformation($"OnParametersSetAsync");
        base.OnParametersSet();
        try
        {
            UriUri = new Uri(originUri);
        }
        catch (Exception)
        {
            logger.LogWarning("Invalid originUri: {0}", originUri);
            UriUri = new Uri("http://unset.com");
        }
        await GetHeadlines();
        InitializeOrOnNextPrefs(await preferencesService.GetPreferences());
    }

    private async Task GetHeadlines()
    {
        logger.LogWarning("GetHeadlines");
        var res = await identifiersService.GetIdentifierHeadlines();
        if (res != null && res.IsSuccess)
        {
            logger.LogInformation("GetIdentifierHeadlines: {1}", res.Value.Count);
            IdentifiersHeadlines = res.Value;
            IdentifiersHeadlines = IdentifiersHeadlines.OrderBy(a => a.Alias).ToList();
            if (IdentifiersHeadlines.Count > 0)
            {
                var res22 = await getOrCreateWebsite(UriUri);
                if (res22.IsFailed)
                {
                    logger.LogError("Error in websiteService {0}", res22.Errors);
                    return;
                }
                Website newWebsite = res22.Value;
                if (newWebsite.RememberedPrefixOrNothing is not null)
                {
                    SelectedHeadlineOrNothing = IdentifiersHeadlines.FirstOrDefault(a => a.Prefix == newWebsite.RememberedPrefixOrNothing);
                }
                else
                {
                    // use the user's general preferences
                    SelectedHeadlineOrNothing = IdentifiersHeadlines.FirstOrDefault(a => a.Prefix == ActiveAid);
                }
                StateHasChanged();
            }
            else
            {
                throw new Exception("No Identifiers found");
            }
        };
    }

    void InitializeOrOnNextPrefs(Preferences prefs)
    {
        ActiveAid = prefs.SelectedAid;
        // TODO decide whether the Select Identifier value should change
        this.StateHasChanged();
    }

    public void Dispose()
    {
        ;
    }
}

<div id="@this.GetType().Name" class="bt-body-page">
    <div class="d-flex gap-3 bt-main">
        <div class="bt-main-inside-scroll">
            <MudText Typo="Typo.h6">Request to Sign In</MudText>
            <MudText Typo="Typo.body1"><em>http://unset.com</em></MudText>

            <MudText Class="mt-6"><b>Identifier</b></MudText>
            <MudSelect T="IdentifierHeadline" bind-Value="@SelectedHeadlineOrNothing">
                @foreach (var identifierHeadline in IdentifiersHeadlines)
                    {
                <!-- TODO selection should be on Prefix, not Alias -->
                <MudSelectItem Value="@identifierHeadline">
                    <MudStack Row Style="align-items:center;">
                        <MudIcon Icon=@identifierHeadline.Identicon ViewBox="0 0 100 100" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden; margin-top: 3px;" />
                        <div class="bt-sad-2" style="display:contents;">
                            <MudText Typo="Typo.subtitle2" Color="Color.Primary">@identifierHeadline.Alias</MudText>
                        </div>
                    </MudStack>
                </MudSelectItem>
                    }
            </MudSelect>

            <MudStack>
                <MudText Class="mt-6"><b>Options</b></MudText>
                <MudText Typo="Typo.body1">For future requests from <em>http://unset.com</em></MudText>
                <MudCheckBox Label="Remember this identifier as preferred" Value="IsChoiceRemembered" ValueChanged="async (bool b) => await updateIsChoiceRemembered(b)" />
                <!-- TODO disable unless at least one identifier is remembered for this site-->
                <MudCheckBox Label="Enable automatic Sign In" Value="@WillSignInAutomatically" ValueChanged="async (bool b) => await updateWillSignInAutomatically(b)" />
            </MudStack>
        </div>
    </div>
    <MudStack Row="true" class="bt-button-tray">
        <MudSpacer />
        <MudButton StartIcon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled" Color="Color.Tertiary">Cancel</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.Login" Variant="Variant.Filled" Color="Color.Primary">Sign In</MudButton>
    </MudStack>
</div>

<style>
    .mud-select .mud-select-input .mud-input-slot {
        height: auto;
    }
</style>

