@page "/RequestSignIn/{encodedOriginStr}"
@using System.Linq
@using System.Text.Json
@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.AppConfig
@using System.Diagnostics
@using MudBlazor
@using FluentResults

@implements IDisposable

@inject IStorageService storageService
@inject IStateService stateService
@inject NavigationManager navManager
@inject IJSRuntime js
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@inject ILogger<RequestSignIn> logger
@inject IdentifiersService identifiersService
@inject ISignifyClientService signifyClientService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inject IWebsiteConfigService websitesService
@inject IStorageService storageService
@inject IPreferencesService preferencesService

@code {
    [Parameter]
    public string encodedOriginStr { get; set; } = "";

    Uri UriUri => new Uri(System.Web.HttpUtility.UrlDecode(encodedOriginStr));

    string ActiveAid { get; set; } = string.Empty;

    List<IdentifierHeadline> IdentifierHeadlines { get; set; } = [];

    bool IsChoiceRemembered { get; set; }

    IdentifierHeadline? SelectedHeadlineOrNothing { get; set; }

    string SelectedPrefix { get; set; } = "unknown";

    // bool IsEnableAutomaticSignInCheckboxDisabled => !WillSignInAutomatically && !IsChoiceRemembered;

    bool WillSignInAutomatically { get; set; }

    async Task updateSelectedPrefix(string prefix)
    {
        SelectedPrefix = prefix;
        await getWebsiteConfig(UriUri);
        StateHasChanged();

        // await Task.Delay(0);
        // logger.LogWarning("updateSelectedPrefix: {0}", prefix);
        // SelectedHeadlineOrNothing = IdentifierHeadlines.First(a => a.Prefix == prefix);
        // if (SelectedHeadlineOrNothing is null)
        // {
        //     logger.LogError("updateSelectedPrefix: Unexpected null Identifier selection");
        //     return;
        // }

        // logger.LogWarning("updateSelectedPrefix: SelectedHeadlineOrNothing: {0}", JsonSerializer.Serialize(SelectedHeadlineOrNothing));
        // SelectedPrefix = prefix;
        // IsChoiceRemembered = SelectedHeadlineOrNothing.Prefix == prefix;
        // WillSignInAutomatically = SelectedHeadlineOrNothing.Prefix == prefix;
        // StateHasChanged();
    }

    async Task updateIsRemembered(bool isChecked)
    {
        IsChoiceRemembered = isChecked;
        var getOrCreateWebsiteRes = await websitesService.GetOrCreateWebsiteConfig(UriUri);
        if (getOrCreateWebsiteRes.IsFailed)
        {
            logger.LogError("Error in websiteService {0}", getOrCreateWebsiteRes.Errors);
            return;
        }
        WebsiteConfig newWebsite = getOrCreateWebsiteRes.Value;
        if (SelectedHeadlineOrNothing is not null)
        {
            if (isChecked)
            {
                newWebsite = newWebsite with { RememberedPrefixOrNothing = SelectedHeadlineOrNothing.Prefix };
            }
            else
            {
                // since the user has chosen to forget this identifier, we will also forget the auto sign in choice
                // TODO: once this UI is made responsive to an IObserver<WebsiteConfig> we can move this logic into the service
                WillSignInAutomatically = false;
                newWebsite = newWebsite with { RememberedPrefixOrNothing = null, AutoSignInChoice = AutoSignInMode.None };
            }

            logger.LogInformation("updateIsRemembered: about to update: {0}", newWebsite);
            var res = await websitesService.Update(newWebsite);
            if (res is null || res.IsFailed)
            {
                throw new Exception($"Error updating website: {res?.Errors}");
                // isChoiceRemembered = false;
                // logger.LogError("updateIsRemembered: Error updating website: {0}", res?.Errors);
            }
            else
            {
                // logger.LogInformation("updateIsRemembered: setting willRememberChoice {0}", res);
                // isChoiceRemembered = isRemembered;
            }
        }
        else
        {
            logger.LogError("updateIsRemembered: Unexpected null Identifier selection");
        }
        return;
    }

    async Task updateWillSignInAutomatically(bool isChecked)
    {
        WillSignInAutomatically = isChecked;
        var result = await websitesService.GetOrCreateWebsiteConfig(UriUri);

        WebsiteConfig newWebsite = result.Value;
        if (SelectedHeadlineOrNothing is not null)
        {
            if (isChecked)
            {
                // TODO issues if user changes identifier after setting willSignInAutomatically or if willSignAutomatically was set for a different identifier earlier
                // put this logic into service and simplify here once this UI is made responsive to an IObserver<WebsiteConfig>
                IsChoiceRemembered = true;
                newWebsite = newWebsite with { RememberedPrefixOrNothing = SelectedHeadlineOrNothing.Prefix, AutoSignInChoice = AutoSignInMode.Identifier };
            }
            else
            {
                newWebsite = newWebsite with { RememberedPrefixOrNothing = SelectedHeadlineOrNothing.Prefix, AutoSignInChoice = AutoSignInMode.None };
            }


            logger.LogInformation("updateWillSignInAutomatically: about to update: {0}", newWebsite);
            var res = await websitesService.Update(newWebsite);
            if (res is null || res.IsFailed)
            {
                WillSignInAutomatically = false;
                logger.LogError("Error updating website: {0}", res?.Errors);
            }
            else
            {
                logger.LogInformation("updateWillSignInAutomatically: setting willSignInAutomatically2 {0}", res);
                WillSignInAutomatically = isChecked;
            }
        }
        else
        {
            logger.LogError("Unexpected null Identifier selection");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await Task.Delay(0);
        logger.LogInformation($"OnInitializedAsync");
    }

    protected override async Task OnParametersSetAsync()
    {
        logger.LogInformation($"OnParametersSetAsync");
        await base.OnParametersSetAsync();
        InitializeOrOnNextPrefs(await preferencesService.GetPreferences());
        await GetInitialHeadlines();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // logger.LogInformation($"OnAfterRenderAsync");
        await base.OnAfterRenderAsync(firstRender);
    }

    async Task GetInitialHeadlines()
    {
        logger.LogInformation("GetHeadlines...");
        var res = await identifiersService.GetIdentifierHeadlines();
        if (res != null && res.IsSuccess)
        {
            logger.LogInformation("GetIdentifierHeadlines: count {1}", res.Value.Count);
            IdentifierHeadlines = res.Value;
            IdentifierHeadlines = IdentifierHeadlines.OrderBy(a => a.Alias).ToList();
            if (IdentifierHeadlines.Count > 0)
            {
                var wcRes = await websitesService.GetOrCreateWebsiteConfig(UriUri);
                logger.LogInformation("GetHeadlines: getOrCreateWebsite: {0}", JsonSerializer.Serialize(wcRes));
                if (wcRes.IsFailed)
                {
                    logger.LogError("Error in websiteService: {0}", wcRes.Errors);
                    return;
                }
                WebsiteConfig newWebsite = wcRes.Value;
                if (newWebsite.RememberedPrefixOrNothing is not null)
                {
                    SelectedHeadlineOrNothing = IdentifierHeadlines.First(a => a.Prefix == newWebsite.RememberedPrefixOrNothing);
                }
                else
                {
                    // use the user's general preferences or otherwise the first headline
                    SelectedHeadlineOrNothing = IdentifierHeadlines.First(a => a.Prefix == ActiveAid);
                    if (SelectedHeadlineOrNothing is null)
                    {
                        SelectedHeadlineOrNothing = IdentifierHeadlines.First();
                    }
                }
                logger.LogInformation("SelectedHeadlineOrNothing: Alias: {0}", SelectedHeadlineOrNothing?.Alias ?? "UNSET!");
                SelectedPrefix = SelectedHeadlineOrNothing?.Prefix ?? "UNSET!";
                Debug.Assert(SelectedHeadlineOrNothing is null, "Unexpected null value for SelectedHeadlineOrNothing");
                await getWebsiteConfig(UriUri);
                StateHasChanged();
            }
            else
            {
                throw new Exception("No Identifiers found");
            }
        };
    }

    WebsiteConfig? ThisWebsiteConfig { get; set; }

    async Task getWebsiteConfig(Uri uri)
    {
        var x = await websitesService.GetOrCreateWebsiteConfig(uri);
        if (x.IsSuccess)
        {
            ThisWebsiteConfig = x.Value;
            // TODO: update the getter for the following properties to use this
            IsChoiceRemembered = x.Value.RememberedPrefixOrNothing == SelectedPrefix;
            WillSignInAutomatically = x.Value.AutoSignInChoice == AutoSignInMode.Identifier;
        }
        else
        {
            throw new Exception("No Identifiers found");
        }
    }

    void InitializeOrOnNextPrefs(Preferences prefs)
    {
        ActiveAid = prefs.SelectedAid;
        // TODO decide whether the Select Identifier value should change
        this.StateHasChanged();
    }

    public void Dispose()
    {
        ;
    }
}

<div id="@this.GetType().Name" class="bt-body-page">
    <div class="d-flex gap-3 bt-main">
        <div class="bt-main-inside-scroll">
            <MudText Typo="Typo.h6">Request to Sign In</MudText>
            <MudText Typo="Typo.body1"><em>@UriUri</em></MudText>
            <MudStack Class="gap-0">
                <MudText Class="mt-6"><b>Identifier</b></MudText>
                <MudSelect T="string" Value="@SelectedPrefix" ValueChanged="async (string v) => await updateSelectedPrefix(v)">
                    @foreach (var identifierHeadline in IdentifierHeadlines)
                    {
                        <MudSelectItem Value="@identifierHeadline.Prefix">
                            <MudStack Row Style="align-items:center;">
                                <MudIcon Icon=@identifierHeadline.Identicon ViewBox="0 0 100 100" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden; margin-top: 3px;" />
                                <div class="bt-sad-2" style="display:contents;">
                                    <MudText Typo="Typo.subtitle2" Color="Color.Primary">@identifierHeadline.Alias</MudText>
                                </div>
                            </MudStack>
                        </MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
            <MudStack Class="gap-0">
                <MudText Class="mt-6"><b>Options</b></MudText>
                <MudText Typo="Typo.body1">For future requests from <em>@UriUri</em></MudText>
                <MudCheckBox Label="Prefer this identifier" Value="@IsChoiceRemembered" ValueChanged="async (bool b) => await updateIsRemembered(b)" />
                <MudCheckBox Label="Auto sign in" Value="@WillSignInAutomatically" ValueChanged="async (bool b) => await updateWillSignInAutomatically(b)" />
                @{
                    /* If "auto sign in" but not with this Identifier, show the other identifier */
                    if (WillSignInAutomatically && ThisWebsiteConfig?.RememberedPrefixOrNothing != SelectedPrefix)
                    {
                        <MudText Class="pt-0 mt-0 pl-10" Typo="Typo.caption">(with "@IdentifierHeadlines.First(x => x.Prefix == ThisWebsiteConfig?.RememberedPrefixOrNothing).Alias")</MudText>
                    }
                }
            </MudStack>
        </div>
    </div>
    <MudStack Row="true" class="bt-button-tray">
        <MudSpacer />
        <MudButton StartIcon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled" Color="Color.Tertiary">Cancel</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.Login" Variant="Variant.Filled" Color="Color.Primary">Sign In</MudButton>
    </MudStack>
</div>

<style>
    .mud-select .mud-select-input .mud-input-slot {
        height: auto;
    }
</style>