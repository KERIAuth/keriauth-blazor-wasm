@page "/Create"
@using System.Diagnostics;
@using static System.Net.WebRequestMethods;
@using static KeriAuth.BrowserExtension.Helper.UIHelper;
@using static KeriAuth.BrowserExtension.Services.SignifyService.SignifyServiceConfig
@using System.ComponentModel.DataAnnotations
@using System.Linq;
@using KeriAuth.BrowserExtension
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.AppConfig;
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime js
@inject IStateService StateService
@inject IWalletService _walletService
@inject ISignifyClientService _signifyClientService
@inject ISnackbar _Snackbar
@inject ILogger<Create> logger

<div id="Create" class="bt-body-page">
    @switch (Card)
    {
        case CardKind.SetAndConfirmPassword1:
            <div id="@Card" class="d-flex gap-3 bt-main">
                @{
                    /* if (WalletService.Wallet != null || _walletExists)
                    {
                    // TODO P3 just throw an error if the wallet already exists, in the initialization of this page? Force quit?
                    <MudAlert NoIcon="true" Severity="Severity.Error">You already have a wallet on this browser! When you continue it will get deleted (but you can always restore it by the 24 word seed phrase)</MudAlert>
                    }
                    */
                }
                <MudStack Class="bt-create-card-top-centered">
                    <MudImage Width="190" Fluid="true" Style="margin-right:40px;" Src="/images/lock2.png"></MudImage>
                    <MudText>Create a new, strong password to protect your ??????</MudText>
                    @{
                        /* TODO should add back @bind-IsValid="@_isStrongPassword"  */
                    }
                    <MudForm @ref="_confirmPasswordForm" @bind-Errors="@_errors" Style="width:250px; height:80px;">
                        <MudTextField T="string" Label="New password" HelperText=" " @ref="_newPasswordField"
                                      Immediate="true"
                                      OnKeyDown="@NewPasswordKeyDown"
                                      InputType="InputType.Password"
                                      Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                      RequiredError="Password is required!"
                                      data-testid="newPassword"
                                      autocomplete="off" />
                        <MudTextField T="string" Label="Confirm password" HelperText=" " @ref="_confirmPasswordField"
                                      Immediate="true"
                                      OnKeyDown="@ConfirmPasswordKeyDown"
                                      InputType="InputType.Password"
                                      Validation="@(new Func<string, IEnumerable<string>>(PasswordMatch))" Required="true"
                                      RequiredError="Password must match"
                                      data-testid="confirmPassword"
                                      autocomplete="off" />
                    </MudForm>
                </MudStack>
            </div>
            <MudStack Row="true" class="bt-button-tray">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
                <MudSpacer></MudSpacer>
                <MudButton @ref="_nextButton" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_isStrongPassword)" OnClick="async () => await NextPage()" Class="justify-end" data-testid="next">Next</MudButton>
            </MudStack>
            break;
        case CardKind.TermsAndPrivacy2:
            <div id="@Card" class="d-flex gap-3 bt-main">
                <MudStack id="@Card">
                    <MudText Typo="Typo.h6">Review and agree to Terms of Use and Privacy Policy</MudText>
                    <MudStack Class="bt-create-card-top-scrollable">
                        <div id="bt-terms-and-privacy">
                            <MudStack Class="d-flex">
                                <MudIconButton Icon="@Icons.Material.Filled.Print" Variant="Variant.Text" Href="@_releaseUrlPath" Target="_blank" Class="bt-terms-button" />
                                @(releaseMarkup)
                            </MudStack>
                            <MudDivider></MudDivider>
                            <MudStack Class="d-flex">
                                <MudIconButton Icon="@Icons.Material.Filled.Print" Variant="Variant.Text" Href="@_termsUrlPath" Target="_blank" Class="bt-terms-button" />
                                @(termsMarkup)
                            </MudStack>
                            <MudDivider></MudDivider>
                            <MudStack Class="d-flex">
                                <MudIconButton Icon="@Icons.Material.Filled.Print" Variant="Variant.Text" Href="@_privacyUrlPath" Target="_blank" Class="bt-terms-button" />
                                @(privacyMarkup)
                            </MudStack>
                        </div>
                        <MudDivider />
                        <MudStack class="d-flex mt-5 justify-center" Style="align-items:center;">
                            <MudCheckBox @bind-Value="_tosAgree" data-testid="tosCheckbox">I agree to the above Terms of Use and Privacy Policy</MudCheckBox>
                        </MudStack>
                    </MudStack>
                </MudStack>
            </div>
            <MudStack Row="true" class="bt-button-tray">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
                <MudSpacer></MudSpacer>
                <MudButton @ref="_nextButton" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_tosAgree)" OnClick="async () => await NextPage()" Class="justify-end" data-testid="next">Next</MudButton>
            </MudStack>
            break;
        case CardKind.ConfigureKeriaConnection3:
            <div id="@Card" class="d-flex gap-3 bt-main">
                <MudStack>
                    <MudText Typo="Typo.h6">Configure your KERI Agent Connection</MudText>
                    <MudStack Class="bt-create-card-top-scrollable">
                        <MudTextField Label="Enter URL"
                                      @bind-Value="@urlModel.Url"
                                      For="@(() => urlModel.Url)"
                                      Immediate="true"
                                      OnBlur="@HandleOnBlur" />
                        <MudTextField Label="Enter passcode"
                                      InputType="InputType.Password"
                                      @bind-Value="@passcodeModel.Passcode"
                                      For="@(() => passcodeModel.Passcode)"
                                      Immediate="true"
                                      OnBlur="@HandleOnBlur" />
                        <MudButton OnClick="@(async () => await HandleClick())" Disabled="@(!IsValidURL)" Color="Color.Primary">Check URL</MudButton>
                        <MudStack Class="mt-5">
                            <OperationDisplayComponent ops="@_ops1LivenessCheck"></OperationDisplayComponent>
                            <OperationDisplayComponent ops="@_ops2HealthCheck"></OperationDisplayComponent>
                            <OperationDisplayComponent ops="@_ops4BootAndConnect"></OperationDisplayComponent>
                            <OperationDisplayComponent ops="@_ops5CreatePersonalAid"></OperationDisplayComponent>
                            <OperationDisplayComponent ops="@_ops6ListAids"></OperationDisplayComponent>
                            <OperationDisplayComponent ops="@_ops7ListCredentials"></OperationDisplayComponent>
                        </MudStack>
                    </MudStack>
                </MudStack>
            </div>
            <MudStack Row="true" class="bt-button-tray">
                <!-- Intentionally no back button here -->
                <MudSpacer />
                <MudButton @ref="_nextButton" Disabled="@(!IsKeriaConfigured)" Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => await NextPage()" Class="justify-start" data-testid="next">Next</MudButton>
            </MudStack>
            break;
        case CardKind.YouHaveIdentifier4:
            <div id="@Card" class="d-flex gap-3 bt-main">
                <MudStack>
                    <MudText Typo="Typo.h6">Wallet Created</MudText>
                    <MudStack Class="bt-create-card-top-scrollable">
                        <MudStack Row="false">
                            <MudText>Great! Your wallet is now configured, including a new default profile with its Decentralized Identifier (DID):</MudText>
                            <MudText Style="word-wrap: break-word; max-width:calc(100vw - 32px); ">WalletService.Wallet!.WalletDids.Single().Did.ToString()</MudText>
                            <MudText>The round graphic in the upper right helps visualize this DID and associated wallet profile. Details are stored in this wallet.</MudText>
                        </MudStack>
                    </MudStack>
                </MudStack>
            </div>
            <MudStack Row="true" class="bt-button-tray">
                <!-- Intentionally no back button here -->
                <MudSpacer />
                <MudButton @ref="_nextButton" Variant="Variant.Filled" Color="Color.Primary" Class="justify-start" OnClick="async () => await NextPage()" data-testid="next">Next</MudButton>
            </MudStack>
            break;
        case CardKind.Done5:
            <div id="@Card" class="d-flex gap-3 bt-main">
                <MudStack>
                    <MudText Typo="Typo.h6">Setup Completed</MudText>
                    <MudStack Class="bt-create-card-top-scrollable">
                        <MudText>
                            You can now use KERI Auth to:
                        </MudText>
                        <MudText>
                            <ul>
                                <li>.....</li>
                                <li>.....</li>
                            </ul>
                        </MudText>
                    </MudStack>
                </MudStack>
            </div>
            <MudStack Row="true" class="bt-button-tray">
                <!-- Intentionally no back button here -->
                <MudSpacer />
                <MudButton @ref="_nextButton" Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => await NextPage()" Class="justify-start" data-testid="next">Next</MudButton>
            </MudStack>
            break;
        default:
            <MudText>Unexpected case @Card</MudText>
            break;
    }
</div>

<style>
    /* for a MudStack */
    .bt-create-card-top-scrollable {
        flex-wrap: wrap;
        flex-direction: column;
        /* width:-webkit-fit-content; */
    }

    /* for a MudStack */
    .bt-create-card-top-centered {
        margin: auto;
        width: fit-content;
        padding-right: 16px !important; /* since there is no room needed scrollbar here */
        flex-wrap: wrap;
        align-content: flex-start;
        flex-direction: row;
        align-content: center;
        justify-content: center;
        align-items: center;
    }

    /* Print button placed to the right edge of Terms of Use or Privacy Policy title */
    .bt-terms-button {
        padding: 0;
        display: flex;
        justify-content: flex-end;
        overflow: visible;
        color: var(--mud-palette-primary);
        top: 41px;
        right: 10px;
    }

    .wordCard {
        display: flex;
        min-width: 90px;
        margin: 0 10px 10px 0;
    }

    .wordNumber {
        font-size: x-small;
        min-width: 17px;
        align-self: baseline;
    }

    .wordWord {
        font-weight: bold;
        font-size: larger;
        align-self: baseline;
    }

    #bt-terms-and-privacy {
        overflow-x: hidden;
        padding-right: 8px;
    }

        #bt-terms-and-privacy h1 {
            color: var(--mud-palette-primary);
        }

        #bt-terms-and-privacy ul {
            list-style-type: disc;
            margin-left: 36px;
        }

    ul {
        list-style-type: disc;
        margin-left: 36px;
    }

</style>

@code {
    MudTextField<string> _newPasswordField = new();
    MudTextField<string> _confirmPasswordField = new();
    MudForm? _confirmPasswordForm;
    MudButton? _nextButton = default(global::MudBlazor.MudButton);
    // private bool _isDidComm = true;
    // private bool _isVerifier = true;
    // private bool _isHolder = true;
    // private bool _isIssuer = false;
    // private bool _isOptedIn = false;
    // private bool _isKeriaConfigured = false;
    private enum CardKind
    {
        // These are expected to be ordered, as used by PreviousPage()
        SetAndConfirmPassword1,
        TermsAndPrivacy2,
        ConfigureKeriaConnection3,
        YouHaveIdentifier4,
        Done5
    };
    private readonly OperationDisplay _ops1LivenessCheck = new OperationDisplay("Checking KERI Agent Liveness", "Live");
    private readonly OperationDisplay _ops2HealthCheck = new OperationDisplay("Checking KERI Agent Health", "Healthy");
    private readonly OperationDisplay _ops4BootAndConnect = new OperationDisplay("Connecting or Booting KERIA Agent", "Connected");
    private readonly OperationDisplay _ops5CreatePersonalAid = new OperationDisplay("Creating Personal Identifier", "Created Personal Identifier");
    private readonly OperationDisplay _ops6ListAids = new OperationDisplay("Listing Identifiers", "Identifiers Listed");
    private readonly OperationDisplay _ops7ListCredentials = new OperationDisplay("Listing Credentials", "Credentials Listed");

    private CardKind Card { get; set; } = CardKind.SetAndConfirmPassword1;
    private bool _isStrongPassword = true; // TODO P1
    private string[] _errors = { };
    private List<string> _mnemonic = new List<string>();
    private int ProgressValue { get; set; }
    // private string _wordvalue1 = string.Empty;
    // private string _wordvalue2 = string.Empty;
    // private static readonly string[] _englishMnemonicWords = EnglishWordList.Words;
    // private Random _random = new Random();
    // private int _firstWordNumber = 0;
    // private int _secondWordNumber = 0;
    private bool _tosAgree;
    // private string _firstWordNumberLabelText = string.Empty;
    // private string _firstWordNumberHelperText = string.Empty;
    // private string _secondWordNumberLabelText = string.Empty;
    // private string _secondWordNumberHelperText = string.Empty;
    // private bool _walletExists;
    private const string _releaseUrlPath = "content/release.html";
    private const string _termsUrlPath = "content/terms.html";
    private const string _privacyUrlPath = "content/privacy.html";
    private MarkupString releaseMarkup = new("Placeholder for Release Notes");
    private MarkupString termsMarkup = new("Placeholder for Terms of Use");
    private MarkupString privacyMarkup = new("Placeholder for Privacy Policy");

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        logger.LogInformation($"OnInitializedAsync");
        // _walletExists = false; // TODO EE! await WalletService.CheckIfWalletExists();
        // _isKeriaConfigured = true;  // TODO EE!
        releaseMarkup = new MarkupString(await Http.GetStringAsync(_releaseUrlPath));
        termsMarkup = new MarkupString(await Http.GetStringAsync(_termsUrlPath));
        privacyMarkup = new MarkupString(await Http.GetStringAsync(_privacyUrlPath));
    }

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (isFirstRender)
        {
            if (Card == CardKind.SetAndConfirmPassword1)
            {
                await _newPasswordField!.FocusAsync();
            }
        }
        if (_nextButton is not null)
        {
            // Set focus on element after rendering the card
            switch (Card)
            {
                case CardKind.TermsAndPrivacy2:
                default:
                    // await _nextButton.FocusAsync();
                    break;
            }
        }
    }

    // private void OnWordValue1Changed(string s)
    // {
    //     if (s is null)
    //     {
    //         _wordvalue1 = string.Empty;
    //     }
    //     else
    //     {
    //         _wordvalue1 = s;
    //     }
    // }

    // private void OnWordValue2Changed(string s)
    // {
    //     if (s is null)
    //     {
    //         _wordvalue2 = string.Empty;
    //     }
    //     else
    //     {
    //         _wordvalue2 = s;
    //     }
    // }

    private async Task NewPasswordKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
            await Task.Delay(0); // TODO P3 should this be to activate next field?
    }

    private async Task ConfirmPasswordKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
            if (_confirmPasswordForm!.IsValid)
                await NextPage();
    }

    private async Task NextPage()
    {
        switch (Card)
        {
            case CardKind.SetAndConfirmPassword1:
                Card = CardKind.TermsAndPrivacy2;
                break;
            case CardKind.TermsAndPrivacy2:
                // TODO P2 record acceptance of terms and privacy, as List<(DateTime agreed, Hash docHash)> tuple in wallet for terms and for privacy
                Card = CardKind.ConfigureKeriaConnection3;
                break;
            case CardKind.ConfigureKeriaConnection3:
                Card = CardKind.YouHaveIdentifier4;
                break;
            case CardKind.YouHaveIdentifier4:
                Card = CardKind.Done5;
                break;
            case CardKind.Done5:
                // go to initial authentication
                // confirm and store config in wallet.
                NavManager.NavigateTo(RouteToStart);
                break;
            default:
                throw new Exception($"Invalid card {Card}");
        }
        await Task.Delay(0); // hack
    }

    private void PreviousPage()
    {
        Card--;
    }

    // TODO P3 Refactor portion out of UI into unit-testable utility
    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        // TODO P3 add more password strength checks
        if (pw.Length < 6)
        {
            yield return "Password must be at least of length 6";
        }
    }

    private IEnumerable<string> PasswordMatch(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw != _newPasswordField.Text)
        {
            yield return "Passwords must match";
        }
    }

    private async Task SaveInitialWallet()
    {
        Debug.Assert(_walletService.Wallet is not null);
        await _walletService.SaveWallet(new Wallet(_newPasswordField.Text, DateTime.UtcNow));
    }

    public class UrlModel
    {
        [Required]
        [Url(ErrorMessage = "Enter KERI Agent URL")]
        public string Url { get; set; } = AppConfig.DefaultKeriaUrl;
    }

    public class PasscodeModel
    {
        [Required]
        [StringLength(21, ErrorMessage = "The passcode must be exacly 21 characters long.", MinimumLength = 21)]
        [DataType(DataType.Password)]
        /* [Display(Name = "Enter your passcode")] */
        public string Passcode { get; set; } = "";
    }

    private UrlModel urlModel = new UrlModel() { Url = AppConfig.DefaultKeriaUrl };

    private PasscodeModel passcodeModel = new PasscodeModel();

    private bool IsValidURL
    {
        get =>
        !(string.IsNullOrWhiteSpace(urlModel.Url) || !Uri.IsWellFormedUriString(urlModel.Url, UriKind.Absolute));
    }

    private bool IsKeriaConfigured
    {
        get =>
        IsValidURL;
    }

    private void HandleOnBlur()
    {
        // This method will be triggered when the text field loses focus
        // You can check for validity here if needed
    }

    private async Task HandleClick()
    {
        // This method will be triggered on button click
        // Perform actions based on the validity of the URL

        // TODO EE! reset all operations
        // _ops1LivenessCheck.Reset();

        if (IsValidURL)
        {
            // check if AdminPort is reachable
            _ops1LivenessCheck.SetIsRunning();
            StateHasChanged();
            UriBuilder healthUriBuilder = new($"{urlModel.Url}:{BootPort}/health");
            var postResult = await _signifyClientService.HealthCheck(healthUriBuilder.Uri);
            if (!postResult.IsSuccess)
            {
                var message =  $"The configured KERIA agent service is not reachable at {healthUriBuilder.Uri}";
                _ops1LivenessCheck.SetCompletedWithError(message);
                return;
            }
            _ops1LivenessCheck.SetCompletedWithoutErrors();
            StateHasChanged();

            // check if KERIA is reporting as healthy
            _ops2HealthCheck.SetIsRunning();
            StateHasChanged();
            // TODO move this into service code
            var httpClientService2 = new HttpClientService(new HttpClient());
            var postResult2 = await httpClientService2.GetJsonAsync<String>($"{urlModel.Url}:{BootPort}/health");
            if (!postResult2.IsSuccess || postResult2.Value.StatusCode != System.Net.HttpStatusCode.OK)
            {
                _ops2HealthCheck.SetCompletedWithError(postResult2.Reasons.First().Message);
                return;
            }
            _ops2HealthCheck.SetCompletedWithoutErrors();
            if (!_ops2HealthCheck.CompletedSuccessfully)
            {
                return;
            }
            StateHasChanged();


            // Create a new KERIA client
            // See client.ts create_agent.ts and other Integration scrips here: https://github.com/WebOfTrust/signify-integration/tree/main/scripts
            _ops4BootAndConnect.SetIsRunning();
            StateHasChanged();
            // TODO EE! take this from the form and store it in the wallet
            var clientRes = await _signifyClientService.Connect($"{urlModel.Url}:{AdminPort}", passcodeModel.Passcode, $"{urlModel.Url}:{BootPort}", true);
            if (clientRes.IsFailed)
            {
                _ops4BootAndConnect.SetCompletedWithError(clientRes.Reasons.First().Message);
                return;
            }
            _ops4BootAndConnect.SetCompletedWithoutErrors();


            _ops5CreatePersonalAid.SetIsRunning();
            StateHasChanged();
            var aidRes = await _signifyClientService.CreatePersonAid("Ed_" + DateTime.Now.TimeOfDay.TotalSeconds);
            if (aidRes.IsFailed)
            {
                _ops5CreatePersonalAid.SetCompletedWithError(aidRes.Reasons.First().Message);
                return;
            }
            // logger.LogInformation("Identifier: {aid}", aidRes.Value);
            _ops5CreatePersonalAid.SetCompletedWithoutErrors();


            _ops6ListAids.SetIsRunning();
            StateHasChanged();
            var identifiersRes = await _signifyClientService.GetIdentifiers();
            if (identifiersRes.IsFailed)
            {
                _ops6ListAids.SetCompletedWithError(identifiersRes.Reasons.First().Message);
                return;
            }
            var identifiers = identifiersRes.Value;
            // logger.LogInformation("Identifiers: {identifiers}", identifiers);
            // identifiers.ToList().ForEach(i => logger.LogInformation($"Identifiers: {i}"));
            _ops6ListAids.SetCompletedWithoutErrors();
            return;


            _ops7ListCredentials.SetIsRunning();
            StateHasChanged();
            await Task.Delay(2000);
            _ops7ListCredentials.SetCompletedWithoutErrors();
            if (!_ops7ListCredentials.CompletedSuccessfully)
            {
                return;
            }
        }
        StateHasChanged();

    }
}