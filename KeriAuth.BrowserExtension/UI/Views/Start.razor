@page "/Start"

@inherits Blazor.BrowserExtension.Pages.BasePage;

@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@using static KeriAuth.BrowserExtension.AppConfig;
@using static KeriAuth.BrowserExtension.Helper.UIHelper;
@using static KeriAuth.BrowserExtension.Services.SignifyService.SignifyServiceConfig
@using FluentResults
@using JsBind.Net
@using JsBind.Net.Configurations
@using System.Diagnostics;
@using System.Text.Json;
@using System.Text.Json.Nodes
@using Blazor.BrowserExtension
@using WebExtensions.Net
@using WebExtensions.Net.Runtime
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using JsonSerializer = System.Text.Json.JsonSerializer
@using static System.Net.WebRequestMethods;
@using System.ComponentModel.DataAnnotations
@using System.Linq;
@using System.Text;
@using System.Security.Cryptography;

@inject IPreferencesService preferencesService
<!-- inject Blazor.BrowserExtension.IBrowserExtensionEnvironment BrowserExtensionEnvironment  -->
@inject IStorageService storageService
@inject IStateService stateService
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject ILogger<Start> logger
@inject HttpClient http
@inject NavigationManager navManager
@inject IJSRuntime js
@inject ISignifyClientService signifyClientService
@inject ISnackbar snackbar

<div id="Start" class="bt-body-page">
    <!-- This Start view will be re-navigated during user's configuration and authentication flows, so the structure of the if/else-if constructs will make more sense with that understanding  ->
    @if (IsFreshInstall)
    {
                                    <div id=@nameof(IsFreshInstall) class="d-flex gap-3 bt-main">
                                                                                                    <MudStack>
                                                                                                        <MudText Typo="Typo.body1">
                                                                                                            Thank you for installing KERI Auth.
                                                                                                            We're excited to have you on board!
                                                                                                            <br />
                                                                                                            This release supports the following features:
                                                                                                            </MudText>
                                                                                                            <MudContainer>
                                                                                                                <ul style="list-style-type:circle;">
                                                                                                                    <li>TBD</li>
                                                                                                                    <li>TBD</li>
                                                                                                                    </ul>
                                                            </MudContainer>
                                                            <MudText Typo="Typo.body1">For more information, see <a href="https://keriauth.com" target="blank">keriauth.com</a>.</MudText>
                                                            </MudStack>
                                                        </div>
                                                        <MudStack Row="true" class="bt-button-tray">
            <MudSpacer></MudSpacer>
            <MudButton @ref="nextButton" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await NextSection(nameof(IsFreshInstall)))" Class="justify-end" data-testid="next">Next</MudButton>
            </MudStack>
    }
    else if (IsNewRelease)
    {
            <div id=@nameof(IsNewRelease) class="d-flex gap-3 bt-main">
                <MudStack>
                    <MudText Typo="Typo.h6">Updated Release</MudText>
                    <MudText Typo="Typo.body1">
                        The version of software has been updated.
                    </MudText>
                    <MudText>For release history, see </MudText>
                    <MudButton Variant="Variant.Text" OnClick="() => navManager.NavigateTo(RouteToReleaseHistory)">release history</MudButton>
                </MudStack>
            </div>
            <MudStack Row="true" class="bt-button-tray">
                <!-- <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
                    -->
        <MudSpacer></MudSpacer>
        <MudButton @ref="nextButton" Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => await NextSection(nameof(IsNewRelease))" Class="justify-end" data-testid="next">Next</MudButton>
        </MudStack>
    }
    else if (IsTermsAgreementNeeded)
    {
        <div id=@nameof(IsTermsAgreementNeeded) class="d-flex gap-3 bt-main">
            <MudStack>
                <MudText Typo="Typo.h6">Review and agree to Terms of Use and Privacy Policy</MudText>
                <MudStack Class="bt-create-card-top-scrollable">
                    <div id="bt-terms-and-privacy">
                        <MudStack Class="d-flex">
                            <MudIconButton Icon="@Icons.Material.Filled.Print" Variant="Variant.Text" Href="@releaseUrlPath" Target="_blank" Class="bt-terms-button" />
                            @(releaseMarkup)
                        </MudStack>
                        <MudDivider></MudDivider>
                        <MudStack Class="d-flex">
                            <MudIconButton Icon="@Icons.Material.Filled.Print" Variant="Variant.Text" Href="@termsUrlPath" Target="_blank" Class="bt-terms-button" />
                            @(termsMarkup)
                        </MudStack>
                        <MudDivider></MudDivider>
                        <MudStack Class="d-flex">
                            <MudIconButton Icon="@Icons.Material.Filled.Print" Variant="Variant.Text" Href="@privacyUrlPath" Target="_blank" Class="bt-terms-button" />
                            @(privacyMarkup)
                        </MudStack>
                    </div>
                    <MudDivider />
                    <MudStack class="d-flex mt-5 justify-center" Style="align-items:center;">
                        <MudCheckBox @bind-Value="isTermsAgreed" data-testid="tosCheckbox">I agree to the above Terms of Use and Privacy Policy</MudCheckBox>
                    </MudStack>
                </MudStack>
            </MudStack>
        </div>
        <MudStack Row="true" class="bt-button-tray">
            <!-- <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
            -->
            <MudSpacer></MudSpacer>
            <MudButton @ref="nextButton" Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!isTermsAgreed)" OnClick="async () => await NextSection(nameof(IsTermsAgreementNeeded))" Class="justify-end" data-testid="next">Next</MudButton>
        </MudStack>
    }
    else if (IsNotConfigured)
    {
        <div id=@nameof(IsNotConfigured) class="d-flex gap-3 bt-main">
            <MudStack>
                <MudText Typo="Typo.h6">Configure and connect to your KERIA agent service</MudText>
                <MudStack Class="bt-create-card-top-scrollable">
                    <MudTextField Label="Agent URL"
                                  @bind-Value="@urlModel.AdminUrl"
                                  For="@(() => urlModel.AdminUrl)"
                                  Immediate="true"
                                  OnBlur="@HandleOnBlur" />
                    <MudTextField Label="Boot URL"
                                  @bind-Value="@urlModel.BootUrl"
                                  For="@(() => urlModel.BootUrl)"
                                  Immediate="true"
                                  OnBlur="@HandleOnBlur" />
                    <MudTextField Label="Your passcode"
                                  InputType="InputType.Password"
                                  @bind-Value="@passcodeModel.Passcode"
                                  For="@(() => passcodeModel.Passcode)"
                                  Immediate="true"
                                  OnBlur="@HandleOnBlur" />
                    <MudButton Variant="Variant.Filled" Style="width:fit-content;" OnClick="@(async () => await ConnectToKeria())" Disabled="@(!IsValidURLsAndPasscode || !IsNotConfigured)" Color="Color.Primary">Connect</MudButton>
                    <MudStack Class="mt-5">
                        <OperationDisplayComponent ops="@ops1LivenessCheck"></OperationDisplayComponent>
                        <OperationDisplayComponent ops="@ops2HealthCheck"></OperationDisplayComponent>
                        <OperationDisplayComponent ops="@ops3BootAndConnect"></OperationDisplayComponent>
                        <OperationDisplayComponent ops="@ops4ListAids"></OperationDisplayComponent>
                        <OperationDisplayComponent ops="@ops5CreatePersonalAid"></OperationDisplayComponent>
                    </MudStack>
                </MudStack>
            </MudStack>
        </div>
        <MudStack Row="true" class="bt-button-tray">
            <!-- Intentionally no back button here -->
            <MudSpacer />
            <MudButton @ref="nextButton" Disabled="@(!IsKeriaConfigured)" Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => await NextSection(nameof(IsNotConfigured))" Class="justify-start" data-testid="next">Next</MudButton>
        </MudStack>
    }
    else if (IsLocked)
    {
        <div id=@nameof(IsLocked) class="d-flex gap-3 bt-main" style="justify-content:center;">
            <MudStack class="d-flex justify-center pa-3" Style="text-align:center;">
                <MudImage Style="align-self:center;" Fluid="true" Width="190" Class="mx-11" Src="/images/humans_1.png"></MudImage>
                <MudText>
                    <span style="font-weight:bold">KERI Auth</span>
                </MudText>
                <MudText>Authenticating with<br />autonomous identifiers and authentic credentials</MudText>
                <MudForm @ref="form" @bind-IsValid="@isSuccess" @bind-Errors="@errors">
                    <MudTextField @ref="pwField"
                                  @onkeydown="@Enter"
                                  T="string"
                                  Label=""
                                  Placeholder="Enter passphrase"
                                  AutoFocus="true"
                                  Immediate="true"
                                  Required="true"
                                  RequiredError=""
                                  InputType="InputType.Password"
                                  autocomplete="off" />
                </MudForm>
                <MudButton Disabled="@(!isSuccess)" Class="mt-0" Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => await OpenWallet()">Unlock</MudButton>
                <MudText>Wallet locks after @AppConfig.IdleTimeoutTimeSpanMins minutes of inactivity.</MudText>
            </MudStack>
        </div>
        <MudStack Row="true" class="bt-button-tray">
            <!-- <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
                -->
            <MudSpacer></MudSpacer>
            <MudButton @ref="nextButton" Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => await NextSection(nameof(IsLocked))" Class="justify-end" data-testid="next">Next</MudButton>
        </MudStack>
    }
    else if (IsNotConnected)
    {
        <div id=@nameof(IsNotConnected) class="d-flex gap-3 bt-main">
            <MudStack class="d-flex justify-center pa-3" Style="text-align:center;">
                <MudImage Style="align-self:center;" Fluid="true" Width="190" Class="mx-11" Src="/images/humans_1.png"></MudImage>
                <MudText>Connecting to KERIA agent service...</MudText>
                <MudText>TODO - not yet implemented</MudText>
            </MudStack>
        </div>
        <MudStack Row="true" class="bt-button-tray">
            <!-- <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
                -->
            <MudSpacer></MudSpacer>
            <MudButton @ref="nextButton" Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => await NextSection(nameof(IsConnected))" Class="justify-end" data-testid="next">Next</MudButton>
        </MudStack>
    }
    else
    {
        logger.LogWarning($"Unexpected configuration state");
    }
</div>

<style>

    /* for a MudStack */
    .bt-create-card-top-scrollable {
        flex-wrap: wrap;
        flex-direction: column;
        /* width:-webkit-fit-content; */
    }

    /* for a MudStack */
    .bt-create-card-top-centered {
        margin: auto;
        width: fit-content;
        padding-right: 16px !important; /* since there is no room needed scrollbar here */
        flex-wrap: wrap;
        align-content: flex-start;
        flex-direction: row;
        align-content: center;
        justify-content: center;
        align-items: center;
    }

    /* Print button placed to the right edge of Terms of Use or Privacy Policy title */
    .bt-terms-button {
        padding: 0;
        display: flex;
        justify-content: flex-end;
        overflow: visible;
        color: var(--mud-palette-primary);
        top: 41px;
        right: 10px;
    }

    .wordCard {
        display: flex;
        min-width: 90px;
        margin: 0 10px 10px 0;
    }

    .wordNumber {
        font-size: x-small;
        min-width: 17px;
        align-self: baseline;
    }

    .wordWord {
        font-weight: bold;
        font-size: larger;
        align-self: baseline;
    }

    #bt-terms-and-privacy {
        overflow-x: hidden;
        padding-right: 8px;
    }

        #bt-terms-and-privacy h1 {
            color: var(--mud-palette-primary);
        }

        #bt-terms-and-privacy ul {
            list-style-type: disc;
            margin-left: 36px;
        }

    ul {
        list-style-type: disc;
        margin-left: 36px;
    }

</style>

@code {
    MudTextField<string>? pwField;
    MudButton? createButton = default(global::MudBlazor.MudButton);
    MudForm? form;
    private string openWalletError = string.Empty;
    private bool isSuccess;
    private string[] errors = { };
    private bool doesWalletExist;
    private static OnboardState onboardState = new OnboardState(false, false, DateTime.MinValue, 0, DateTime.MinValue, 0, false);
    private MudTextField<string> newPasswordField = new();
    private MudTextField<string> confirmPasswordField = new();
    private MudForm? confirmPasswordForm;
    private MudButton? nextButton = default(global::MudBlazor.MudButton);
    private readonly OperationDisplay ops1LivenessCheck = new OperationDisplay("Checking KERIA liveness", "Live");
    private readonly OperationDisplay ops2HealthCheck = new OperationDisplay("Checking KERIA health", "Healthy");
    private readonly OperationDisplay ops3BootAndConnect = new OperationDisplay("Reconnecting to or establishing new connection", "Connected");
    private readonly OperationDisplay ops4ListAids = new OperationDisplay("Retrieving your identifiers", "Identifiers retrieved");
    private readonly OperationDisplay ops5CreatePersonalAid = new OperationDisplay("Creating personal identifier", "Created personal identifier");
    private bool isStrongPassword = true; // TODO P1
    private bool isTermsAgreed;
    private const string releaseUrlPath = "content/release.html";
    private const string termsUrlPath = "content/terms.html";
    private const string privacyUrlPath = "content/privacy.html";
    private static MarkupString releaseMarkup = new("Placeholder for Release Notes");
    private static MarkupString termsMarkup = new("Placeholder for Terms of Use");
    private static MarkupString privacyMarkup = new("Placeholder for Privacy Policy");
    private static int termsMarkupHash;
    private static int privacyMarkupHash;
    private static bool IsFreshInstall => !onboardState.HasAcknowledgedInstall;
    private static bool IsNewRelease => !onboardState.HasAcknowledgedNewVersion;
    private static bool IsTermsAgreementNeeded => onboardState.PrivacyAgreedHash == 0 || onboardState.TosAgreedHash == 0;
    private static bool IsNotConfigured => !keriaConnectConfig.IsConfigured();
    private static bool IsNotConnected { get; set; } = true;
    private static bool IsConnected { get; set; } // TODO hack temporarily used for flow navigation
    private static readonly KeriaConnectConfig defaultKeriaConnectConfig = new KeriaConnectConfig(AppConfig.DefaultKeriaConnectAlias, AppConfig.DefaultKeriaAdminUrl, AppConfig.DefaultKeriaBootUrl, "");
    private static KeriaConnectConfig keriaConnectConfig = defaultKeriaConnectConfig;
    private static bool IsLocked;


    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        await Task.Delay(0);
        // Set focus here if needed
    }

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation($"OnInitializedAsync");
        await base.OnInitializedAsync();

        // _walletExists = false; // TODO EE! await WalletService.CheckIfWalletExists();
        // _isKeriaConfigured = true;  // TODO EE!
        releaseMarkup = new MarkupString(await http.GetStringAsync(releaseUrlPath));
        termsMarkup = new MarkupString(await http.GetStringAsync(termsUrlPath));
        privacyMarkup = new MarkupString(await http.GetStringAsync(privacyUrlPath));
        termsMarkupHash = GetNumberFromHash(termsMarkup.Value);
        privacyMarkupHash = GetNumberFromHash(privacyMarkup.Value);

        // See also OnParametersSetAsync for additional initialization
    }

    protected override async Task OnParametersSetAsync()
    {
        logger.LogInformation("OnParametersSetAsync");
        await base.OnParametersSetAsync();

        // Check if there's a reason on the URL (from service-worker), suggesting to navigate to a specific page
        // TODO does this logic need to go into Index.razor or App.razor where this url is available?
        var namedValueCollection = System.Web.HttpUtility.ParseQueryString(new Uri(navManager.Uri).Query);
        var reason = namedValueCollection["reason"];
        if (reason is not null)
        {
            logger.LogInformation($"Start: reason == {reason}");
            switch (reason)
            {
                case "install":
                    logger.LogError("reason install not yet handled");
                    // TODO store in onboard state?
                    return;
                case "update":
                    var priorVersion = namedValueCollection["priorVersion"];
                    // TODO store in onboard state?
                    return;
                case "browser_update": // for non-chrome browsers
                case "chrome_update":
                case "shared_module_update":
                default:
                    break;
            }
        }

        // On initial and subsequent navigations to this Start view, retrieve state from storage
        // and set the appropriate local state
        // TODO consider alternate design of reactive subscription to state changes
        var res = await storageService.GetItem<OnboardState>();
        if (res.IsFailed)
        {
            // onboardState = new OnboardState(false, false, DateTime.UtcNow, 0, DateTime.UtcNow, 0, false);
            await storageService.SetItem<OnboardState>(onboardState);
        }
        else
        {
            if (res.Value is not null)
                onboardState = res.Value;
        }

        // Check if the user has already configured KERIA connection
        var res2 = await storageService.GetItem<KeriaConnectConfig>();
        if (res2.IsFailed || res2.Value is null)
        {
            await storageService.SetItem<KeriaConnectConfig>(defaultKeriaConnectConfig);
            keriaConnectConfig = defaultKeriaConnectConfig;
        }
        else
        {
            keriaConnectConfig = res2.Value;
            // logger.LogError($"keriaConnectConfig.PassphraseHash is {keriaConnectConfig.PassphraseHash}");
        }

        // Check if the user has already agreed to the Terms of Use and Privacy Policy
        if (!onboardState.IsInstallOnboarded)
        {
            return;
        }
        else
        {
            var currentAppState = stateService.GetState();
            switch (currentAppState)
            {
                case IStateService.States.Unauthenticated:
                    doesWalletExist = true;
                    IsLocked = true;
                    // UI of current view will prompt user for password
                    break;

                case IStateService.States.Authenticated:
                    // if ActiveAid is not set (which can happen after a restore from backup), then set it to the first DID
                    IsLocked = false;
                    var prefs = await preferencesService.GetPreferences();
                    if (string.IsNullOrEmpty(prefs.SelectedAid))
                    {
                        // Debug.Assert(WalletService.Wallet is not null);
                        // prefs.SelectedAid = WalletService.Wallet.WalletDids[0].Did.Identifier;
                        // await preferencesService.SetPreferences(prefs);
                    }
                    navManager.NavigateTo(RouteToHome);
                    return;

                case IStateService.States.Unconfigured:
                    // UI will prompt user to set password and confirm mnemonic seed phrase
                    IsLocked = true;
                    break;

                case IStateService.States.Initializing:
                    logger.LogWarning($"Unexpected AppState {currentAppState}");
                    IsLocked = true;
                    break;

                default:
                    throw new Exception($"Unexpected AppState {currentAppState}");
            }
        }
    }

    private async Task OpenWalletWithPassword(string password)
    {
        // TODO temp hack
        var currentState = stateService.GetState();
        if (currentState != IStateService.States.Unauthenticated)
        {
            logger.LogWarning($"TODO Hack: Unexpected AppState {currentState}");
            await stateService.Initialize();
            await stateService.Configure();
        }

        openWalletError = String.Empty;

        if (string.IsNullOrEmpty(password) || password.Length != 21)
        {
            snackbar.Add("Invalid passphrase. Should be 21 characters.", Severity.Error);
            return;
        }
        if (keriaConnectConfig.PassphraseHash == null)
        {
            snackbar.Add("No passphrase hash found", Severity.Error);
            return;
        }
        if (GetNumberFromHash(password) == int.Parse(keriaConnectConfig.PassphraseHash))
        {
            await stateService.Authenticate();
            IsLocked = false;
            navManager.NavigateTo(RouteToHome);
            return;
        }
        else
        {
            openWalletError = "Invalid passphrase";
            snackbar.Add("Invalid passphrase", Severity.Error);
            return;
        }
    }

    private async Task OpenWallet()
    {
        if (pwField is not null)
            await OpenWalletWithPassword(pwField.Value);
    }

    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if (pwField is not null)
                await OpenWalletWithPassword(pwField.Value);
        }
    }

    // TODO move to utilities
    private static int GetNumberFromHash(string input)
    {
        using (SHA256 sha256 = SHA256.Create())
        {
            byte[] hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(input));
            int hashInt = BitConverter.ToInt32(hashBytes, 0);
            hashInt = Math.Abs(hashInt);
            return hashInt;
        }
    }

    private async Task NewPasswordKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
            await Task.Delay(0); // TODO P3 should this be to activate next field?
    }

    private async Task ConfirmPasswordKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
            if (confirmPasswordForm!.IsValid)
                await NextSection("??");
    }

    private async Task NextSection(string fromCondition)
    {
        await Task.Delay(0);
        logger.LogInformation($"handling NextSection {fromCondition}");
        switch (fromCondition)
        {
            case nameof(IsFreshInstall):
                onboardState = onboardState = new OnboardState(
                    true,
                    onboardState.HasAcknowledgedNewVersion,
                    onboardState.TosAgreedUtc,
                    onboardState.TosAgreedHash,
                    onboardState.PrivacyAgreedUtc,
                    onboardState.PrivacyAgreedHash,
                    onboardState.IsInstallOnboarded);
                _ = await storageService.SetItem<OnboardState>(onboardState);
                navManager.NavigateTo(RouteToStart);
                break;
            case nameof(IsNewRelease):
                onboardState = onboardState = new OnboardState(
                    onboardState.HasAcknowledgedInstall,
                    true,
                    onboardState.TosAgreedUtc,
                    onboardState.TosAgreedHash,
                    onboardState.PrivacyAgreedUtc,
                    onboardState.PrivacyAgreedHash,
                    onboardState.IsInstallOnboarded);
                _ = await storageService.SetItem<OnboardState>(onboardState);
                navManager.NavigateTo(RouteToStart);
                break;
            case nameof(IsTermsAgreementNeeded):
                onboardState = new OnboardState(
                    onboardState.HasAcknowledgedInstall,
                    onboardState.HasAcknowledgedNewVersion,
                    DateTime.UtcNow,
                    termsMarkupHash,
                    DateTime.UtcNow,
                    privacyMarkupHash,
                    true);
                _ = await storageService.SetItem<OnboardState>(onboardState);
                navManager.NavigateTo(RouteToStart);
                break;
            case nameof(IsNotConfigured):
                // state will have been stored during connection checking
                navManager.NavigateTo(RouteToStart);
                break;
            case nameof(IsLocked):
                // updated via StateService state
                navManager.NavigateTo(RouteToStart);
                break;
            case nameof(IsNotConnected):
                // TODO record viewing NotConnected
                IsNotConnected = false;
                navManager.NavigateTo(RouteToStart);
                break;
            case nameof(IsConnected):
                // TODO state should be affected earlier
                await stateService.Initialize();
                await stateService.Configure();
                navManager.NavigateTo(RouteToHome);
                break;
            default:
                throw new Exception($"Next from unknown section");
        }
    }

    private IEnumerable<string> PasswordMatch(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw != newPasswordField.Text)
        {
            yield return "Passwords must match";
        }
    }

    private async Task SaveInitialWallet()
    {
        await Task.Delay(0);
        // Debug.Assert(walletService.Wallet is not null);
        // await walletService.SaveWallet(new Wallet(_newPasswordField.Text, DateTime.UtcNow));
    }

    private class UrlModel
    {
        [Required]
        [Url(ErrorMessage = "Enter KERIA Admin URL")]
        public string AdminUrl { get; set; } = AppConfig.DefaultKeriaAdminUrl;

        [Required]
        [Url(ErrorMessage = "Enter KERIA Boot URL")]
        public string BootUrl { get; set; } = AppConfig.DefaultKeriaBootUrl;
    }

    private class PasscodeModel
    {
        [Required]
        [StringLength(21, ErrorMessage = "Passcode must be 21 characters long", MinimumLength = 21)]
        [DataType(DataType.Password)]
        /* [Display(Name = "Enter your passcode")] */
        public string Passcode { get; set; } = "";
    }

    private UrlModel urlModel = new UrlModel()
        {
            AdminUrl = AppConfig.DefaultKeriaAdminUrl,
            BootUrl = AppConfig.DefaultKeriaBootUrl
        };

    private PasscodeModel passcodeModel = new PasscodeModel();

    private bool IsValidURLs
    {
        get
        {
            if (string.IsNullOrWhiteSpace(urlModel.AdminUrl)
                || !Uri.IsWellFormedUriString(urlModel.AdminUrl, UriKind.Absolute)
                || string.IsNullOrWhiteSpace(urlModel.BootUrl)
                || !Uri.IsWellFormedUriString(urlModel.BootUrl, UriKind.Absolute))
            {
                return false;
            }
            return true;
        }
    }

    private bool IsValidURLsAndPasscode
    {
        get
        {
            if (!IsValidURLs)
            {
                return false;
            }
            if (string.IsNullOrWhiteSpace(passcodeModel.Passcode) || passcodeModel.Passcode.Length != 21)
            {
                return false;
            }
            return true;
        }
    }

    private static bool IsKeriaConfigured => keriaConnectConfig.IsConfigured();

    private void HandleOnBlur()
    {
        // This method will be triggered when the text field loses focus
        // You can check for validity here if needed
    }

    private async Task ConnectToKeria()
    {
        ops1LivenessCheck.Reset();
        ops2HealthCheck.Reset();
        ops3BootAndConnect.Reset();
        ops5CreatePersonalAid.Reset();
        ops4ListAids.Reset();
        if (IsValidURLs)
        {
            // check if AdminPort is reachable
            ops1LivenessCheck.SetIsRunning();
            StateHasChanged();
            UriBuilder healthUriBuilder = new($"{urlModel.BootUrl}/health");
            var postResult = await signifyClientService.HealthCheck(healthUriBuilder.Uri);
            if (!postResult.IsSuccess)
            {
                var message = $"KERIA agent service is not reachable";
                logger.LogWarning($"{message} at {healthUriBuilder.Uri}.");
                ops1LivenessCheck.SetCompletedWithError(message);
                return;
            }
            ops1LivenessCheck.SetCompletedWithoutErrors();
            StateHasChanged();

            // check if KERIA is reporting as healthy
            ops2HealthCheck.SetIsRunning();
            StateHasChanged();
            // TODO move this into service code
            var httpClientService2 = new HttpClientService(new HttpClient());
            var postResult2 = await httpClientService2.GetJsonAsync<String>($"{urlModel.BootUrl}/health");
            if (!postResult2.IsSuccess || postResult2.Value.StatusCode != System.Net.HttpStatusCode.OK)
            {
                ops2HealthCheck.SetCompletedWithError(postResult2.Reasons.First().Message);
                StateHasChanged();
                return;
            }
            ops2HealthCheck.SetCompletedWithoutErrors();
            if (!ops2HealthCheck.CompletedSuccessfully)
            {
                StateHasChanged();
                return;
            }

            // Create a new KERIA client
            // See client.ts create_agent.ts and other Integration scrips here: https://github.com/WebOfTrust/signify-integration/tree/main/scripts
            ops3BootAndConnect.SetIsRunning();
            StateHasChanged();
            var clientRes = await signifyClientService.Connect($"{urlModel.AdminUrl}", passcodeModel.Passcode, $"{urlModel.BootUrl}", true);
            if (clientRes.IsFailed)
            {
                ops3BootAndConnect.SetCompletedWithError(clientRes.Reasons.First().Message);
                StateHasChanged();
                return;
            }
            ops3BootAndConnect.SetCompletedWithoutErrors();
            // now that we have a connection, we can save the connection details
            var passwordHash = GetNumberFromHash(passcodeModel.Passcode);
            keriaConnectConfig = new KeriaConnectConfig(AppConfig.DefaultKeriaConnectAlias, urlModel.AdminUrl, urlModel.BootUrl, passwordHash.ToString());
            var res = await storageService.SetItem<KeriaConnectConfig>(keriaConnectConfig);
            if (res.IsFailed)
            {
                logger.LogError("Failed to store connection details");
                logger.LogError(res.Reasons.First().Message);
                ops3BootAndConnect.SetCompletedWithError(res.Reasons.First().Message);
                StateHasChanged();
                return;
            }
            await stateService.Configure();
            StateHasChanged();

            ops4ListAids.SetIsRunning();
            StateHasChanged();
            var identifiersRes = await signifyClientService.GetIdentifiers();
            if (identifiersRes.IsFailed)
            {
                ops4ListAids.SetCompletedWithError(identifiersRes.Reasons.First().Message);
                StateHasChanged();
                return;
            }
            var identifiers = identifiersRes.Value;
            // logger.LogInformation("Identifiers: {identifiers}", identifiers);
            // identifiers.ToList().ForEach(i => logger.LogInformation($"Identifiers: {i}"));
            ops4ListAids.SetCompletedWithoutErrors();
            StateHasChanged();

            if (identifiers.Length == 0)
            {
                ops5CreatePersonalAid.SetIsRunning();
                StateHasChanged();
                var aidRes = await signifyClientService.CreatePersonAid("Freddy as CFO of XYX Corp " + DateTime.Now.TimeOfDay.TotalSeconds);
                if (aidRes.IsFailed)
                {
                    ops5CreatePersonalAid.SetCompletedWithError(aidRes.Reasons.First().Message);
                    StateHasChanged();
                    return;
                }
                // logger.LogInformation("Identifier: {aid}", aidRes.Value);
                ops5CreatePersonalAid.SetCompletedWithoutErrors();
                StateHasChanged();
            }
            else
            {
                // don't need to create another AID
                ops5CreatePersonalAid.SetCompletedWithoutErrors(); // ("One or more identifier(s) already exist");
                StateHasChanged();
            }
            // Success from testing the connection at this point
            // TODO EE! store the connection details and hash of the password in storage
            await stateService.Configure();
            await stateService.Authenticate(); // TODO EE! temporary location here, to enable testing
                                               // TODO EE! reactive effects of stateservice should disable the Connect button and enable the Next button??
        }
        return;
    }
}