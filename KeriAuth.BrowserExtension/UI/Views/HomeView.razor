@page "/Home"
@using KeriAuth.BrowserExtension
@using KeriAuth.BrowserExtension.UI
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Models
@using static KeriAuth.BrowserExtension.AppConfig;
@using static KeriAuth.BrowserExtension.Helper.Identicon;
@inject NavigationManager navManager
@inject IStorageService storageService
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject IJSRuntime js
@inject IStateService stateService
@inject ILogger<HomeView> logger
@inject IdentifiersService identifiersService
@inject IPreferencesService preferencesService
@using MudBlazor

<div id="@this.GetType().Name" class="bt-body-page">
    <div class="d-flex gap-3 bt-main">
        <div class="bt-main-inside-scroll" style="align-items:center; justify-content: center; display:flex; flex-direction:column;">
            <MudText Typo="Typo.h6">Dashboard</MudText>
            <MudStack AlignItems="AlignItems.Center">
                <MudStack Row>
                    <MudText Style="width:200px; text-align:right;">KERI Agent</MudText>
                    <div style="text-align:left; width:135px; display:flex;">
                        @switch (stateService.GetState())
                        {
                            case IStateService.States.AuthenticatedConnected:
                                <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"></MudIcon>
                                <MudText Typo="Typo.body2">Connected</MudText>
                                break;
                            case IStateService.States.AuthenticatedDisconnected:
                                <MudIcon Icon="@Icons.Material.Filled.Close" Color="Color.Error"></MudIcon>
                                <MudText Typo="Typo.body2">Disconnected</MudText>
                                break;
                            default:
                                <MudIcon Icon="@Icons.Material.Filled.Close" Color="Color.Error"></MudIcon>
                                <MudText Typo="Typo.body2">Disconnected - Other</MudText>
                                break;
                        }
                    </div>
                </MudStack>

                <MudStack Row>
                    <MudText Style="width:200px; text-align:right;">
                        <MudLink OnClick="() => navManager.NavigateTo(AppConfig.RouteToIdentifiers)">Identifiers</MudLink>
                    </MudText>
                    <MudText Style="width:135px; text-align:left;">@identifiersCount</MudText>
                </MudStack>

                <MudStack Style="background: var(--mud-palette-action-default-hover);">
                    <MudStack Row>
                        <MudText Style="width:200px; text-align:right;">
                            <MudLink OnClick="() => navManager.NavigateTo(AppConfig.RouteToIdentifier)">Selected Identifier</MudLink>
                        </MudText>
                        <MudIcon Icon=@SelectedIdenticon ViewBox="0 0 100 100" Style="text-align:left; border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden; margin-top: 3px;" />
                        <MudText>@SelectedAlias</MudText>
                    </MudStack>
                    <MudStack Row>
                        <MudText Style="width:200px; text-align:right;">
                            <MudLink OnClick="() => navManager.NavigateTo(AppConfig.RouteToIdentifier)">Credentials Received</MudLink>
                        </MudText>
                        <MudText Style="width:135px; text-align:left;">888</MudText>
                    </MudStack>
                    <MudStack Row>
                        <MudText Style="width:200px; text-align:right;">
                            <MudLink OnClick="() => navManager.NavigateTo(AppConfig.RouteToIdentifier)">Credentials Issued</MudLink>
                        </MudText>
                        <MudText Style="width:135px; text-align:left;">888</MudText>
                    </MudStack>
                    <MudStack Row>
                        <MudText Style="width:200px; text-align:right;">
                            <MudLink OnClick="() => navManager.NavigateTo(AppConfig.RouteToIdentifier)">Groups</MudLink>
                        </MudText>
                        <MudText Style="width:135px; text-align:left;">888</MudText>
                    </MudStack>
                    <MudStack Row>
                        <MudText Style="width:200px; text-align:right;">
                            <MudLink OnClick="() => navManager.NavigateTo(AppConfig.RouteToIdentifier)">Registered Websites</MudLink>
                        </MudText>
                        <MudText Style="width:135px; text-align:left;">888</MudText>
                    </MudStack>
                    <MudStack Row>
                        <MudText Style="width:200px; text-align:right;">Pending Requests:</MudText>
                    </MudStack>
                    <MudStack Row>
                        <MudText Style="width:200px; text-align:right;">
                            <MudLink OnClick="() => navManager.NavigateTo(AppConfig.RouteToIdentifiers)">From Websites</MudLink>
                        </MudText>
                        <MudText Style="width:135px; text-align:left;">888</MudText>
                    </MudStack>
                    <MudStack Row>
                        <MudText Style="width:200px; text-align:right;">
                            <MudLink OnClick="() => navManager.NavigateTo(AppConfig.RouteToIdentifiers)">From KERI Agent</MudLink>
                        </MudText>
                        <MudText Style="width:135px; text-align:left;">888</MudText>
                    </MudStack>
                    <MudStack Row>
                        <MudText Style="width:200px; text-align:right;">
                            <MudLink OnClick="() => navManager.NavigateTo(AppConfig.RouteToIdentifiers)">Notifications</MudLink>
                        </MudText>
                        <MudText Style="width:135px; text-align:left;">888</MudText>
                    </MudStack>

                </MudStack>
            </MudStack>
        </div>
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        logger.LogInformation($"OnInitializedAsync");
        var res = await identifiersService.GetIdentifierHeadlines();
        if (res is not null && res.IsSuccess)
        {
            identifiersCount = res.Value.Count();
        }

        preferencesService.Subscribe<Preferences>( 
            onNext: async (Preferences value) => await HandleNextFromPreferencesService(value),
            onError: async (Exception error) => await HandleErrorFromPreferencesService(error),
            onCompleted: async () => await HandleCompletedFromPreferencesService()
        );

        var preferences = await preferencesService.GetPreferences();
        await InitialOrNextPreference(preferences);
    }

    private int identifiersCount = 0;

    private async Task HandleNextFromPreferencesService(Preferences value)
    {
        await InitialOrNextPreference(value);
    }
    private async Task HandleErrorFromPreferencesService(Exception error)
    {
        await Task.Delay(0);
        logger.LogError("HandleErrorFromPreferencesService");
    }
    private async Task HandleCompletedFromPreferencesService()
    {
        await Task.Delay(0);
        logger.LogError("HandleCompletedFromPreferencesService");
    }

    private string SelectedAid { get; set; } = "";
    private string SelectedAlias { get; set; } = "";
    private string SelectedIdenticon { get; set; } = "";

    private async Task InitialOrNextPreference(Preferences value)
    {
        logger.LogInformation("InitialOrNextPreference");
        SelectedAid = value.SelectedAid;
        SelectedAlias = "";
        SelectedIdenticon = "";
        var res = await identifiersService.GetIdentifierHeadlines(); // TODO needed to populate the cache, to enable GetIdentifierService ?
        if (res is not null && res.IsSuccess)
        {
            var headline = res.Value.Where<IdentifierHeadline>((h) => h.Prefix == SelectedAid).First();
            if (headline is not null)
            {
                SelectedAlias = headline.Alias;
                SelectedIdenticon = MakeIdenticon(SelectedAid);
            }
        } else
        {
            logger.LogError("InitialOrNextPreference: failed to get IdentifierHeadlines");
        }
        StateHasChanged();
    }
}