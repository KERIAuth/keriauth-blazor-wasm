@page "/Websites"
@layout Layouts.MainLayout

@using System.Linq
@using System.Text.Json
@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.UI.Pages
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.AppConfig
@using System.Diagnostics
@using Microsoft.AspNetCore.WebUtilities
@using MudBlazor
@using FluentResults
@using System.Web
@using System.Text.Json.Serialization
@using System;
@using System.Collections.Generic;

@inject IStorageService storageService
@inject IStateService stateService
@inject NavigationManager navManager
@inject IJSRuntime js
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@inject ILogger<WebsitesPage> logger
@inject IdentifiersService identifiersService
@inject ISignifyClientService signifyClientService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inject IWebsiteConfigService websiteConfigService
@inject IStorageService storageService
@inject IPreferencesService preferencesService
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject IAppSwMessagingService appSwMessagingService
@inject IJSRuntime jsRuntime

@code {
    // fields

    // properties
    List<WebsiteConfig>? WWebsites { get; set; }
    string? SelectedWebsiteOrigin { get; set; }

    // reactive properties
    string CountLabel => (WWebsites is not null) ? "(" + WWebsites.Count() + ")" : "...";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        logger.LogInformation($"OnInitializedAsync");
        return;
    }

    protected override async Task OnParametersSetAsync()
    {
        logger.LogInformation($"OnParametersSetAsync");
        await base.OnParametersSetAsync();
        var websitesRes = await websiteConfigService.GetList();
        if (websitesRes is not null && websitesRes.IsSuccess && websitesRes.Value is not null && websitesRes.Value.WebsiteList.Any())
        {
            WWebsites = websitesRes.Value.WebsiteList;
            SelectedWebsiteOrigin = WWebsites.First().Origin.OriginalString;
        }
        else
        {
            WWebsites = null;
            SelectedWebsiteOrigin = null;
        }
        StateHasChanged();
    }

    // TODO P0 Update the callback signature to just send a complete WebsiteConfig?
    // TODO P0 Persist the change, then refetch the entire WebsiteConfigList and return that?
    // Handle callback from the WebsiteConfigDisplay
    private void HandleValueChanged((string selectedPrefix, Dictionary<string, object>? selectedCredentialOrNothing) value)
    {
        logger.LogError($"NOT YET IMPLEMENTED HandleValueChanged prefix {value.selectedPrefix} | selectedCredential {value.selectedCredentialOrNothing is not null}");
        StateHasChanged();
    }

    async Task UpdateSelectedWebsiteOrigin(string s)
    {
        SelectedWebsiteOrigin = s;
        StateHasChanged();
        return;
    }

    async Task navigateToWebsitePage(string origin)
    {
        navManager.NavigateTo(AppConfig.RouteToWebsite + HttpUtility.UrlEncode(origin.ToString()));
    }
}

<div id="@this.GetType().Name" class="bt-body-page">
    <MudStack Class="bt-main">
        <div class="bt-main-inside-scroll">
            <MudStack Row="true">
                <MudText Typo="Typo.h6">Websites</MudText>
                <MudText Typo="Typo.body1">@CountLabel</MudText>
            </MudStack>
            @if (WWebsites is not null && WWebsites.Any())
            {
                <MudPaper>
                    <MudTable Items="WWebsites" Hover="true" Striped="true">
                        <HeaderContent>
                            <MudTh>Website</MudTh>
                            <MudTh>Automatically Sign Http Request Headers?</MudTh>
                            <MudTh>Details</MudTh>
                            <MudTh>Launch</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="ID">@context.Origin.OriginalString</MudTd>
                            <MudTd DataLabel="Name">@(context.IsAutoSignHeaders ? "Yes" : "No")</MudTd>
                            <MudTd DataLabel="Details">
                                <MudLink Href="javascript:void(0);" OnClick="@(() => navigateToWebsitePage(@context.Origin.OriginalString))">Details</MudLink>
                            </MudTd>
                            <MudTh><MudLink Href="@context.Origin.OriginalString" Target="_blank">Launch</MudLink></MudTh>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            }
        </div>
    </MudStack>
    <MudStack Row="true" class="bt-button-tray">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@(async () => await GoBack(js))' Class="justify-start" />
        <MudSpacer></MudSpacer>
    </MudStack>
</div>

<style>
    .mud-select .mud-select-input .mud-input-slot {
        height: auto;
    }

    .selected-item {
        border-left: 4px solid blue;
    }
</style>