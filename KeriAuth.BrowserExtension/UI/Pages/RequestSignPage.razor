@page "/RequestSign/{encodedOrigin}"
@layout Layouts.DialogLayout

@using System.Linq
@using System.Text.Json
@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.UI.Pages
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.AppConfig
@using System.Diagnostics
@using Microsoft.AspNetCore.WebUtilities
@using MudBlazor
@using FluentResults
@using System.Web
@using System.Text.Json.Serialization
@using System;
@using System.Collections.Generic;

@implements IDisposable

@inject IStorageService storageService
@inject IStateService stateService
@inject NavigationManager navManager
@inject IJSRuntime js
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@inject ILogger<RequestSignPage> logger
@inject IdentifiersService identifiersService
@inject ISignifyClientService signifyClientService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inject IWebsiteConfigService websiteConfigService
@inject IStorageService storageService
@inject IPreferencesService preferencesService
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject IAppSwMessagingService appSwMessagingService
@inject IJSRuntime jsRuntime

@code {
    [Parameter]
    public string encodedOrigin { get; set; } = "";

    public string RequestId { get; set; } = "";

    public string PayloadJson { get; set; } = "";

    string OriginStr => HttpUtility.UrlDecode(encodedOrigin).Trim().Trim('"');

    Uri? GetOriginUri()
    {
        try
        {
            var uri = new Uri(OriginStr);
            return uri;
        }
        catch (Exception ex)
        {
            logger.LogError("GetOriginUri: Error parsing OriginStr '{o}': {e}", OriginStr, ex);
            return null;
        }
    }

    string AppActivePrefix { get; set; } = string.Empty;

    List<IdentifierHeadline> IdentifierHeadlines { get; set; } = [];

    // TODO P2 should be something like  get => ThisWebsiteConfig?.RememberedPrefixOrNothing == SelectedPrefix;
    bool IsPrefixRemembered { get; set; }
    bool IsCredentialRemembered { get; set; }
    enum SignInMode { Credential, Identifier, Prompt }
    SignInMode RequestedSignInMode { get; set; } = SignInMode.Prompt;

    IdentifierHeadline? SelectedHeadlineOrNothing { get; set; }

    string SelectedPrefix { get; set; } = "unknown";
    string SelectedAidAlias { get; set; } = "unknown";

    // TODO P2 should be something like  get => ThisWebsiteConfig?.AutoSignInChoice == AutoSignInMode.Identifier;
    bool IsAutoSignIn { get; set; }

    WebsiteConfig? ThisWebsiteConfig { get; set; }

    async Task updateIsCredentialRemembered(bool isChecked)
    {
        IsCredentialRemembered = isChecked;
        // TODO P1 See updateIsPrefixRemembered for how this should be implemented
        await Task.Delay(0);
        return;
    }

    async Task updateIsPrefixRemembered(bool isChecked)
    {
        // TODO P2 implementation should just push an update into websiteConfigService, and rest be reactive to that.
        IsPrefixRemembered = isChecked;
        Debug.Assert(GetOriginUri() is not null);
        var getOrCreateWebsiteRes = await websiteConfigService.GetOrCreateWebsiteConfig(GetOriginUri()!);
        if (getOrCreateWebsiteRes.IsFailed)
        {
            logger.LogError("Error in websiteService {0}", getOrCreateWebsiteRes.Errors);
            return;
        }
        WebsiteConfig newWebsite = getOrCreateWebsiteRes.Value;
        if (SelectedHeadlineOrNothing is not null)
        {
            if (isChecked)
            {
                newWebsite = newWebsite with { RememberedPrefixOrNothing = SelectedPrefix };
            }
            else
            {
                // since the user has chosen to forget this identifier, we will also forget the auto sign in choice
                // TODO P2 once this UI is made responsive to an IObserver<WebsiteConfig> we can move this logic into the service
                IsAutoSignIn = false;
                newWebsite = newWebsite with { RememberedPrefixOrNothing = null, AutoSignInChoice = AutoSignInMode.None };
            }

            logger.LogInformation("updateIsRemembered: about to update: {0}", newWebsite);
            var res = await websiteConfigService.Update(newWebsite);
            if (res is null || res.IsFailed)
            {
                throw new Exception($"Error updating website: {res?.Errors}");
            }
            Debug.Assert(GetOriginUri() is not null);
            await getWebsiteConfig(GetOriginUri()!); // StateHasChanged();
            return;
        }
        else
        {
            logger.LogError("updateIsRemembered: Unexpected null Identifier selection");
        }
        return;
    }

    async Task updateIsAutoSignIn(bool isChecked)
    {
        // TODO P2 implementation should just push an update into websiteConfigService, and rest be reactive to that.
        IsAutoSignIn = isChecked;
        Debug.Assert(GetOriginUri() is not null);
        var result = await websiteConfigService.GetOrCreateWebsiteConfig(GetOriginUri()!);

        WebsiteConfig newWebsiteConfig = result.Value;
        if (SelectedHeadlineOrNothing is not null)
        {
            if (isChecked)
            {
                // TODO P2 issues if user changes identifier after setting willSignInAutomatically or if willSignAutomatically was set for a different identifier earlier
                // put this logic into service and simplify here once this UI is made responsive to an IObserver<WebsiteConfig>
                IsPrefixRemembered = true;
                newWebsiteConfig = newWebsiteConfig with { RememberedPrefixOrNothing = SelectedPrefix, AutoSignInChoice = AutoSignInMode.Identifier };
            }
            else
            {
                newWebsiteConfig = newWebsiteConfig with { RememberedPrefixOrNothing = SelectedPrefix, AutoSignInChoice = AutoSignInMode.None };
            }


            logger.LogInformation("updateWillSignInAutomatically: about to update: {0}", newWebsiteConfig);
            var res = await websiteConfigService.Update(newWebsiteConfig);
            if (res is null || res.IsFailed)
            {
                IsAutoSignIn = false;
                logger.LogError("Error updating website: {0}", res?.Errors);
            }
            else
            {
                logger.LogInformation("updateWillSignInAutomatically: setting willSignInAutomatically2 {0}", res);
                IsAutoSignIn = isChecked;
            }
            Debug.Assert(GetOriginUri() is not null);
            await getWebsiteConfig(GetOriginUri()!); //  StateHasChanged();
            return;
        }
        else
        {
            logger.LogError("Unexpected null Identifier selection");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        logger.LogInformation($"OnInitialized");
        await getCredentials();
        return;
    }

    protected override async Task OnParametersSetAsync()
    {
        logger.LogInformation($"OnParametersSetAsync");
        await base.OnParametersSetAsync();
        InitializeOrOnNextPrefs(await preferencesService.GetPreferences());
        await GetInitialHeadlines();

        logger.LogInformation("OnParametersSetAsync requestId {r}", RequestId);

        // TODO P2 remove temporary code below for exploration.  Will be useful when requested to sign a specific request, such as issuing a credential
        var initialUriQuery = extensionEnvironmentService.InitialUriQuery;
        logger.LogInformation($"URI query: {initialUriQuery}");
        // TODO P1 add try-catch
        // TODO P1 decide whether these values (RequestId, Type, and others) should come in page parameters, initialUriQuery, or database/service.
        if (QueryHelpers.ParseQuery(initialUriQuery).TryGetValue("message", out var outterMessage))
        {
            var decodedMsg = HttpUtility.UrlDecode(outterMessage);
            logger.LogInformation("Chrome URI query message decoded: {msg}", decodedMsg);
            var decodedMsg2 = HttpUtility.UrlDecode(decodedMsg);
            logger.LogInformation("Chrome URI query message decoded2: {msg}", decodedMsg2);

            if (!IsJsonValid(decodedMsg2))
            {
                logger.LogError("Chrome URI query Invalid JSON message: {msg}", decodedMsg2);
                return;
            };

            string jsonString = decodedMsg2.ToString(); // Convert StringValues to string

            // Parse the JSON string
            // TODO P1 write exception handling around the following
            JsonDocument jsonDocument = JsonDocument.Parse(jsonString);
            JsonElement payload = jsonDocument.RootElement.GetProperty("payload");
            PayloadJson = payload.ToString();

            JsonElement requestId = jsonDocument.RootElement.GetProperty("requestId");
            RequestId = requestId.ToString();

            return;
        }
        else
        {
            logger.LogError("Could not find UriQuery content containing outter \"message\".");
            return;
        }
    }

    async Task GetInitialHeadlines()
    {
        logger.LogInformation("GetHeadlines...");
        var res = await identifiersService.GetIdentifierHeadlines();
        if (res != null && res.IsSuccess)
        {
            logger.LogInformation("GetIdentifierHeadlines: count {1}", res.Value.Count);
            IdentifierHeadlines = res.Value;
            IdentifierHeadlines = IdentifierHeadlines.OrderBy(a => a.Alias).ToList();
            if (IdentifierHeadlines.Count > 0)
            {
                Debug.Assert(GetOriginUri() is not null);
                var wcRes = await websiteConfigService.GetOrCreateWebsiteConfig(GetOriginUri()!);
                logger.LogInformation("GetHeadlines: getOrCreateWebsite: {0}", JsonSerializer.Serialize(wcRes));
                if (wcRes.IsFailed)
                {
                    logger.LogError("Error in websiteService: {0}", wcRes.Errors);
                    return;
                }
                WebsiteConfig newWebsite = wcRes.Value;
                if (newWebsite.RememberedPrefixOrNothing is not null)
                {
                    SelectedHeadlineOrNothing = IdentifierHeadlines.First(a => a.Prefix == newWebsite.RememberedPrefixOrNothing);
                }
                else
                {
                    // use the user's general preferences or otherwise the first headline
                    SelectedHeadlineOrNothing = IdentifierHeadlines.First(a => a.Prefix == AppActivePrefix);
                    if (SelectedHeadlineOrNothing is null)
                    {
                        SelectedHeadlineOrNothing = IdentifierHeadlines.First();
                    }
                }
                logger.LogInformation("SelectedHeadlineOrNothing: Alias: {0}", SelectedHeadlineOrNothing?.Alias ?? "UNSET!");
                SelectedPrefix = SelectedHeadlineOrNothing?.Prefix ?? "UNSET!";
                SelectedAidAlias = SelectedHeadlineOrNothing?.Alias ?? "UNSET!";
                Debug.Assert(SelectedHeadlineOrNothing is null, "Unexpected null value for SelectedHeadlineOrNothing");
                Debug.Assert(GetOriginUri() is not null);
                await getWebsiteConfig(GetOriginUri()!);
                StateHasChanged();
            }
            else
            {
                throw new Exception("No Identifiers found");
            }
        };
    }

    async Task getWebsiteConfig(Uri uri)
    {
        logger.LogInformation("getWebsiteConfig uri: {uri}", uri);
        var x = await websiteConfigService.GetOrCreateWebsiteConfig(uri);
        if (x.IsSuccess)
        {
            ThisWebsiteConfig = x.Value;
            // TODO P2 update the getter for the following properties to use this
            IsPrefixRemembered = x.Value.RememberedPrefixOrNothing == SelectedPrefix;
            IsAutoSignIn = x.Value.AutoSignInChoice == AutoSignInMode.Identifier;
            StateHasChanged();
        }
        else
        {
            throw new Exception("No Identifiers found");
        }
    }

    void InitializeOrOnNextPrefs(Preferences prefs)
    {
        AppActivePrefix = prefs.SelectedAid;
        this.StateHasChanged();
    }

    List<Dictionary<string, object>> credentials = new();

    private async Task getCredentials()
    {
        // TODO P2 implement filtering to show only the holder's credentials
        // typescript:  client.credentials().list({ filter: { '-a-i': holderAid.prefix } })
        var res = await signifyClientService.GetCredentials();
        if (res.IsFailed || res.Value is null)
        {
            logger.LogError($"Error: {res.Errors}");
            return;
        }
        else
        {
            credentials = res.Value as List<Dictionary<string, object>>;
            Debug.Assert(credentials is not null);
            logger.LogInformation("Credentials: count {res}", credentials.Count);
            // foreach (Dictionary<string, object> credential in credentials)
            // {
            //     logger.LogInformation("Credential: {credential}", credential);
            //     logger.LogInformation("Credential title: {credential}", DictionaryConverter.GetValueByPath(credential, "schema.title").Value);
            // }
        }
    }

    /*
    / SignRequest()
    */
    async Task SignRequest(SignInMode RequestedSignInMode, string requestId2, string? SelectedName, string payloadJson)
    {
        logger.LogInformation("SignRequest: payloadJson: {d}", payloadJson);

        ApiRequest? request = JsonSerializer.Deserialize<ApiRequest>(payloadJson);
        if (request is null)
        {
            logger.LogError("SignRequest: Error: {0}", "Invalid payloadJson");
            return;
        }
        logger.LogInformation("SignRequest: request: {d}", request.ToString());

        // var inputHeadersDict = new Dictionary<string, string>();

        // create and send approved sign request to ServiceWorker, which will get signed headers from signify-ts and them to content script
        if (SelectedName is null)
            throw new Exception("SelectedName must not be null here");
        ApprovedSignRequest approvedSignRequest = new(OriginStr, request.Url,request.Method, null, SelectedName!);
        ReplyMessageData<ApprovedSignRequest> replyMessageData = new("ApprovedSignRequest", approvedSignRequest, requestId2, null, "KERI Auth");
        await appSwMessagingService.SendToServiceWorkerAsync<ApprovedSignRequest>(replyMessageData);

        UIHelper.CloseWindow();
    }

    async Task Cancel()
    {
        var replyMessageData = new ReplyMessageData<AuthorizeResult>(
            "/KeriAuth/signify/replyCancel",
            new AuthorizeResult(null, null),
            requestId: RequestId,
            null,
            "KeriAuth"
        );
        await appSwMessagingService.SendToServiceWorkerAsync<AuthorizeResult>(replyMessageData);
        // Close blazor application
        UIHelper.CloseWindow();
    }

    public void Dispose()
    {
        // TODO P4 unsubscribe from services, observables
        ;
    }

    // TODO P4 remove or create helper?
    static bool IsJsonValid(string jsonString)
    {
        try
        {
            // Attempt to parse the JSON string
            var jsonDocument = JsonDocument.Parse(jsonString);
            return true;
        }
        catch (JsonException ex)
        {
            // JSON parsing failed, likely due to improper escaping or formatting
            Console.WriteLine($"JSON Parsing Error: {ex.Message}");
            return false;
        }
    }

    private Dictionary<string, object>? SelectedCredential;

    private bool IsExpanded = false;

    protected override void OnInitialized()
    {
        // SelectedCredential = new Dictionary<string, object>();
    }

    private void ToggleExpand()
    {
        IsExpanded = !IsExpanded;
    }

    private void SelectCredential(Dictionary<string, object> item)
    {
        if (SelectedCredential == item)
        {
            IsExpanded = false;
        }
        else
        {
            SelectedCredential = item;
            IsExpanded = false;
        }
    }

    private string ExpandIcon => IsExpanded ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore;

    private string GetCredentialItemClass(Dictionary<string, object> item)
    {
        return item == SelectedCredential ? "selected-item" : String.Empty;
    }
}

<div id="@this.GetType().Name" class="bt-body-page">
    <MudStack Class="bt-main">
        <div class="bt-main-inside-scroll">
            <MudText Typo="Typo.h6">Request to Sign</MudText>
            <MudText Typo="Typo.body1"><em>@OriginStr</em></MudText>
            <MudText class="mt-6" Typo="Typo.body1">
                This website is requesting you to cryptographically sign a request header, which will allow it to verify your identity in subsequent interactions with the specified service.<br />
            </MudText>
            <MudText Class="my-3" Typo="Typo.body1">
                Details:
            </MudText>
            <MudPaper>
                <MudText Typo="Typo.body1">@PayloadJson</MudText>
            </MudPaper>
        </div>
    </MudStack>
    <MudStack Row="true" class="bt-button-tray">
        <MudSpacer />
        <MudButton StartIcon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled" Color="Color.Tertiary" @onclick="Cancel">Cancel</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.Login" Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => await SignRequest(RequestedSignInMode, RequestId, SelectedAidAlias, PayloadJson)">Sign Request</MudButton>
    </MudStack>
</div>

<style>
    .mud-select .mud-select-input .mud-input-slot {
        height: auto;
    }

    .selected-item {
        border-left: 4px solid blue;
    }
</style>