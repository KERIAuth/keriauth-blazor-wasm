@page "/Delete"
@using KeriAuth.BrowserExtension.Services
@inject IJSRuntime js
@inject NavigationManager navManager
@inject IStorageService storageService
@inject IStateService stateService
@using static KeriAuth.BrowserExtension.AppConfig;
@inject IDialogService dialogService
@inject ILogger<DeletePage> logger
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@using static KeriAuth.BrowserExtension.Helper.UIHelper

<div id="@this.GetType().Name" class="bt-body-page">
    <div class="d-flex gap-3 bt-main">
        <div class="bt-main-inside-scroll">
            <MudText Typo="Typo.h6">Delete Local Configuration</MudText>
            <MudStack class="d-flex mt-2 justify-center">
                <MudText>Are you sure you want to delete your local configuration? </MudText>
                <MudText>
                    If in the future you want to reconnect to your same KERI Agent Service to access your agent, identifiers, credentials, and other data there, make sure you have its URLs and your passphrase safely recorded.
                </MudText>
            </MudStack>
        </div>
    </div>
    <MudStack Row="true" class="bt-button-tray">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="async () => await DeleteWallet()" Class="justify-end">Delete</MudButton>
    </MudStack>
</div>

@code {
    private async Task DeleteWallet()
    {
        bool isRemoveConfirmed;

        // show a dialog to confirm deletion
        var result = await dialogService.ShowMessageBox(
            "Delete Wallet",
            $"Are you sure you want to delete your local configuration?",
            yesText: "Yes, Delete",
            cancelText: "Cancel",
             options: new DialogOptions()
                 {
                     CloseOnEscapeKey = true,
                 }
         );
        // TODO P3 delete confirmation should not delete when a return is entered.
        isRemoveConfirmed = result.GetValueOrDefault();
        if (isRemoveConfirmed)
        {
            await storageService.Clear();
            RestartBlazorApp(RouteToIndex);
            // TODO P4 consider the following instead:
            // NavManager.NavigateTo(RouteToIndex, new NavigationOptions()
            //     {
            //         ForceLoad = true,
            //         ReplaceHistoryEntry = true
            //     });
        } else
        {
            navManager.NavigateTo(RouteToHome);
        }
    }
}