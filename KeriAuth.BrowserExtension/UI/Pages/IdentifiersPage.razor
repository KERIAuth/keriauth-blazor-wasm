@page "/Identifiers"
@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.AppConfig;
@using System.Diagnostics

@implements IDisposable;
@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService
@inject NavigationManager navManager
@inject IJSRuntime js
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@inject ILogger<IdentifiersPage> logger
@inject IdentifiersService identifiersService;
@inject ISignifyClientService signifyClientService;
@inject IDialogService dialogService
@inject ISnackbar snackbar

<div id="@this.GetType().Name" class="bt-body-page">
    <MudStack Class="bt-main">
        <div class="bt-main-inside-scroll">
            <MudText Typo="Typo.h6">Identifiers (@cachedAids.Count)</MudText>
            @foreach (CachedAid cachedAid in cachedAids)
            {
                <MudLink OnClick="() => navManager.NavigateTo(RouteToIdentifier)">
                    <MudCard Class="py-0 my-1">
                        <div class="d-flex" style=@("align-items:center; " + @cardClass((string)ActiveAid, cachedAid.Prefix))>
                            <MudTooltip Text="Set Identifier as active" Delay="1000">
                                <MudButton OnClick="async () => await SetActiveAid(cachedAid.Prefix)">
                                    <MudIcon ViewBox="0 0 100 100" Icon="@cachedAid.Identicon" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                                </MudButton>
                            </MudTooltip>
                            <MudText Typo="Typo.h6">@cachedAid.Alias</MudText>
                        </div>
                    </MudCard>
                </MudLink>
            }
            @if (IsAddingAid)
            {
                <div style="display:flex; align-items: center; justify-content:center; position:absolute; z-index:999; top:50%; left:50%; transform: translate(-50%, -50%); width:300px; height:200px;  ">
                    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                </div>
            }
        </div>
    </MudStack>
    <MudStack Row="true" class="bt-button-tray">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
        <MudSpacer />
        <MudButton StartIcon="@Icons.Material.Filled.Add" Disabled="@IsAddingAid" OnClick="async () => await AddIdentifier()" Variant="Variant.Filled" Color="Color.Primary">Add Identifier</MudButton>
    </MudStack>
</div>

@code {
    private bool IsAddingAid { get; set; }
    private string ActiveAid { get; set; } = string.Empty;

    public void Dispose()
    {
        preferencesSubscription?.Dispose();
    }

    async void HandleNextFromPreferencesService(Preferences value)
    {
        await Task.Run(() => InitializeOrOnNextPrefs(value));
    }

    async void HandleErrorFromPreferencesService(Exception error)
    {
        await Task.Run(() => logger.LogInformation("Error from PreferencesService: " + error.Message));
    }

    async void HandleCompletedFromPreferencesService()
    {
        await Task.Run(() => logger.LogInformation("Completed from PreferencesService"));
    }

    IDisposable? preferencesSubscription;

    List<CachedAid> cachedAids = new List<CachedAid>();

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await Task.Delay(0);
        logger.LogInformation($"OnInitializedAsync");
        preferencesSubscription = preferencesService.Subscribe(
           onNext: (Preferences value) => HandleNextFromPreferencesService(value),
           onError: (Exception error) => HandleErrorFromPreferencesService(error),
           onCompleted: () => HandleCompletedFromPreferencesService());
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        logger.LogInformation($"OnParametersSetAsync");
        var prefs = await preferencesService.GetPreferences();
        InitializeOrOnNextPrefs(prefs);
        await GetHeadlines();
    }

    private async Task GetHeadlines()
    {
        logger.LogInformation("GetHeadlines");
        var res = await identifiersService.GetIdentifierHeadlines();
        if (res != null)
        {
            logger.LogInformation("GetIdentifierHeadlines: {1}", res.Value.Count);
            cachedAids.Clear();
            foreach (var item in res.Value)
            {
                // logger.LogWarning("adding aid {1}", item.Prefix);
                cachedAids.Add(new CachedAid(item.Prefix, item.Alias, Guid.NewGuid()));
            }
            cachedAids = cachedAids.OrderBy(a => a.Alias).ToList();
        };
    }

    private async Task AddIdentifier()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                BackdropClick = false,
                CloseButton = true,
                Position = DialogPosition.Center,
            };
        var dialog = dialogService.Show<AddIdentifierDialog>("Add Identifier", parameters, options);
        var result = await dialog.Result;
        if (result is null || result.Canceled)
        {
            DialogResult = "Dialog was cancelled";
        }
        else
        {
            DialogResult = $"Dialog result: {result.Data}";
            logger.LogInformation("AddIdentifier: {1}", result.Data);
            IsAddingAid = true;
            StateHasChanged();
            var res = await identifiersService.Add(result.Data?.ToString() ?? String.Empty);
            await Task.Delay(1000);  // Simulate delay to show and test spinner. Can remove later.
            if (res.IsFailed || res.Value is null)
            {
                logger.LogError("AddIdentifier failed: {e}", string.Join("; ", res.Errors.Select(e => e.Message)));
                snackbar.Add("Failed to add identifier", Severity.Error);
            }
            else
            {
                logger.LogInformation("AddIdentifier: {1}", res.Value);
                await GetHeadlines();
                var prefs = await preferencesService.GetPreferences();
                await preferencesService.SetPreferences(prefs with { SelectedAid = res.Value });
            }
        }
        IsAddingAid = false;
        StateHasChanged();
    }

    void InitializeOrOnNextPrefs(Preferences prefs)
    {
        ActiveAid = prefs.SelectedAid;
        this.StateHasChanged();
    }

    public static string cardClass(string activeAid2, string rowIdentifier) =>
        (string)activeAid2 == rowIdentifier ? "border-left: 4px solid var(--mud-palette-primary);" : "border-left: 4px solid transparent;";

    // Set ActiveDid based on value of activeDidIdentifier,
    // retrieved from picker or via preferences
    async Task SetActiveAid(string identifier)
    {
        var prefs2 = await preferencesService.GetPreferences();
        prefs2 = prefs2 with { SelectedAid = identifier };
        await preferencesService.SetPreferences(prefs2);
        // Other side-effects will be reactive to subscribed updates of Preferences
    }

    private string DialogResult { get; set; } = "unknown";
}