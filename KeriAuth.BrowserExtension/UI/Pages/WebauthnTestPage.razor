@page "/Webauthn"
@layout Layouts.MainLayout

@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@using static KeriAuth.BrowserExtension.AppConfig;
@using static KeriAuth.BrowserExtension.Helper.UIHelper;
@using static KeriAuth.BrowserExtension.Services.SignifyService.SignifyServiceConfig
@using FluentResults
@using JsBind.Net
@using JsBind.Net.Configurations
@using System.Diagnostics;
@using System.Text.Json;
@using System.Text.Json.Nodes
@using Blazor.BrowserExtension
@using WebExtensions.Net
@using WebExtensions.Net.Runtime
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using JsonSerializer = System.Text.Json.JsonSerializer
@using static System.Net.WebRequestMethods
@using System.ComponentModel.DataAnnotations
@using System.Linq
@using System.Text
@using System.Security.Cryptography

@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject ILogger<WebauthnTestPage> logger
@inject HttpClient http
@inject NavigationManager navManager
@inject IJSRuntime js
@inject ISignifyClientService signifyClientService
@inject ISnackbar snackbar
@inject IWebExtensionsApi webExtensionsApi

@code {
    async Task createCred()
    {
        await WebauthnCredentialWithPRF.CreateCred();
    }

    async Task createAndStoreCredential()
    {
        await WebauthnCredentialWithPRF.CreateAndStoreCredential();
        logger.LogInformation("createAndStoreCredential done");
    }

    async Task RegisterCredential()
    {
        await WebauthnCredentialWithPRF.RegisterCredential();
    }

    async Task authenticateCredential()
    {
        await WebauthnCredentialWithPRF.AuthenticateCredential();
    }
}

<div id="@this.GetType().Name" class="bt-body-page">
    <div class="d-flex gap-3 bt-main" style="justify-content:center;">
        <MudStack>
            <MudButton OnClick="createAndStoreCredential">CreateAndStoreCredential</MudButton>
            <hr />
            <MudButton OnClick="RegisterCredential">RegisterCredential</MudButton>
            <hr />
            <MudButton OnClick="authenticateCredential">authenticateCredential</MudButton>
        </MudStack>
    </div>
</div>