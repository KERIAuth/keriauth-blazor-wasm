@page "/Start"

@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@using static KeriAuth.BrowserExtension.AppConfig;
@using static KeriAuth.BrowserExtension.Helper.UIHelper;
@using static KeriAuth.BrowserExtension.Services.SignifyService.SignifyServiceConfig
@using FluentResults
@using JsBind.Net
@using JsBind.Net.Configurations
@using System.Diagnostics;
@using System.Text.Json;
@using System.Text.Json.Nodes
@using Blazor.BrowserExtension
@using Microsoft.AspNetCore.WebUtilities
@using System.Web
@using WebExtensions.Net
@using WebExtensions.Net.Runtime
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using JsonSerializer = System.Text.Json.JsonSerializer
@using static System.Net.WebRequestMethods;
@using System.ComponentModel.DataAnnotations
@using System.Linq;
@using System.Text;
@using System.Security.Cryptography;

@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject ILogger<StartPage> logger
@inject HttpClient http
@inject NavigationManager navManager
@inject IJSRuntime js
@inject ISignifyClientService signifyClientService
@inject ISnackbar snackbar

<!--
<div id="@this.GetType().Name" class="bt-body-page">
    <div class="d-flex gap-3 bt-main" style="justify-content:center;">
    </div>
</div>
-->

<style>

    /* for a MudStack */
    .bt-create-card-top-scrollable {
        flex-wrap: wrap;
        flex-direction: column;
        /* width:-webkit-fit-content; */
    }

    /* for a MudStack */
    .bt-create-card-top-centered {
        margin: auto;
        width: fit-content;
        padding-right: 16px !important; /* since there is no room needed scrollbar here */
        flex-wrap: wrap;
        align-content: flex-start;
        flex-direction: row;
        align-content: center;
        justify-content: center;
        align-items: center;
    }

    /* Print button placed to the right edge of Terms of Use or Privacy Policy title */
    .bt-terms-button {
        padding: 0;
        display: flex;
        justify-content: flex-end;
        overflow: visible;
        color: var(--mud-palette-primary);
        top: 41px;
        right: 10px;
    }

    .wordCard {
        display: flex;
        min-width: 90px;
        margin: 0 10px 10px 0;
    }

    .wordNumber {
        font-size: x-small;
        min-width: 17px;
        align-self: baseline;
    }

    .wordWord {
        font-weight: bold;
        font-size: larger;
        align-self: baseline;
    }

    #bt-terms-and-privacy {
        overflow-x: hidden;
        padding-right: 8px;
    }

        #bt-terms-and-privacy h1 {
            color: var(--mud-palette-primary);
        }

        #bt-terms-and-privacy ul {
            list-style-type: disc;
            margin-left: 36px;
        }

    ul {
        list-style-type: disc;
        margin-left: 36px;
    }

</style>

@code {
    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation($"OnInitializedAsync");
        await base.OnInitializedAsync();
        // See also OnParametersSetAsync for additional initialization occuring on every navigation to this view
        initialUriQuery = extensionEnvironmentService.InitialUriQuery;
    }

    string? initialUriQuery;

    private static readonly KeriaConnectConfig defaultKeriaConnectConfig = new KeriaConnectConfig(AppConfig.DefaultKeriaConnectAlias, AppConfig.DefaultKeriaAdminUrl, AppConfig.DefaultKeriaBootUrl, 0);

    private KeriaConnectConfig? keriaConnectConfig;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        logger.LogInformation("OnParametersSetAsync");


        logger.LogError($"Chrome URI query: {initialUriQuery}");

        // Get the onboardState from storage and route to the appropriate onboarding views if needed
        var res = await storageService.GetItem<OnboardState>();
        OnboardState? onboardState;
        if (res.IsFailed || res.Value is null)
        {
            onboardState = new OnboardState();
            await storageService.SetItem<OnboardState>(onboardState);
        }
        else
        {
            onboardState = res.Value;
        }
        if (!onboardState.IsInstallOnboarded())
        {
            if (!onboardState.HasAcknowledgedInstall)
            {
                navManager.NavigateTo(RouteToWelcome);
                return;
            }

            if (!onboardState.HasAcknowledgedNewVersion)
            {
                navManager.NavigateTo(RouteToNewRelease);
                return;
            }

            if (onboardState.PrivacyAgreedHash == 0 || onboardState.TosAgreedHash == 0)
            {
                navManager.NavigateTo(RouteToTerms);
                return;
            }
        }

        // Not that we know install is onboarded, get the configState from storage and route to ConfigureView if needed
        var res2 = await storageService.GetItem<KeriaConnectConfig>();
        // logger.LogWarning(res2.ToString()); ///////////)
        if (res2.IsFailed || res2.Value is null)
        {
            keriaConnectConfig = defaultKeriaConnectConfig;
            await storageService.SetItem<KeriaConnectConfig>(keriaConnectConfig);
        }
        else
        {
            keriaConnectConfig = res2.Value;
        }
        if (!keriaConnectConfig.IsConfigured())
        {
            // logger.LogWarning(keriaConnectConfig.ToString()); ///////////
            navManager.NavigateTo(RouteToConfigure);
            return;
        }

        // Now that we know the KERIA connection is configured, get the current AppState and route to the appropriate view
        var currentAppState = stateService.GetState();

        logger.LogError($"currentAppState: {currentAppState}");
        logger.LogError($"Chrome URI query: {initialUriQuery}");
        initialUriQuery = HttpUtility.UrlDecode(initialUriQuery);
        logger.LogError($"Chrome URI query decoded: {initialUriQuery}");
        var initialUriQuery2 = HttpUtility.UrlDecode(initialUriQuery);
        logger.LogError($"Chrome URI query decoded 2: {initialUriQuery2}");
        switch (currentAppState)
        {
            case IStateService.States.Unconfigured:
                // TODO hack to get the app into a known state
                await stateService.Configure();
                navManager.NavigateTo(RouteToUnlock);
                return; // intentional return here versus break?

            case IStateService.States.Unauthenticated:
                navManager.NavigateTo(RouteToUnlock);
                return;

            case IStateService.States.AuthenticatedDisconnected:
                navManager.NavigateTo(RouteToConnecting);
                return;

            case IStateService.States.AuthenticatedConnected:

                // TODO temporary code to handle select-identifier message (Chrome URI query message)

                if (QueryHelpers.ParseQuery(initialUriQuery).TryGetValue("message", out var message))
                {

                    logger.LogInformation("Chrome URI query message decoded2: {msg}", initialUriQuery2);

                    if (QueryHelpers.ParseQuery(initialUriQuery2).TryGetValue("origin", out var encodedOrigin))
                    {
                        if (encodedOrigin.FirstOrDefault() is null)
                        {
                            logger.LogError("OnParametersSetAsync: Encoded origin not found in decodedMsg: {dm}", initialUriQuery);
                        }
                        else
                        {
                            var origin = HttpUtility.UrlEncode(encodedOrigin.FirstOrDefault());
                            logger.LogInformation("OnParametersSetAsync: Origin: {origin}", origin);
                            navManager.NavigateTo(RouteToRequestSignIn + origin);
                            return;
                        }
                    }
                    else
                    {
                        logger.LogError("OnParametersSetAsync: Encoded origin not found in decodedMsg: {dm}", initialUriQuery2);
                    }
                }
                navManager.NavigateTo(RouteToHome);
                return;

            default:
                throw new Exception($"Unexpected AppState {currentAppState}");
        }
    }
}