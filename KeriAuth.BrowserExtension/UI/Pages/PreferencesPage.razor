@page "/ManagePreferences"
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.Services
@using System.Reactive.Linq
@inject IStateService stateService
@inject NavigationManager navManager
@inject IPreferencesService preferencesService
@using static KeriAuth.BrowserExtension.AppConfig;
@inject IJSRuntime js
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@inject ILogger<PreferencesPage> logger

@code
{
    // most values on this page are reactive to changes via preferencesServices subscription in App
    [CascadingParameter]
    public Preferences Prefs { get; set; } = new Preferences();

    enum DrawerVariantSupportedInTab
    {
        Persistent = MudBlazor.DrawerVariant.Persistent,
        Temporary = MudBlazor.DrawerVariant.Temporary,
        Responsive = MudBlazor.DrawerVariant.Responsive
        // Mini = MudBlazor.DrawerVariant.Mini, // has layout issues
    }

    // fields and types
    // TODO P2 move this to AppConfig
    private List<string> AvailableTransportOptions = ["usb", "nfc", "ble", "internal", "hybrid"];

    // properties

    // reactive properties

    List<string> SelectedTransportOptions = []; // => Prefs.SelectedTransportOptions ?? [];
    float InactivityTimeout => Prefs.InactivityTimeoutMinutes;
    string InactivityTimeoutLabel => InactivityTimeout.ToString() + " " + (InactivityTimeout <= 1.0f ? "minute" : "minutes");
    bool IsDarkTheme => Prefs.IsDarkTheme;
    MudBlazor.DrawerVariant DrawerVariantInTab => Prefs.DrawerVariantInTab;
    List<string> PersistedTransportOptions => Prefs.SelectedTransportOptions;

    // TODO P3 set these criteria to enums and use those
    string userVerification => Prefs.UserVerification;
    string residentKey => Prefs.ResidentKey;
    string authenticatorAttachment => Prefs.AuthenticatorAttachment;
    string attestation => Prefs.Attestation;
    string SelectedTransportOptionsList => string.Join(", ", PersistedTransportOptions);

    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation("OnInitializedAsync");
    }

    async Task Persist(Preferences prefs)
    {
        await preferencesService.SetPreferences(prefs);
    }

    async Task SetAndPersistIsDarkTheme(bool isDarkTheme)
    {
        await Persist(Prefs with { IsDarkTheme = isDarkTheme });
    }

    async Task SetAndPersistDVIT(DrawerVariant dv)
    {
        await Persist(Prefs with { DrawerVariantInTab = dv });
    }

    async Task SetAndPersistInactivityTimeout(float inactivityTimeout)
    {
        await Persist(Prefs with { InactivityTimeoutMinutes = inactivityTimeout });
    }

    async Task SetAndPersistUserVerification(string v)
    {
        await Persist(Prefs with { UserVerification = v });
    }

    async Task SetAndPersistResidentKey(string v)
    {
        await Persist(Prefs with { ResidentKey = v });
    }

    async Task SetAndPersistauthenticatorAttachment(string v)
    {
        await Persist(Prefs with { AuthenticatorAttachment = v });
    }

    async Task SetAndPersistAttestation(string v)
    {
        await Persist(Prefs with { Attestation = v });
    }

    private async Task UpdateSelection(string transport, bool isChecked)
    {
        List<string> newSelection = PersistedTransportOptions.ToList();
        if (isChecked && !PersistedTransportOptions.Contains(transport))
        {
            await Persist(Prefs with { SelectedTransportOptions = newSelection.Append(transport).ToList() });
        }
        else if (!isChecked && PersistedTransportOptions.Contains(transport))
        {
            await Persist(Prefs with { SelectedTransportOptions = newSelection.Where(item => item != transport).ToList() });
        }
        StateHasChanged();
    }

    private readonly List<string> AllHints = new() { "hybrid", "security-key", "client-device" };

    private List<string> SelectedHints
    {
        get => Prefs.SelectedHints;
        set
        {
            UpdatePrefsWithSelectedHints(value);
        }
    }

    private async void UpdatePrefsWithSelectedHints(List<string> selectedHints)
    {
        await Persist(Prefs with { SelectedHints = selectedHints });
        StateHasChanged();
    }

    private void AddHint(string hint)
    {
        var updatedHints = SelectedHints.ToList();
        updatedHints.Add(hint);
        SelectedHints = updatedHints;
    }

    private void RemoveHint(string hint)
    {
        var updatedHints = SelectedHints.ToList();
        updatedHints.Remove(hint);
        SelectedHints = updatedHints;
    }

    private void MoveUp(string hint)
    {
        var updatedHints = SelectedHints.ToList();
        var index = updatedHints.IndexOf(hint);
        if (index > 0)
        {
            updatedHints.RemoveAt(index);
            updatedHints.Insert(index - 1, hint);
            SelectedHints = updatedHints;
        }
    }

    private void MoveDown(string hint)
    {
        var updatedHints = SelectedHints.ToList();
        var index = updatedHints.IndexOf(hint);
        if (index < updatedHints.Count - 1)
        {
            updatedHints.RemoveAt(index);
            updatedHints.Insert(index + 1, hint);
            SelectedHints = updatedHints;
        }
    }

    private bool IsFirst(string hint) => SelectedHints.IndexOf(hint) == 0;
    private bool IsLast(string hint) => SelectedHints.IndexOf(hint) == SelectedHints.Count - 1;

    // Available hints exclude those already selected
    private IEnumerable<string> AvailableHints => AllHints.Except(SelectedHints);

}

<div id="@this.GetType().Name" class="bt-body-page">
    <div class="d-flex gap-3 bt-main">
        <div class="bt-main-inside-scroll">
            <MudText Typo="Typo.h6">Preferences</MudText>
            <MudStack>
                <MudText Class="bt-pref-group-label0">
                    Theme
                </MudText>
                <MudStack Row="true" Style="margin-left:20px;">
                    <MudIcon Icon="@Icons.Material.Filled.WbSunny" Title="Light" Class="mt-2"></MudIcon>
                    <MudSwitch Value="IsDarkTheme" ValueChanged="async (bool isOn) => await SetAndPersistIsDarkTheme(isOn)" T="bool" Color="Color.Primary" Class="mr-n2 mb-6" Style="margin-bottom: 0px !important; margin-left: 5px;" />
                    <MudIcon Icon="@Icons.Material.Filled.Nightlight" Title="Dark" Class="mt-2"></MudIcon>
                </MudStack>
            </MudStack>
            <MudStack Row="false">
                <MudText Class="bt-pref-group-label0">
                    Menu Mode
                </MudText>
                <MudStack Row="false" Style="width:200px; margin-left:20px;">
                    <MudSelect T="DrawerVariant" MultiSelection="false" Value="DrawerVariantInTab" ValueChanged="async (DrawerVariant a) => await SetAndPersistDVIT(a)" Label="In Browser Tab" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        @foreach (DrawerVariant item in Enum.GetValues(typeof(DrawerVariantSupportedInTab)))
                        {
                            <MudSelectItem Value="item">@item</MudSelectItem>
                        }
                    </MudSelect>
                </MudStack>
            </MudStack>

            <MudStack Row="false">
                <MudText Class="bt-pref-group-label0">
                    Inactivity Timeout
                </MudText>
                <MudStack Row="false" Style="width:200px; margin-left:20px;">
                    <MudSlider T="float" Value="InactivityTimeout" ValueChanged="async (float v) => await SetAndPersistInactivityTimeout(v)" Min="0.5f" Max="5" Step="0.5f" />
                    <p>@InactivityTimeoutLabel</p>
                </MudStack>
            </MudStack>


            <MudStack Row="false" Class="pt-3 gap-0">
                <MudText Class="bt-pref-group-label0">
                    Webauthn Authenticator Requirements
                </MudText>
                <MudStack Row="false" Class="bt-pref-stack1">
                    <MudText Class="bt-pref-group-label1">
                        Registration Settings
                    </MudText>

                    <MudText Class="bt-pref-group-label2">
                        Resident Key
                    </MudText>
                    <MudRadioGroup T="string" Value="residentKey" ValueChanged="async (string v) => await SetAndPersistResidentKey(v)" Class="bt-pref-radiogroup">
                        <MudRadio Value=@("required") Class="bt-pref-radio">Required</MudRadio>
                        <MudRadio Value=@("preferred") Class="bt-pref-radio">Preferred</MudRadio>
                        <MudRadio Value=@("discouraged") Class="bt-pref-radio">Discouraged</MudRadio>
                    </MudRadioGroup>

                    <MudText Class="bt-pref-group-label2">
                        Attachment
                    </MudText>
                    <MudRadioGroup T="string" Value="authenticatorAttachment" ValueChanged="async (string v) => await SetAndPersistauthenticatorAttachment(v)" Class="bt-pref-radiogroup">
                        <MudRadio Value=@("platform") Class="bt-pref-radio">Platform</MudRadio>
                        <MudRadio Value=@("cross-platform") Class="bt-pref-radio">Cross-Platform</MudRadio>
                        <MudRadio Value=@("undefined") Class="bt-pref-radio">All Supported ("undefined")</MudRadio>
                    </MudRadioGroup>

                    <MudText Class="bt-pref-group-label2">
                        User Verification
                    </MudText>
                    <MudRadioGroup T="string" Value="userVerification" ValueChanged="async (string v) => await SetAndPersistUserVerification(v)" Class="bt-pref-radiogroup">
                        <MudRadio Value=@("required") Class="bt-pref-radio">Required</MudRadio>
                        <MudRadio Value=@("preferred") Class="bt-pref-radio">Attempted ("preferred")</MudRadio>
                        <MudRadio Value=@("discouraged") Class="bt-pref-radio">Skipped ("discouraged")</MudRadio>
                    </MudRadioGroup>

                    <MudText Class="bt-pref-group-label2">
                        Require Attestation of Authenticator's Provenance
                    </MudText>
                    <MudRadioGroup T="string" Value="attestation" ValueChanged="async (string v) => await SetAndPersistAttestation(v)" Class="bt-pref-radiogroup">
                        <MudRadio Value=@("enterprise") Class="bt-pref-radio">Full Attestation of Individual Device ("enterprise")</MudRadio>
                        <MudRadio Value=@("direct") Class="bt-pref-radio">Full Attestation ("direct")</MudRadio>
                        <MudRadio Value=@("indirect") Class="bt-pref-radio">Attestation Allowing Anonymity ("indirect")</MudRadio>
                        <MudRadio Value=@("none") Class="bt-pref-radio">None</MudRadio>
                    </MudRadioGroup>

                    <MudText Class="bt-pref-group-label2">
                        Hints
                    </MudText>
                    <MudStack Row="false" Class="bt-pref-radiogroup">
                        <MudText>Selected (most to least preferred)</MudText>
                        @if (SelectedHints.Count == 0)
                        {
                            <MudText Typo="Typo.body1" Class="ml-3">(none)</MudText>
                        }
                        else
                        {
                            <MudList Dense="true" T="string">
                                @foreach (var hint in SelectedHints)
                                {
                                    <MudListItem Style="background:var(--mud-palette-background); height:32px; width:fit-content;">
                                        <MudStack Row="true">
                                            <MudText Typo="Typo.body1" Style="width: 95px; align-self:center;">@hint</MudText>
                                            <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" Color="Color.Primary" Disabled="@IsFirst(hint)" OnClick="() => MoveUp(hint)" />
                                            <MudIconButton Icon="@Icons.Material.Filled.ArrowDownward" Color="Color.Primary" Disabled="@IsLast(hint)" OnClick="() => MoveDown(hint)" />
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Primary" OnClick="() => RemoveHint(hint)" />
                                        </MudStack>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                        <MudText>Available</MudText>
                        @if (AvailableHints.Count() == 0)
                        {
                            <MudText Typo="Typo.body1" Class="ml-3">(none)</MudText>
                        }
                        else
                        {
                            <MudList Dense="true" T="string">
                                @foreach (var hint in AvailableHints)
                                {
                                    <MudListItem Style="background:var(--mud-palette-background); height:32px; width:fit-content;">
                                        <MudStack Row="true">
                                            <MudText Typo="Typo.body1" Style="width: 95px; align-self:center;">@hint</MudText>
                                            <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Primary" OnClick="() => AddHint(hint)" />
                                        </MudStack>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                    </MudStack>

                    <!-- TODO P2 either get this hidden div working or delete any use of TransportOptions -->
                    <div style="display:none;">
                        <MudText Class="bt-pref-group-label1">
                            Authentication Setting
                        </MudText>

                        <MudText Class="bt-pref-group-label2">
                            Transports
                        </MudText>
                        <MudStack Row="true" Class="bt-pref-radiogroup">
                            @foreach (var transport in AvailableTransportOptions)
                            {
                                <MudCheckBox T="bool" Label="@transport" Value="@PersistedTransportOptions.Contains(transport)"
                                             ValueChanged="async (bool isChecked) => await UpdateSelection(transport, isChecked)" />
                            }
                            <p>Selected Transports: @SelectedTransportOptionsList</p>
                        </MudStack>
                    </div>
                </MudStack>


            </MudStack>
        </div>
    </div>
    <MudStack Row="true" class="bt-button-tray">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
        <MudSpacer />
    </MudStack>
</div>

<style>
    .bt-pref-radiogroup {
        padding-left: 60px;
    }

    .bt-pref-radio {
    }

    .bt-pref-group-label0 {
        font-weight: bold;
        padding-top: 16px;
    }

    .bt-pref-group-label1 {
        padding-left: 10px;
    }

    .bt-pref-group-label2 {
        padding-left: 40px;
    }

    .bt-pref-stack1 {
        width: auto;
        margin-left: 20px;
        gap: 0;
    }
</style>