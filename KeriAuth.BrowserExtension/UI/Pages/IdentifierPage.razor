@page "/Identifier/{prefix?}"

@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.AppConfig;
@using static KeriAuth.BrowserExtension.Helper.Identicon;
@using System.Diagnostics
@using System.Text.Json

@using System.Net.Http.Json
@inject HttpClient httpClient

@implements IDisposable;
@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService
@inject NavigationManager navManager
@inject IJSRuntime js
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@inject ILogger<IdentifierPage> logger
@inject IdentifiersService identifiersService;
@inject ISignifyClientService signifyClientService;
@inject IDialogService dialogService
@inject ISnackbar snackbar

<div id="@this.GetType().Name" class="bt-body-page">
    <div class="d-flex gap-3 bt-main">
        <div class="bt-main-inside-scroll">
            <MudText Typo="Typo.h6">Identifier</MudText>
            @if (!string.IsNullOrEmpty(Prefix))
            {
                <MudStack Row Class="pb-3">
                    <MudTooltip Text="Set Identifier as active" Delay="1000">
                        <MudButton OnClick="async () => await SetActiveAid(Prefix)">
                            <MudIcon ViewBox="0 0 100 100" Icon="@Identicon" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                        </MudButton>
                    </MudTooltip>
                    <MudStack Style="width:100%;">
                        <MudStack Row>
                            <MudTooltip Text="Alias" Delay="1000">
                                <MudText Style="font-weight:bold">@Alias</MudText>
                            </MudTooltip>
                            <MudSpacer />
                            <MudButton StartIcon="@Icons.Material.Filled.Edit" Disabled="@IsWaiting" OnClick="async () => await Task.Delay(0)" Variant="Variant.Text" Color="Color.Primary" Class="pa-0"></MudButton>
                        </MudStack>
                        <MudTooltip Text="Autonomous Identifier (AID) Prefix" Delay="1000">
                            <Ellipsis StringContent="@Prefix" MaxLength="999" IncludeCopyIcon="true"></Ellipsis>
                        </MudTooltip>
                    </MudStack>
                </MudStack>

                <MudExpansionPanels MultiExpansion>
                    <MudExpansionPanel Class="my-3">
                        <TitleContent>
                            <MudText>
                                Delegatee for Identifiers (2)
                            </MudText>
                        </TitleContent>
                        <ChildContent>
                            <MudStack>
                                <MudText>2 identities delegated signing authority to you.</MudText>
                                @{
                                    /*
                                    <MudTable>
                                    <HeaderContent>
                                    <MudTh>Alias</MudTh>
                                    <MudTh>Identicon</MudTh>
                                    <MudTh>Prefix</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                    <MudTd>Delegator</MudTd>
                                    <MudTd>Delegator Alias</MudTd>
                                    <MudTd>
                                    <MudIcon ViewBox="0 0 100 100" Icon="@Identicon" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                                    </MudTd>
                                    <MudTd>
                                    <Ellipsis StringContent="@Prefix" MaxLength="999" IncludeCopyIcon="true"></Ellipsis>
                                    </MudTd>
                                    <MudTd>
                                    <Ellipsis StringContent="0x1234123411" MaxLength="999" IncludeCopyIcon="true"></Ellipsis>
                                    </MudTd>
                                    </RowTemplate>
                                    </MudTable>
                                    */
                                }
                            </MudStack>
                        </ChildContent>
                    </MudExpansionPanel>
                    <MudExpansionPanel Class="my-3">
                        <TitleContent>
                            <MudText>Key State</MudText>
                        </TitleContent>
                        <ChildContent>
                            @if (IsTransferrable)
                            {
                                <MudText>Signing control is transferable</MudText>
                            }
                            else
                            {
                                <MudText>Signing control is not transferable</MudText>
                            }
                            <MudExpansionPanel>
                                <TitleContent>
                                    <MudText>Signing Keys (@Elements.Count())</MudText>
                                </TitleContent>
                                <ChildContent>
                                    <MudText>Threshold = 4</MudText>
                                    <MudTable Items="@Elements">
                                        <HeaderContent>
                                            <MudTh Class="py-0 my-0">Group</MudTh>
                                            <MudTh Class="py-0 my-0">Group Threshold</MudTh>
                                            <MudTh Class="py-0 my-0">Weight</MudTh>
                                            <MudTh Class="py-0 my-0">Public Key Hash Icon</MudTh>
                                            <MudTh Class="py-0 my-0">Public Key</MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd Class="py-0 my-0">@context.Group</MudTd>
                                            <MudTd Class="py-0 my-0">@context.GroupThreshold</MudTd>
                                            <MudTd Class="py-0 my-0">@context.Weight / @context.GroupThreshold</MudTd>
                                            <MudTd Class="py-0 my-0">
                                                @{
                                                    /* TODO could we know in advance what the aid would be? */
                                                }
                                                <MudIcon ViewBox="0 0 100 100" Icon="@context.Identicon" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                                            </MudTd>
                                            <MudTd Class="py-0 my-0">
                                                <Ellipsis StringContent="@context.PubKey" MaxLength="999" IncludeCopyIcon="true"></Ellipsis>
                                            </MudTd>
                                        </RowTemplate>
                                    </MudTable>
                                </ChildContent>
                            </MudExpansionPanel>

                            <MudExpansionPanel>
                                <TitleContent>
                                    <MudText>Delegatees (1)</MudText>
                                </TitleContent>
                                <ChildContent>
                                    <MudText>You delegated signing authority to 1 delegatee(s).</MudText>
                                    @foreach (var item in new List<string>(){"1111", "2222"})
                                    {
                                        <MudText>@item</MudText>
                                    }
                                    <MudButton StartIcon="@Icons.Material.Filled.PersonRemove" OnClick="async () => await UpdateKeyState()" Variant="Variant.Filled" Color="Color.Primary">Revoke Delegatee</MudButton>
                                    <MudButton StartIcon="@Icons.Material.Filled.PersonAddAlt1" OnClick="async () => await UpdateKeyState()" Variant="Variant.Filled" Color="Color.Primary">Add Delegatee</MudButton>
                                </ChildContent>
                            </MudExpansionPanel>

                            <MudExpansionPanel>
                                <TitleContent>
                                    <MudText>Key Update Authorities (@Elements2.Count())</MudText>
                                </TitleContent>
                                <ChildContent>
                                    <MudText>Total Threshold = 4</MudText>
                                    <MudTable Items="@Elements2">
                                        <HeaderContent>
                                            <MudTh Class="py-0 my-0">Group</MudTh>
                                            <MudTh Class="py-0 my-0">Group Threshold</MudTh>
                                            <MudTh Class="py-0 my-0">Weight</MudTh>
                                            <MudTh Class="py-0 my-0">Public Key Hash Icon</MudTh>
                                            <MudTh Class="py-0 my-0">Public Key Hash</MudTh>
                                            <MudTh Class="py-0 my-0">Actions</MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd Class="py-0 my-0">@context.Group</MudTd>
                                            <MudTd Class="py-0 my-0">@context.GroupThreshold</MudTd>
                                            <MudTd Class="py-0 my-0">@context.Weight / @context.GroupThreshold</MudTd>
                                            <MudTd Class="py-0 my-0">
                                                <MudIcon ViewBox="0 0 100 100" Icon="@context.Identicon" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                                            </MudTd>
                                            <MudTd Class="py-0 my-0">
                                                <Ellipsis StringContent="@context.PubKey" MaxLength="999" IncludeCopyIcon="true"></Ellipsis>
                                            </MudTd>
                                            <MudTd Class="py-0 my-0">
                                                @if (@context.PubKey == @Elements2.First().PubKey)
                                                {
                                                    // TODO: remove hack that shows action only on first row as an example
                                                    <MudButton StartIcon="@Icons.Material.Filled.Update" OnClick="async () => await UpdateKeyState()" Variant="Variant.Filled" Color="Color.Primary">Initiate Update</MudButton>
                                                }
                                            </MudTd>
                                        </RowTemplate>
                                    </MudTable>
                                </ChildContent>
                            </MudExpansionPanel>
                            <MudExpansionPanel>
                                <TitleContent>
                                    <MudText>Witnesses (3)</MudText>
                                </TitleContent>
                            </MudExpansionPanel>
                            <MudExpansionPanel>
                                <TitleContent>
                                    <MudText>More...</MudText>
                                </TitleContent>
                                <ChildContent>
                                    <MudText>Oobis, Endroles, Members, Registries, Contacts, Credentials, Exchanges, Multisig, Ipex, ... See http://localhost:3901/spec.yaml</MudText>
                                </ChildContent>
                            </MudExpansionPanel>
                        </ChildContent>
                    </MudExpansionPanel>

                    <MudExpansionPanel Class="my-3">
                        <TitleContent>
                            <MudText>Key Events (@KeyEvents.Count())</MudText>
                        </TitleContent>
                        <ChildContent>
                            <MudTable Items="@KeyEvents.Reverse()">
                                <HeaderContent>
                                    <MudTh Class="py-0 my-0">Sequence</MudTh>
                                    <MudTh Class="py-0 my-0">Event Type</MudTh>
                                    <MudTh Class="py-0 my-0">DateTime</MudTh>
                                    <MudTh Class="py-0 my-0">Details</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd Class="py-0 my-0">@context.Seq</MudTd>
                                    <MudTd Class="py-0 my-0">@context.EventType</MudTd>
                                    <MudTd Class="py-0 my-0">@context.DateTime</MudTd>
                                    <MudTd Class="py-0 my-0"><MudLink Href="">&hellip;</MudLink></MudTd>
                                </RowTemplate>
                            </MudTable>
                        </ChildContent>
                    </MudExpansionPanel>
                </MudExpansionPanels>

                @if (IsWaiting)
                {
                    <div style="display:flex; align-items: center; justify-content:center; position:absolute; z-index:999; top:50%; left:50%; transform: translate(-50%, -50%); width:300px; height:200px;  ">
                        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                    </div>
                }
            }
        </div>
    </div>
    <MudStack Row="true" class="bt-button-tray">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
        <MudSpacer />
        <!--
        <MudButton StartIcon="@Icons.Material.Filled.Add" Disabled="@IsWaiting" OnClick="async () => await AddIdentifier()" Variant="Variant.Filled" Color="Color.Primary">Add Identifier</MudButton>
        -->
    </MudStack>
</div>

@code {
    [Parameter]
    public string? Prefix { get; set; }

    private bool IsWaiting { get; set; }
    private string ActiveAid { get; set; } = string.Empty;
    private string Identicon { get; set; } = string.Empty;

    public void Dispose()
    {
        preferencesSubscription?.Dispose();
    }

    async void HandleNextFromPreferencesService(Preferences value)
    {
        await Task.Run(() => InitializeOrOnNextPrefs(value));
    }

    async void HandleErrorFromPreferencesService(Exception error)
    {
        await Task.Run(() => logger.LogInformation("Error from PreferencesService: " + error.Message));
    }

    private record Element
    {
        public int Group { get; init; }
        public int GroupThreshold { get; init; }
        public int Weight { get; init; }
        public string? Identicon { get; init; }
        public string? PubKey { get; init; }
    }

    private IEnumerable<Element> Elements = new List<Element>()
    {
        new Element() { Group = 1, GroupThreshold = 3, Weight = 2, Identicon = MakeIdenticon("asdf"), PubKey = "0x1234123411" },
        new Element() { Group = 1, GroupThreshold = 3, Weight = 1, Identicon = MakeIdenticon("asdf3"), PubKey = "0x1234123411" },
        new Element() { Group = 1, GroupThreshold = 3, Weight = 1, Identicon = MakeIdenticon("asdf0x123412345"), PubKey = "0x1234123422" },
        new Element() { Group = 2, GroupThreshold = 1, Weight = 1, Identicon = MakeIdenticon("asdx1234653x3"), PubKey = "0x1234123433" },
        new Element() { Group = 2, GroupThreshold = 1, Weight = 1, Identicon = MakeIdenticon("asdx1234653sx3"), PubKey = "0x1234123444" }
    };

    private IEnumerable<Element> Elements2 = new List<Element>()
    {
        new Element() { Group = 1, GroupThreshold = 4, Weight = 2, Identicon = MakeIdenticon("erty"), PubKey = "0x1234123411777" },
        new Element() { Group = 1, GroupThreshold = 4, Weight = 2, Identicon = MakeIdenticon("rtyurtyu"), PubKey = "0x1234123411888" },
        new Element() { Group = 1, GroupThreshold = 4, Weight = 2, Identicon = MakeIdenticon("tyuityuityui"), PubKey = "0x1234123422999" },
        new Element() { Group = 1, GroupThreshold = 4, Weight = 1, Identicon = MakeIdenticon("dfght6u456"), PubKey = "0x1234123433000" },
        new Element() { Group = 1, GroupThreshold = 4, Weight = 1, Identicon = MakeIdenticon("asdx1234653sx3"), PubKey = "0x123412344411" }
    };

    private IEnumerable<KeyEvent> KeyEvents = new List<KeyEvent>()
        {
        new KeyEvent() { Seq = 1, EventType = "inception", DateTime = DateTime.Now - new TimeSpan(20,0,0,0), Details = "details" },
        new KeyEvent() { Seq = 2, EventType = "rotate", DateTime = DateTime.Now - new TimeSpan(10,0,0,0), Details = "details" },
        new KeyEvent() { Seq = 3, EventType = "delegate", DateTime = DateTime.Now - new TimeSpan(5,0,0,0), Details = "details" },
        new KeyEvent() { Seq = 4, EventType = "prod", DateTime = DateTime.Now - new TimeSpan(2,0,0,0), Details = "details" },
        new KeyEvent() { Seq = 5, EventType = "rotate", DateTime = DateTime.Now - new TimeSpan(0,1,0,0), Details = "details" }
    };

    private record KeyEvent
    {
        public int Seq { get; init; }
        public string EventType { get; init; } = "";
        public DateTime DateTime { get; init; }
        public string Details { get; init; } = "";
    }

    async Task UpdateKeyState()
    {
        await Task.Delay(0);
        snackbar.Add("Not implemented", Severity.Error);
    }

    async void HandleCompletedFromPreferencesService()
    {
        await Task.Run(() => logger.LogInformation("Completed from PreferencesService"));
    }

    IDisposable? preferencesSubscription;

    List<CachedAid> cachedAids = new List<CachedAid>();

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        await Task.Delay(0);
        logger.LogInformation($"OnInitializedAsync");
        preferencesSubscription = preferencesService.Subscribe(
           onNext: (Preferences value) => HandleNextFromPreferencesService(value),
           onError: (Exception error) => HandleErrorFromPreferencesService(error),
           onCompleted: () => HandleCompletedFromPreferencesService());
    }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        logger.LogInformation($"OnParametersSetAsync");

        var prefs = await preferencesService.GetPreferences();
        InitializeOrOnNextPrefs(prefs);
        logger.LogInformation(JsonSerializer.Serialize(prefs));
        if (string.IsNullOrEmpty(Prefix))
        {
            Prefix = prefs.SelectedAid;
        }
        Identicon = Helper.Identicon.MakeIdenticon(Prefix);
        await GetHeadlines();
        var AliasOrNothing = cachedAids.FirstOrDefault(a => a.Prefix == Prefix)?.Alias;
        if (AliasOrNothing is not null)
        {
            Alias = AliasOrNothing;
        }
        var MaybeAidRes = await signifyClientService.GetIdentifier(Alias);
        if (MaybeAidRes is null || MaybeAidRes.IsFailed)
        {
            logger.LogWarning("GetIdentifier failed: {1}", MaybeAidRes?.Errors.ToArray().ToString() ?? "unknown error");
        }
        else
        {
            // intentionaly overwrite Prefix with the one from the response
            Prefix = MaybeAidRes.Value.Prefix;
            IsTransferrable = MaybeAidRes.Value.Transferable;
        }
    }

    private bool IsTransferrable { get; set; }
    private string Alias { get; set; } = string.Empty;

    private async Task GetHeadlines()
    {
        logger.LogInformation("GetHeadlines");
        var res = await identifiersService.GetIdentifierHeadlines();
        if (res != null)
        {
            logger.LogInformation("GetIdentifierHeadlines: {1}", res.Value.Count);
            cachedAids.Clear();
            foreach (var item in res.Value)
            {
                // logger.LogWarning("adding aid {1}", item.Prefix);
                cachedAids.Add(new CachedAid(item.Prefix, item.Alias, Guid.NewGuid()));
            }
            cachedAids = cachedAids.OrderBy(a => a.Alias).ToList();
        };
    }

    void InitializeOrOnNextPrefs(Preferences prefs)
    {
        ActiveAid = prefs.SelectedAid;
        this.StateHasChanged();
    }

    public static string cardClass(string activeAid2, string rowIdentifier) =>
        (string)activeAid2 == rowIdentifier ? "border-left: 4px solid var(--mud-palette-text-primary);" : "";

    // Set ActiveDid based on value of activeDidIdentifier,
    // retrieved from picker or via preferences
    async Task SetActiveAid(string identifier)
    {
        var prefs2 = await preferencesService.GetPreferences();
        prefs2 = prefs2 with { SelectedAid = identifier };
        await preferencesService.SetPreferences(prefs2);
        // Other side-effects will be reactive to subscribed updates of Preferences
    }

    private string DialogResult { get; set; } = "unknown";
}