@page "/Website/{encodedOrigin}"
@layout Layouts.MainLayout

@using System.Linq
@using System.Text.Json
@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.UI.Pages
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.AppConfig
@using System.Diagnostics
@using Microsoft.AspNetCore.WebUtilities
@using MudBlazor
@using FluentResults
@using System.Web
@using System.Text.Json.Serialization
@using System;
@using System.Collections.Generic;

@inject IStorageService storageService
@inject IStateService stateService
@inject NavigationManager navManager
@inject IJSRuntime js
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@inject ILogger<WebsitesPage> logger
@inject IdentifiersService identifiersService
@inject ISignifyClientService signifyClientService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inject IWebsiteConfigService websiteConfigService
@inject IStorageService storageService
@inject IPreferencesService preferencesService
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject IAppSwMessagingService appSwMessagingService
@inject IJSRuntime jsRuntime

@code {
    // parameters
    [Parameter] public required string encodedOrigin { get; init; }

    // fields

    // properties

    // reactive properties
    string OriginStr => HttpUtility.UrlDecode(encodedOrigin).Trim().Trim('"');

    protected override async Task OnInitializedAsync()
    {
        ;
    }

    protected override async Task OnParametersSetAsync()
    {
        ;
    }

    async Task Delete()
    {
        var res = await websiteConfigService.Delete(new Uri(OriginStr));
        if (res is not null && res.IsSuccess)
        {
            snackbar.Add("Successfully deleted website config", Severity.Success);
            await GoBack(js);
        } else
        {
            snackbar.Add("Failed to delete website config", Severity.Error);
        }
    }
}

<div id="@this.GetType().Name" class="bt-body-page">
    <MudStack Class="bt-main">
        <div class="bt-main-inside-scroll">
            <MudText Typo="Typo.h6">Website</MudText>
            <WebsiteConfigDisplay OriginStr="@OriginStr" IsOriginShown="true" IsCredentialShown="true" IsAutoSignShown="false" />
        </div>
    </MudStack>
    <MudStack Row="true" class="bt-button-tray">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@(async () => await GoBack(js))' Class="justify-start" />
        <MudSpacer></MudSpacer>
        <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Error" OnClick="Delete">Delete</MudIconButton>
    </MudStack>
</div>