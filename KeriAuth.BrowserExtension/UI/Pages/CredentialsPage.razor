@page "/Credentials"
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using KeriAuth.BrowserExtension.UI.Components
@using System.Collections.Immutable
@using System.Diagnostics
@using static KeriAuth.BrowserExtension.AppConfig;
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@using KeriAuth.BrowserExtension.Helper.DictionaryConverters


@inject NavigationManager navManager
@inject IJSRuntime js
@inject ILogger<CredentialsPage> logger
@inject ISignifyClientService signifyClientService;

<div id="@this.GetType().Name" class="bt-body-page">
    <div class="d-flex gap-3 bt-main">
        <div class="bt-main-inside-scroll">

            <div style="display:flex;">
                <MudText Typo="Typo.h6">Credentials Held</MudText>
                <MudTooltip Delay="0.5"
                            Text="">
                    <MudIcon Icon="@Icons.Material.Outlined.Info" Class="bt-info-icon" />
                </MudTooltip>
            </div>
            <MudStack Class="d-flex justify-center">
                @if (credentials.Any())
                {
                    <MudStack>
                        @{
                            foreach (var credential in credentials)
                            {
                                <MudCard>
                                    <MudStack>

                                        @{
                                            string x = " ";
                                            try
                                            {
                                                x = DictionaryConverter.GetValueByPath(credential, "schema.title").Value.ToString();
                                            }
                                            catch (Exception _)
                                            {
                                            }
                                            finally
                                            {
                                                <MudText>@x</MudText>
                                            }
                                        }

                                        @{
                                            /*
                                            DictionaryConverter.GetValueByPath(credential, "schema.properties.a.oneOf[1].properties.personLegalName").Value"):
                                            */
                                            string y = " ";
                                            try
                                            {

                                                y = DictionaryConverter.GetValueByPath(credential, "sad.a.personLegalName").Value.ToString();

                                            }
                                            catch (Exception _)
                                            {

                                            }
                                            finally
                                            {
                                                <MudText>@y</MudText>
                                            }
                                        }

                                        @{
                                            string z = " ";
                                            try
                                            {
                                                z = @DictionaryConverter.GetValueByPath(credential, "schema.properties.a.oneOf[1].properties.engagementContextRole").Value.ToString();
                                            }
                                            catch (Exception _)
                                            {
                                            }
                                            finally
                                            {
                                                <MudText>@z</MudText>
                                            }
                                        }
                                    </MudStack>
                                </MudCard>
                            }
                        }
                    </MudStack>
                }
                else
                {
                    <MudChip Label="true">No credentials found.</MudChip>
                }
            </MudStack>
        </div>
    </div>
    <MudStack Row="true" class="bt-button-tray">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
        <MudSpacer></MudSpacer>
    </MudStack>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation($"OnInitializedAsync");

        await getCredentials();
    }

    List<Dictionary<string, object>> credentials = new();

    private async Task getCredentials()
    {
        var res = await signifyClientService.GetCredentials();
        if (res.IsFailed || res.Value is null)
        {
            logger.LogError($"Error: {res.Errors}");
            return;
        }
        else
        {
            credentials = res.Value as List<Dictionary<string, object>>;
            Debug.Assert(credentials is not null);
            logger.LogInformation("Credentials: count {res}", credentials.Count);
            // foreach (Dictionary<string, object> credential in credentials)
            // {
            //     logger.LogInformation("Credential: {credential}", credential);
            //     logger.LogInformation("Credential title: {credential}", DictionaryConverter.GetValueByPath(credential, "schema.title").Value);
            // }
        }
    }
}