@page "/Credentials"
@layout Layouts.MainLayout

@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using KeriAuth.BrowserExtension.UI.Components
@using System.Collections.Immutable
@using System.Diagnostics
@using static KeriAuth.BrowserExtension.AppConfig;
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@using KeriAuth.BrowserExtension.Helper.DictionaryConverters
@using System.Text.Json
@using static KeriAuth.BrowserExtension.Helper.Identicon;


@inject NavigationManager navManager
@inject IJSRuntime js
@inject ILogger<CredentialsPage> logger
@inject ISignifyClientService signifyClientService;

<div id="@this.GetType().Name" class="bt-body-page">
    <MudStack Class="bt-main">
        <div class="bt-main-inside-scroll">
            <div style="display:flex;">
                <MudText Typo="Typo.h6">Credentials @CountLabel</MudText>
                <MudTooltip Delay="0.5"
                            Text="">
                    <MudIcon Icon="@Icons.Material.Outlined.Info" Class="bt-info-icon" />
                </MudTooltip>
            </div>
            @if (credentials is not null)
            {
                <MudStack Class="d-flex justify-center">
                    @if (credentials.Any())
                    {
                        <MudStack>
                            @foreach (var credential in credentials)
                            {
                                <CredentialDisplay credential="@credential" displayDetail="@CredentialDisplay.CredentialDisplayDetail.Typical" />
                            }
                        </MudStack>
                    }
                    else
                    {
                        <MudCard>No credentials found.</MudCard>
                    }
                </MudStack>
            }
        </div>
    </MudStack>
    <MudStack Row="true" class="bt-button-tray">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
        <MudSpacer></MudSpacer>
    </MudStack>
</div>

@code {
    // fields
    List<Dictionary<string, object>>? credentials;

    // reactive properties
    string CountLabel => credentials is not null ? "(" + credentials.Count + ")" : "";

    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation($"OnInitializedAsync");

        await getCredentials();
    }
        
    private async Task getCredentials()
    {
        // TODO P3 implement filtering to show only the holder's credentials
        // typescript:  client.credentials().list({ filter: { '-a-i': holderAid.prefix } })
        var res = await signifyClientService.GetCredentials();
        if (res.IsFailed || res.Value is null)
        {
            credentials = new();
            logger.LogError($"Error: {res.Errors}");
            return;
        }
        else
        {
            credentials = res.Value as List<Dictionary<string, object>>;
        }
    }
}