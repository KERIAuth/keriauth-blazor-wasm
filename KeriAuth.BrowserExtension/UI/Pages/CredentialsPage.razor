@page "/Credentials"
@layout Layouts.MainLayout

@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using KeriAuth.BrowserExtension.UI.Components
@using System.Collections.Immutable
@using System.Diagnostics
@using static KeriAuth.BrowserExtension.AppConfig;
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@using KeriAuth.BrowserExtension.Helper.DictionaryConverters
@using System.Text.Json
@using static KeriAuth.BrowserExtension.Helper.Identicon
@using KeriAuth.BrowserExtension.Models
@using Microsoft.AspNetCore.Components

@inject NavigationManager navManager
@inject IJSRuntime js
@inject ILogger<CredentialsPage> logger
@inject ISignifyClientService signifyClientService

@code {
    [CascadingParameter]
    public Preferences Prefs { get; set; } = new Preferences();

    // fields
    List<Dictionary<string, object>> credentials = new();

    // properties
    bool IsFiltered { get; set; } = true;
    bool IsCredentialsFetched;
    List<Dictionary<string, object>> DisplayedCredentials => IsFiltered ? FilteredCredentials : credentials;

    // reactive properties
    Preferences PrefsOrDefault => Prefs ?? new Preferences();
    string CountLabel => (DisplayedCredentials is not null) ? "(" + DisplayedCredentials.Count() + ")" : "...";
    List<Dictionary<string, object>> FilteredCredentials => (credentials is null || PrefsOrDefault.SelectedPrefix is null) ? new List<Dictionary<string, object>>() : WebsiteConfigDisplay.filterCredentials(credentials, [("sad.a.i", PrefsOrDefault.SelectedPrefix)]);
    string Identicon => Helper.Identicon.MakeIdenticon(PrefsOrDefault.SelectedPrefix);

    protected override async Task OnInitializedAsync()
    {
        // logger.LogInformation($"OnInitializedAsync");
    }

    protected override async Task OnParametersSetAsync()
    {

        var selectedPrefix = PrefsOrDefault.SelectedPrefix;
        await getCredentials();
        IsCredentialsFetched = true;
        StateHasChanged();
    }

    // TODO P2 DRY with other invocations of GetCredentials
    private async Task getCredentials()
    {
        var res = await signifyClientService.GetCredentials();
        if (res.IsFailed || res.Value is null)
        {
            logger.LogWarning($"Error: {res.Errors}");
            return;
        }
        else
        {
            credentials = res.Value as List<Dictionary<string, object>>;
        }
    }

    private void setIsFiltered(bool b)
    {
        IsFiltered = b;
        StateHasChanged();
    }
}


<div id="@this.GetType().Name" class="bt-body-page">
    <MudStack Class="bt-main">
        <div class="bt-main-inside-scroll">
            <div style="display:flex;">
                <MudStack Row="true">
                    <MudText Typo="Typo.h6">Credentials</MudText>
                    <MudText Typo="Typo.h6">@CountLabel</MudText>
                    <MudTooltip Delay="0.5"
                                Text="">
                        <MudIcon Icon="@Icons.Material.Outlined.Info" Class="bt-info-icon" />
                    </MudTooltip>
                </MudStack>
            </div>

            @if (IsCredentialsFetched)
            {
                <MudCheckBox T="bool" Value="IsFiltered" ValueChanged="(bool b) => setIsFiltered(b)">
                    <MudStack Row="true" Style="align-items:center;">
                        <MudText>Only show credentials issued to selected identifier</MudText>
                        <MudIcon ViewBox="0 0 100 100" Icon="@Identicon" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                        <MudText Style="word-break:break-all;">@PrefsOrDefault.SelectedPrefix</MudText>
                    </MudStack>
                </MudCheckBox>

                <MudStack Class="d-flex justify-center">
                    @if (credentials.Any())
                    {
                        <MudStack>
                            @foreach (var credential in DisplayedCredentials)
                            {
                                <CredentialDisplay credential="@credential" displayDetail="@CredentialDisplay.CredentialDisplayDetail.Typical" />
                            }
                        </MudStack>
                    }
                    else
                    {
                        <MudCard>No credentials found.</MudCard>
                    }
                </MudStack>
            }
        </div>
    </MudStack>
    <MudStack Row="true" class="bt-button-tray">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
        <MudSpacer></MudSpacer>
    </MudStack>
</div>