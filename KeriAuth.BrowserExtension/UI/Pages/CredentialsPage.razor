@page "/Credentials"
@layout Layouts.MainLayout

@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using KeriAuth.BrowserExtension.UI.Components
@using System.Collections.Immutable
@using System.Diagnostics
@using static KeriAuth.BrowserExtension.AppConfig;
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@using KeriAuth.BrowserExtension.Helper.DictionaryConverters
@using System.Text.Json
@using static KeriAuth.BrowserExtension.Helper.Identicon;


@inject NavigationManager navManager
@inject IJSRuntime js
@inject ILogger<CredentialsPage> logger
@inject ISignifyClientService signifyClientService;

<div id="@this.GetType().Name" class="bt-body-page">
    <MudStack Class="bt-main">
        <div class="bt-main-inside-scroll">
            <div style="display:flex;">
                <MudText Typo="Typo.h6">Credentials (@(credentials.Count))</MudText>
                <MudTooltip Delay="0.5"
                            Text="">
                    <MudIcon Icon="@Icons.Material.Outlined.Info" Class="bt-info-icon" />
                </MudTooltip>
            </div>
            <MudStack Class="d-flex justify-center">
                @if (credentials.Any())
                {
                    <MudStack>
                        @{
                            foreach (var credential in credentials)
                            {
                                <MudCard>
                                    <MudStack>

                                        @{
                                            string SchemaTitle = " ";
                                            string SchemaDescr = " ";
                                            string dt = " ";
                                            try
                                            {
                                                SchemaTitle = DictionaryConverter.GetValueByPath(credential, "schema.title")?.Value?.ToString() ?? string.Empty;
                                                SchemaDescr = DictionaryConverter.GetValueByPath(credential, "schema.description")?.Value?.ToString() ?? string.Empty;

                                                // Issued date
                                                dt = DictionaryConverter.GetValueByPath(credential, "sad.a.dt")?.Value?.ToString()?.Substring(0, 10) ?? string.Empty;
                                            }
                                            catch (Exception ex)
                                            {
                                                logger.LogError(ex, "Error getting schema title or description or date issued");
                                            }
                                            finally
                                            {
                                                <MudText><b>@SchemaTitle </b><br /><em>@SchemaDescr</em></MudText>
                                                <MudText>Issued: <b>@dt</b></MudText>
                                            }
                                        }

                                        @{
                                            // Issuer
                                            string iLabel = " ";
                                            string iValue = " ";
                                            try
                                            {
                                                iLabel = DictionaryConverter.GetValueByPath(credential, "schema.properties.i.description")?.Value?.ToString() ?? String.Empty;
                                                iValue = DictionaryConverter.GetValueByPath(credential, "sad.i")?.Value.ToString()?.Substring(0, 10) ?? String.Empty;
                                            }
                                            catch (Exception ex)
                                            {
                                                logger.LogError(ex, "Error getting issuer AID or date issued");
                                            }
                                            finally
                                            {
                                                <MudText>@iLabel: <b>@iValue</b></MudText>
                                                <MudIcon ViewBox="0 0 100 100" Icon="@MakeIdenticon(iValue)" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                                            }
                                        }

                                        @{
                                            // Issuee
                                            string personValue = " ";
                                            string personLabel = " ";
                                            string aiLabel = " ";
                                            string iValueValue = " ";

                                            string ecrLabel = " ";
                                            string ecrValue = " ";
                                            try
                                            {
                                                // Get label for personLegalName
                                                var collectionResult = DictionaryConverter.GetValueByPath(credential, "schema.properties.a.oneOf");
                                                var collection = collectionResult?.Value as List<object>;
                                                Debug.Assert(collection is not null && collection.Count > 1);
                                                var secondItem = collection[1] as Dictionary<string, object>;
                                                Debug.Assert(secondItem is not null);
                                                personLabel = DictionaryConverter.GetValueByPath(secondItem, "properties.personLegalName.description")?.Value.ToString() ?? String.Empty;

                                                // Get value for personLegalName
                                                personValue = DictionaryConverter.GetValueByPath(credential, "sad.a.personLegalName")?.Value.ToString() ?? String.Empty;

                                                // get label for i (e.g. Issuee AID or LE Issuer AID (typo in schema?), depending on credential type)
                                                aiLabel = DictionaryConverter.GetValueByPath(secondItem, "properties.i.description")?.Value.ToString() ?? String.Empty;
                                                // get value for i
                                                iValueValue = DictionaryConverter.GetValueByPath(credential, "sad.a.i")?.Value.ToString() ?? String.Empty;

                                                ecrLabel = @DictionaryConverter.GetValueByPath(secondItem, "properties.engagementContextRole.description")?.Value.ToString() ?? String.Empty;
                                                ecrValue = @DictionaryConverter.GetValueByPath(credential, "sad.a.engagementContextRole")?.Value.ToString() ?? String.Empty;
                                            }
                                            catch (Exception ex)
                                            {
                                            logger.LogError(ex, "Error getting personLegalName or i or engagementContextRole");
                                            }
                                            finally
                                            {
                                                <MudText>@personLabel <b>@personValue</b></MudText>
                                                <MudText>@aiLabel <b>@iValueValue</b></MudText>
                                                <MudIcon ViewBox="0 0 100 100" Icon="@MakeIdenticon(iValueValue)" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                                                <MudText>@ecrLabel <b>@ecrValue</b></MudText>
                                            }
                                        }
                                    </MudStack>
                                    <MudIconButton Style="padding: 0px !important;" Size="Size.Small" OnClick="async () => await UIHelper.Copy2Clipboard(JsonSerializer.Serialize(credential))" Icon="@Icons.Material.Filled.ContentCopy" aria-label="delete"></MudIconButton>
                                </MudCard>
                            }
                        }
                    </MudStack>
                }
                else
                {
                    <MudCard>No credentials found.</MudCard>
                }
            </MudStack>
        </div>
    </MudStack>
    <MudStack Row="true" class="bt-button-tray">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
        <MudSpacer></MudSpacer>
    </MudStack>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation($"OnInitializedAsync");

        await getCredentials();
    }

    List<Dictionary<string, object>> credentials = new();

    private async Task getCredentials()
    {
        // TODO implement filtering to show only the holder's credentials
        // typescript:  client.credentials().list({ filter: { '-a-i': holderAid.prefix } })
        var res = await signifyClientService.GetCredentials();
        if (res.IsFailed || res.Value is null)
        {
            logger.LogError($"Error: {res.Errors}");
            return;
        }
        else
        {
            credentials = res.Value as List<Dictionary<string, object>>;
            Debug.Assert(credentials is not null);
            logger.LogInformation("Credentials: count {res}", credentials.Count);
            // foreach (Dictionary<string, object> credential in credentials)
            // {
            //     logger.LogInformation("Credential: {credential}", credential);
            //     logger.LogInformation("Credential title: {credential}", DictionaryConverter.GetValueByPath(credential, "schema.title").Value);
            // }
        }
    }
}