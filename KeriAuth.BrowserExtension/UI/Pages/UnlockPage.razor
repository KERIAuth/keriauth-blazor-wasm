@page "/Unlock"
@layout Layouts.MainLayout

@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@using static KeriAuth.BrowserExtension.AppConfig;
@using static KeriAuth.BrowserExtension.Helper.UIHelper;
@using static KeriAuth.BrowserExtension.Services.SignifyService.SignifyServiceConfig
@using FluentResults
@using JsBind.Net
@using JsBind.Net.Configurations
@using System.Diagnostics;
@using System.Text.Json;
@using System.Text.Json.Nodes
@using Blazor.BrowserExtension
@using WebExtensions.Net
@using WebExtensions.Net.Runtime
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using JsonSerializer = System.Text.Json.JsonSerializer
@using static System.Net.WebRequestMethods
@using System.ComponentModel.DataAnnotations
@using System.Linq
@using System.Text
@using System.Security.Cryptography
@using MudBlazor

@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject ILogger<UnlockPage> logger
@inject HttpClient http
@inject NavigationManager navManager
@inject IJSRuntime js
@inject ISignifyClientService signifyClientService
@inject ISnackbar snackbar
@inject IWebExtensionsApi webExtensionsApi
@inject IWebauthnService webauthnService

@code {
    // fields
    bool isValid;
    MudForm? form;
    string[] errors = { };
    PasscodeModel unlockPasscodeModel = new PasscodeModel();
    MudTextField<string>? passcodeField;
    MudButton? unlockWithAuthenticatorButton;
    string openWalletError = string.Empty;
    KeriaConnectConfig? keriaConnectConfig;
    static bool hasAutoStartedAuthentictor; // static here to survive inactivity timeout lock with good UX

    // properties
    RegisteredAuthenticators RAS { get; set; } = new RegisteredAuthenticators();
    bool PrefersToUseAuthenticator { get; set; } = true; // TODO P2 should remember setting this on the chrome.storage.local, since this desire may be different from machine to machine

    // reactive properties
    string NumberAuthenticatorsLabel => RAS.Authenticators.Count switch
    {
        0 => "No authenticators registered",
        1 => "1 authenticator registered",
        _ => $"{RAS.Authenticators.Count} authenticators registered"
    };
    bool CanUseAuthenticator => RAS.Authenticators.Any();
    bool ShouldUseAuthenticator => CanUseAuthenticator && PrefersToUseAuthenticator;

    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation("OnInitializedAsync");

        // Get the KeriaConnectConfig
        var res = await storageService.GetItem<KeriaConnectConfig>();
        if (res.IsFailed || res.Value is null)
        {
            throw new Exception("Failed to get KeriaConnectConfig");
        }
        keriaConnectConfig = res.Value;

        // Although we should already be unauthenticated, ensure we are, e.g. in case of a refresh or navigating back
        if (stateService.GetState() != IStateService.States.Unauthenticated)
        {
            await stateService.Unauthenticate();
        }

        // check if there are already registeredAuthenticators
        var res2 = await webauthnService.getRegisteredAuthenticators();
        if (res2 is not null)
        {
            RAS = res2;
            StateHasChanged();
            if (ShouldUseAuthenticator)
            {
                // TODO P3 assume the user will want to use a registered if available?
                PrefersToUseAuthenticator = true;
            }
        }
        else
        {
            logger.LogInformation("OnInitializedAsync did not find registeredAuthenticators");
        }
    }

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (ShouldUseAuthenticator)
        {
            if (unlockWithAuthenticatorButton is not null) {
                await unlockWithAuthenticatorButton.FocusAsync();
                // if the user can and should use an authenticator, just start that UX flow, but only once. 
                if (!hasAutoStartedAuthentictor)
                {
                    hasAutoStartedAuthentictor = true;
                    await UnlockWithAuthenticator();
                }
            }
        }
        else
        {
            if (passcodeField is not null)
                await passcodeField!.FocusAsync();
        }
    }

    async Task SetWantToUseAuthenticator(bool b)
    {
        PrefersToUseAuthenticator = b;
    }

    async Task SelectAllText()
    {
        await Task.Delay(1); // minor delay to ensure the focus event completes
        if (passcodeField is not null)
            await passcodeField.SelectAsync();
    }

    async Task HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.CtrlKey && args.Key == "`")
        {
            await OpenWalletWithPasscode("Ap31Xt-FGcNXpkxmBYMQn"); // TODO P1 remove example password for testing
        }
        if (args.Key == "Enter")
        {
            await OpenWallet();
        }
    }

    async Task UnlockWithAuthenticator()
    {
        var passcodeRes = await webauthnService.AuthenticateAKnownCredential();
        if (passcodeRes is null || passcodeRes.IsFailed)
        {
            snackbar.Add("Failed to authenticate", Severity.Warning);
            return;
        }
        await OpenWalletWithPasscode(passcodeRes.Value);
        return;
    }

    async Task OpenWallet()
    {
        if (unlockPasscodeModel.Passcode is not null)
            await OpenWalletWithPasscode(unlockPasscodeModel.Passcode);
    }

    class PasscodeModel
    {
        [Required]
        [StringLength(21, ErrorMessage = "Passcode must be 21 characters", MinimumLength = 21)]
        [DataType(DataType.Password)]
        public string Passcode { get; set; } = "";
    }

    async Task OpenWalletWithPasscode(string password)
    {
        var currentState = stateService.GetState();
        if (currentState != IStateService.States.Unauthenticated)
        {
            // This should not happen. Could log and handle better
            logger.LogWarning($"Unexpected AppState {currentState}");
            await stateService.Initialize();
            await stateService.Configure();
        }

        openWalletError = String.Empty;

        if (string.IsNullOrEmpty(password) || password.Length != 21)
        {
            snackbar.Add("Invalid passcode. Should be 21 characters.", Severity.Error);
            return;
        }
        if (keriaConnectConfig is null
            || !keriaConnectConfig.IsConfigured()
            || keriaConnectConfig.AdminUrl is null)
        {
            throw new InvalidOperationException("KeriaConnectConfig not configured");
        }

        if (GetNumberFromHash.HashInt(password) == keriaConnectConfig.PasscodeHash)
        {
            await webExtensionsApi.Storage.Session.Set(new { passcode = password });
            await webExtensionsApi.Runtime.SendMessage(new { action = "resetInactivityTimer" });
            await stateService.Authenticate(false);
            // logger.LogWarning("returned from Authenticate. pausing...");
            var connectRes = await signifyClientService.Connect(keriaConnectConfig.AdminUrl, password, keriaConnectConfig.BootUrl, false);
            if (connectRes is null || connectRes.IsFailed)
            {
                openWalletError = "Could not connect to KERI Agent";
                snackbar.Add(openWalletError, Severity.Error);
                logger.LogError(openWalletError);
            }
            else
            {
                logger.LogInformation("Connected to KERI Agent");
                await stateService.ConfirmConnected();
            }
            // Stop showing spinner
            navManager.NavigateTo(RouteToIndex);
            return;
        }
        else
        {
            openWalletError = "KERI Auth was not configured with this passcode on this browser profile.";
            snackbar.Add(openWalletError, Severity.Error);
            await passcodeField!.SelectAsync();
            return;
        }
    }
}

<div id="@this.GetType().Name" class="bt-body-page">
    <div class="d-flex gap-3 bt-main" style="justify-content:center;">
        <MudStack Class="d-flex justify-center pa-0" Style="text-align:center; flex-direction: column;">
            <MudStack Style="flex: 1; display:flex; justify-content: center; align-items: center;">
                <MudImage Style="align-self:center;" Fluid="true" Width="190" Class="mx-11" Src="/images/humans_1.png"></MudImage>
                <MudText Typo="Typo.h5">
                    <span style="font-weight:bold; font-variant: small-caps;">KeriAuth</span>
                </MudText>
                <MudText Style="font-style:italic">autonomously authentic</MudText>
            </MudStack>
            <MudStack Style="justify-content: end; min-height:124px; flex-shrink: 0; align-self: stretch;" Class="gap-0">
                @if (ShouldUseAuthenticator)
                {
                    <MudText>
                        @NumberAuthenticatorsLabel
                    </MudText>
                }
                else // passcode
                {
                    <MudForm @ref="form" @bind-IsValid="@isValid" @bind-Errors="@errors" Style="height: 80px;">
                        <MudTextField Label="Passcode"
                                      @ref="passcodeField"
                                      OnKeyDown="@HandleKeyDown"
                                      InputType="InputType.Password"
                                      @bind-Value="@unlockPasscodeModel.Passcode"
                                      HelperText="&nbsp;"
                                      ErrorText="&nbsp;"
                                      For="@(() => unlockPasscodeModel.Passcode)"
                                      Immediate="true"
                                      @onfocus="SelectAllText" />
                    </MudForm>
                }
                <MudText Style="color: var(--mud-palette-action-disabled);"><span style="font-variant: small-caps; font-size:larger;">KeriAuth</span> locks after @AppConfig.IdleTimeoutMins minutes of inactivity</MudText>
            </MudStack>
        </MudStack>
    </div>
    <MudStack Row="true" class="bt-button-tray">
        <MudSpacer />
        @if (ShouldUseAuthenticator)
        {
            <MudButton Variant="Variant.Filled" Class="bt-button-wrap" Color="Color.Secondary" OnClick="() => SetWantToUseAuthenticator(false)">
                Use passcode
            </MudButton>
            <MudButton @ref="unlockWithAuthenticatorButton" Disabled="!CanUseAuthenticator" Class="bt-button-wrap" Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => await UnlockWithAuthenticator()">
                Unlock
            </MudButton>
        }
        else
        {
            <MudButton Disabled="!CanUseAuthenticator" Class="bt-button-wrap" Variant="Variant.Filled" Color="Color.Secondary" OnClick="() => SetWantToUseAuthenticator(true)">
                Use authenticator
            </MudButton>
            <MudButton Disabled="@(!isValid || unlockPasscodeModel.Passcode.Length < 2)" Class="bt-button-wrap" Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => await OpenWallet()">
                Unlock
            </MudButton>
        }
    </MudStack>
</div>