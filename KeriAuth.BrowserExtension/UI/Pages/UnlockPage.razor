@page "/Unlock"
@layout Layouts.MainLayout

@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@using static KeriAuth.BrowserExtension.AppConfig;
@using static KeriAuth.BrowserExtension.Helper.UIHelper;
@using static KeriAuth.BrowserExtension.Services.SignifyService.SignifyServiceConfig
@using FluentResults
@using JsBind.Net
@using JsBind.Net.Configurations
@using System.Diagnostics;
@using System.Text.Json;
@using System.Text.Json.Nodes
@using Blazor.BrowserExtension
@using WebExtensions.Net
@using WebExtensions.Net.Runtime
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using JsonSerializer = System.Text.Json.JsonSerializer
@using static System.Net.WebRequestMethods
@using System.ComponentModel.DataAnnotations
@using System.Linq
@using System.Text
@using System.Security.Cryptography

@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject ILogger<UnlockPage> logger
@inject HttpClient http
@inject NavigationManager navManager
@inject IJSRuntime js
@inject ISignifyClientService signifyClientService
@inject ISnackbar snackbar

<div id="@this.GetType().Name" class="bt-body-page">
    <div class="d-flex gap-3 bt-main" style="justify-content:center;">
        <MudStack Class="d-flex justify-center pa-0" Style="text-align:center;">
            <MudImage Style="align-self:center;" Fluid="true" Width="190" Class="mx-11" Src="/images/humans_1.png"></MudImage>
            <MudText>
                <span style="font-weight:bold">KERI Auth</span>
            </MudText>
            <MudText Style="font-style:italic">autonomous and authentic</MudText>
            <MudForm @ref="form" @bind-IsValid="@isValid" @bind-Errors="@errors">
                <MudTextField Label="Passcode"
                              @ref="passcodeField"
                              OnKeyDown="@HandleKeyDown"
                              InputType="InputType.Password"
                              @bind-Value="@unlockPasscodeModel.Passcode"
                              For="@(() => unlockPasscodeModel.Passcode)"
                              Immediate="true" />
            </MudForm>
            <!-- lengh test below is to avoid a minor UI issue of the Unlock button temporarily enabling while entering initial characters -->
            <MudButton Disabled="@(!isValid || unlockPasscodeModel.Passcode.Length < 2)" Class="mt-0" Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => await OpenWallet()">Unlock</MudButton>
            <MudText>KERI Auth locks after @AppConfig.IdleTimeoutTimeSpanMins minutes of inactivity</MudText>
        </MudStack>
    </div>
    <MudStack Row="true" class="bt-button-tray">
    </MudStack>
</div>

@code {
    // private bool IsLocked = true;
    private bool isValid;
    MudForm? form;
    private string[] errors = { };
    private PasscodeModel unlockPasscodeModel = new PasscodeModel();
    private MudTextField<string>? passcodeField;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        logger.LogInformation("OnInitializedAsync");

        // Get the KeriaConnectConfig
        var res = await storageService.GetItem<KeriaConnectConfig>();
        if (res.IsFailed || res.Value is null)
        {
            throw new Exception("Failed to get KeriaConnectConfig");
        }
        keriaConnectConfig = res.Value;

        // Although we should already be unauthenticated, ensure we are, e.g. in case of a refresh or navigating back
        if (stateService.GetState() != IStateService.States.Unauthenticated)
            await stateService.Unauthenticate();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await passcodeField!.FocusAsync();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await OpenWallet();
        }
    }

    private async Task OpenWallet()
    {
        if (unlockPasscodeModel.Passcode is not null)
            await OpenWalletWithPasscode(unlockPasscodeModel.Passcode);
    }

    // TODO DRY with ConfigureView
    private class PasscodeModel
    {
        [Required]
        [StringLength(21, ErrorMessage = "Passcode must be 21 characters", MinimumLength = 21)]
        [DataType(DataType.Password)]
        public string Passcode { get; set; } = "";
    }

    private string openWalletError = string.Empty;
    private KeriaConnectConfig? keriaConnectConfig;
    private async Task OpenWalletWithPasscode(string password)
    {
        // logger.LogInformation("OpenWalletWithPassword");
        var currentState = stateService.GetState();
        if (currentState != IStateService.States.Unauthenticated)
        {
            logger.LogWarning($"TODO Hack: Unexpected AppState {currentState}");
            await stateService.Initialize();
            await stateService.Configure();
        }

        openWalletError = String.Empty;

        if (string.IsNullOrEmpty(password) || password.Length != 21)
        {
            snackbar.Add("Invalid passcode. Should be 21 characters.", Severity.Error);
            return;
        }
        if (keriaConnectConfig is null
            || !keriaConnectConfig.IsConfigured()
            || keriaConnectConfig.AdminUrl is null
        )
        {
            throw new InvalidOperationException("KeriaConnectConfig not configured");
        }
        if (GetNumberFromHash.HashInt(password) == keriaConnectConfig.PasscodeHash)
        {
            await stateService.Authenticate(false);
            // IsLocked = false;
            // TODO: Start showing a spinner here?
            var res = await signifyClientService.Connect(keriaConnectConfig.AdminUrl, password, keriaConnectConfig.BootUrl, false);
            logger.LogInformation("res: " + res);
            if (res is null || res.IsFailed)
            {
                openWalletError = "Could not connect to KERI Agent";
                snackbar.Add(openWalletError, Severity.Error);
                logger.LogError(openWalletError);
            }
            else
            {
                logger.LogInformation("Connected to KERI Agent");
                await stateService.ConfirmConnected();
            }
            // Stop showing spinner
            navManager.NavigateTo(RouteToStart);
            return;
        }
        else
        {
            openWalletError = "KERI Auth was not configured with this passcode on this browser profile.";
            snackbar.Add(openWalletError, Severity.Error);
            await passcodeField!.SelectAsync();
            return;
        }
    }
}