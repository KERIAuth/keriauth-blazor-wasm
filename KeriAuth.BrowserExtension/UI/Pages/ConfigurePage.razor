@page "/Configure"

@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject ILogger<ConfigurePage> logger
@inject HttpClient httpClient
@inject NavigationManager navManager
@inject IJSRuntime js
@inject ISignifyClientService signifyClientService
@inject ISnackbar snackbar
@inject IJsRuntimeAdapter jsRuntimeAdapter

@code {
    // TODO P2 restructure as a record?
    struct Preset
    {
        public string ProviderName { get; init; }
        public string AgentUrl { get; init; }
        public string BootUrl { get; init; }
        public Preset(string provider, string adminUrl, string bootUrl)
        {
            ProviderName = provider;
            AgentUrl = adminUrl;
            BootUrl = bootUrl;
        }
    }

    class UrlModel
    {
        // TODO P2 add setters that validate these values are a URL.  If not equal to the selected preset, set the preset to "Custom"
        [Required]
        [Url(ErrorMessage = "Enter KERIA Agent Admin URL")]
        public string AdminUrl { get; set; } = AppConfig.DefaultKeriaAdminUrl;

        // TODO P2 see potential password needed for the boot endpoint: https://github.com/WebOfTrust/keria/issues/327
        // TODO P4 consider implementing a custom checker NullableUrl(ErrorMessage = "...")
        // [Url(ErrorMessage = "Enter KERIA Boot URL")]
        public string? BootUrl { get; set; } = AppConfig.DefaultKeriaBootUrl;
    }

    // TODO P3 DRY with UnlockView
    class PasscodeModel
    {
        [Required]
        [StringLength(21, ErrorMessage = "Passcode must be 21 characters long", MinimumLength = 21)]
        [DataType(DataType.Password)]
        public string Passcode { get; set; } = "";
    }

    // fields
    static readonly KeriaConnectConfig defaultKeriaConnectConfig = new KeriaConnectConfig(AppConfig.DefaultKeriaConnectAlias, AppConfig.DefaultKeriaAdminUrl, AppConfig.DefaultKeriaBootUrl, 0);
    static readonly OperationDisplay ops1LivenessCheck = new OperationDisplay("Checking KERI Agent Service liveness", "Live");
    static readonly OperationDisplay ops2HealthCheck = new OperationDisplay("Checking KERI Agent Service health", "Healthy");
    static readonly OperationDisplay ops3BootMaybeAndConnect = new OperationDisplay("Reconnecting to or establishing new connection", "Connected");
    static readonly OperationDisplay ops4ListAids = new OperationDisplay("Retrieving your identifiers", "Identifiers retrieved");
    static readonly OperationDisplay ops5CreatePersonalAid = new OperationDisplay("Creating personal identifier", "Created personal identifier");
    static List<Preset> presetAgents = new List<Preset>
    {
        new Preset("localhost", AppConfig.DefaultKeriaAdminUrl, AppConfig.DefaultKeriaBootUrl),
        new Preset("Roots ID", "https://keria-dev.rootsid.cloud/admin", "https://keria-dev.rootsid.cloud"),
        new Preset("Custom", "", "")
    };
    WebExtensionsApi? webExtensionsApi;
    Preset _presetChoice = presetAgents[0];
    UrlModel urlModel = new UrlModel()
        {
            AdminUrl = AppConfig.DefaultKeriaAdminUrl,
            BootUrl = AppConfig.DefaultKeriaBootUrl
        };
    PasscodeModel configuredPasscodeModel = new PasscodeModel();


    // properties
    KeriaConnectConfig? keriaConnectConfig { get; set; }
    static string InitialAlias { get; set; } = "";
    string RandomPasscode { get; set; } = "";
    bool IsPasscodeCopyConfirmed { get; set; }
    bool IsUsingExistingPasscode { get; set; } = true;
    bool IsProcessing { get; set; }
    Preset PresetChoice
    {
        get
        {
            return _presetChoice;
        }
        set
        {
            _presetChoice = value;
            urlModel.AdminUrl = value.AgentUrl;
            urlModel.BootUrl = value.BootUrl;
        }
    }

    // reactive properties
    bool IsValidAdminURL =>
        !string.IsNullOrWhiteSpace(urlModel.AdminUrl) &&
        Uri.IsWellFormedUriString(urlModel.AdminUrl, UriKind.Absolute);
    bool IsValidBootURL =>
        !string.IsNullOrWhiteSpace(urlModel.BootUrl) &&
        Uri.IsWellFormedUriString(urlModel.BootUrl, UriKind.Absolute);
    bool IsValidNewInfo =>
        IsValidAdminURL
        && !string.IsNullOrWhiteSpace(configuredPasscodeModel.Passcode)
        && configuredPasscodeModel.Passcode.Length == 21
        && (IsUsingExistingPasscode
            || IsValidBootURL
                && (!string.IsNullOrEmpty(InitialAlias)
                && RandomPasscode == configuredPasscodeModel.Passcode
                && IsPasscodeCopyConfirmed)
        );
    bool IsKeriaConfigured => (keriaConnectConfig is not null) && keriaConnectConfig.IsConfigured();
    string BootUrlLabel => IsUsingExistingPasscode ? "Boot URL (optional if you already have account)" : "Boot URL";



    protected override async Task OnInitializedAsync()
    {
        // logger.LogInformation("OnInitializedAsync");
        webExtensionsApi = new WebExtensionsApi(jsRuntimeAdapter);
    }

    async Task SetIsNewAccount(bool isNewAccount)
    {
        // logger.LogInformation("SetUseExistingPasscodeAsync");
        IsUsingExistingPasscode = !isNewAccount;
        RandomPasscode = RandomStringGenerator.GenerateRandomString(21);
        // clear in case radio is toggled after passcode is copied, entered
        configuredPasscodeModel.Passcode = "";
        IsPasscodeCopyConfirmed = false;
        StateHasChanged();
        await Copy2Clipboard(RandomPasscode);
    }

    void HandleOnBlur()
    {
        // This method will be triggered when the text field loses focus
        // You can check for validity here if needed
    }

    async Task<bool> ConnectToKeria()
    {
        logger.LogWarning("ConnectToKeria");
        ops1LivenessCheck.Reset();
        ops2HealthCheck.Reset();
        ops3BootMaybeAndConnect.Reset();
        ops5CreatePersonalAid.Reset();
        ops4ListAids.Reset();

        if (!IsValidNewInfo || IsKeriaConfigured)
        {
            throw new Exception("ConnectToKeria: preconditions not met");
        }

        if (IsValidBootURL)
        {
            // check if BootUrl is reachable.
            ops1LivenessCheck.SetIsRunning();
            StateHasChanged();
            UriBuilder healthUriBuilder = new($"{urlModel.BootUrl}/health");
            var postResult = await signifyClientService.HealthCheck(healthUriBuilder.Uri);
            if (!postResult.IsSuccess)
            {
                var message = $"KERIA service is not reachable";
                logger.LogWarning($"{message} at {healthUriBuilder.Uri}.");
                ops1LivenessCheck.SetCompletedWithError(message);
                return false;
            }
            ops1LivenessCheck.SetCompletedWithoutErrors();
            StateHasChanged();


            // check if KERIA is reporting as healthy
            ops2HealthCheck.SetIsRunning();
            StateHasChanged();
            // TODO P3 move this into service code
            var httpClientService2 = new HttpClientService(new HttpClient());
            var postResult2 = await httpClientService2.GetJsonAsync<String>($"{urlModel.BootUrl}/health");
            if (!postResult2.IsSuccess || postResult2.Value.StatusCode != System.Net.HttpStatusCode.OK)
            {
                ops2HealthCheck.SetCompletedWithError(postResult2.Reasons.First().Message);
                StateHasChanged();
                return false;
            }
            ops2HealthCheck.SetCompletedWithoutErrors();
            if (!ops2HealthCheck.CompletedSuccessfully)
            {
                StateHasChanged();
            }
        }

        // Create a new KERIA client, and on success cache passcode
        ops3BootMaybeAndConnect.SetIsRunning();
        StateHasChanged();
        var clientRes = await signifyClientService.Connect($"{urlModel.AdminUrl}", configuredPasscodeModel.Passcode, $"{urlModel.BootUrl}", !IsUsingExistingPasscode);
        if (clientRes.IsFailed)
        {
            ops3BootMaybeAndConnect.SetCompletedWithError(clientRes.Reasons.First().Message);
            StateHasChanged();
            return false;
        }
        ops3BootMaybeAndConnect.SetCompletedWithoutErrors();
        await webExtensionsApi!.Storage.Session.Set(new { passcode = configuredPasscodeModel.Passcode });
        // await stateService.Configure();
        StateHasChanged();

        // GetIdentifiers
        ops4ListAids.SetIsRunning();
        StateHasChanged();
        var identifiersRes = await signifyClientService.GetIdentifiers();
        if (identifiersRes.IsFailed)
        {
            ops4ListAids.SetCompletedWithError(identifiersRes.Reasons.First().Message);
            StateHasChanged();
            return false;
        }
        var identifiers = identifiersRes.Value;
        // logger.LogWarning("Identifiers: {identifiers}", identifiers.ToString());
        // identifiers.ToList().ForEach(i => logger.LogInformation($"Identifiers: {i}"));
        ops4ListAids.SetCompletedWithoutErrors();
        StateHasChanged();

        // If there are no Identifiers, create one
        if (identifiers.Aids.Count == 0)
        {
            ops5CreatePersonalAid.SetIsRunning();
            StateHasChanged();
            var aidRes = await signifyClientService.RunCreateAid(InitialAlias);
            if (aidRes.IsFailed)
            {
                ops5CreatePersonalAid.SetCompletedWithError(aidRes.Reasons.First().Message);
                StateHasChanged();
                return false;
            }
            // set the selected aid in preferences, e.g. so it shows up in the AppBar as identicon
            var prefs = await preferencesService.GetPreferences();
            await preferencesService.SetPreferences(prefs with { SelectedPrefix = aidRes.Value });
            // logger.LogInformation("Identifier: {aid}", aidRes.Value);
            ops5CreatePersonalAid.SetCompletedWithoutErrors();
            StateHasChanged();
        }
        else
        {
            // we don't need to create another AID, but still pick a default one
            var prefs = await preferencesService.GetPreferences();
            await preferencesService.SetPreferences(prefs with { SelectedPrefix = identifiers.Aids.First().Prefix });
            ops5CreatePersonalAid.SetCompletedWithoutErrors();
            StateHasChanged();
        }


        return true;
    }

    async Task StoreHashAndConnect()
    {
        // logger.LogWarning("StoreHashAndConnect");
        // Since user has confirmed the passcode, we can now hash it and store it once the connection is successful
        IsProcessing = true;
        var isConnected = await ConnectToKeria();
        // logger.LogWarning("StoreHashAndConnect back from ConnectToKeria: {r}", isConnected);
        if (isConnected)
        {
            int tmpHash = GetNumberFromHash.HashInt(configuredPasscodeModel.Passcode);
            keriaConnectConfig = new KeriaConnectConfig("TBD333", urlModel.AdminUrl, urlModel.BootUrl, tmpHash);
            // TODO P2 KeriaConnectConfig should be stored in chrome.storage.sync. Multiple changes required.
            var res = await storageService.SetItem<KeriaConnectConfig>(keriaConnectConfig);
            if (res.IsFailed)
            {
                logger.LogError("Failed to store connection details");
                logger.LogError(res.Reasons.First().Message);
                return;
            }
            await stateService.Configure();
            await stateService.Authenticate(true);
            navManager.NavigateTo(RouteToHome);
            return;
        }
        snackbar.Add("Failed to connect to KERI Agent Service", Severity.Warning);
        await Task.Delay(8000); // TODO P1 tmp
    }
}

<div id="@this.GetType().Name" class="bt-body-page">
    <div class="d-flex gap-3 bt-main">
        <MudStack Style="min-width: 340px; width:100%">
            <MudText Typo="Typo.h6">Configure</MudText>
            <MudStack Class="bt-create-card-top-scrollable">
                <MudText Typo="Typo.h6">KERI Agent Service</MudText>
                <MudSelect T="Preset" Label="Preset" @bind-Value="@PresetChoice">
                    @foreach (var preset in presetAgents)
                    {
                        <MudSelectItem Value="@preset">@preset.ProviderName</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField Label="Agent URL"
                              @bind-Value="@urlModel.AdminUrl"
                              For="@(() => urlModel.AdminUrl)"
                              Immediate="true"
                              OnBlur="@HandleOnBlur" />
                <MudTextField Label="@BootUrlLabel"
                              Required="!IsUsingExistingPasscode"
                              @bind-Value="@urlModel.BootUrl"
                              For="@(() => urlModel.BootUrl)"
                              Immediate="true"
                              OnBlur="@HandleOnBlur" />
                <MudText Typo="Typo.h6">Your KERI Agent Account</MudText>
                <MudRadioGroup T="Boolean" ValueChanged="async (bool v) => await SetIsNewAccount(v)">
                    <MudRadio Value="false">
                        Use existing
                    </MudRadio>
                    <MudRadio Value="true">
                        Create new
                    </MudRadio>
                </MudRadioGroup>
                @if (IsUsingExistingPasscode)
                {
                    <MudTextField Label="Your passcode"
                                  InputType="InputType.Password"
                                  @bind-Value="@configuredPasscodeModel.Passcode"
                                  For="@(() => configuredPasscodeModel.Passcode)"
                                  Immediate="true"
                                  OnBlur="@HandleOnBlur" />

                    // TODO P3 consider adding a Loading Button while connecting. See https://mudblazor.com/components/button#loading-button

                    <MudButton Variant="Variant.Filled" Style="width:fit-content;" OnClick="@(async () => await StoreHashAndConnect())" Disabled="@(!IsValidNewInfo || IsKeriaConfigured )" Color="Color.Primary">Connect</MudButton>
                }
                else // create a new passcode
                {
                    <MudTextField Label="Generated random passcode"
                                  InputType="InputType.Password"
                                  @bind-Value="@RandomPasscode"
                                  ReadOnly="true"
                                  Immediate="true" />
                    // TODO P4 implmement Reveal and CopyToClipboard
                    <MudCheckBox @bind-Value="IsPasscodeCopyConfirmed" Style="overflow-wrap:break-word;">I have copied and stored this passcode in a secure place</MudCheckBox>
                    @if (IsPasscodeCopyConfirmed)
                    {
                        <MudTextField Label="Confirm your passcode"
                                      InputType="InputType.Password"
                                      @bind-Value="@configuredPasscodeModel.Passcode"
                                      For="@(() => configuredPasscodeModel.Passcode)"
                                      Immediate="true"
                                      OnBlur="@HandleOnBlur" />
                        @if (@configuredPasscodeModel.Passcode.Length != 21)
                        {
                            <MudText></MudText>
                        }
                        else if (@configuredPasscodeModel.Passcode != RandomPasscode)
                        {
                            <MudText Color="Color.Error">Passcode does not match</MudText>
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"></MudIcon>
                            <MudTextField Label="Alias for your initial identifier"
                                          InputType="InputType.Text"
                                          @bind-Value="@InitialAlias"
                                          spellcheck="false"
                                          Immediate="true"
                                          HelperText="e.g. <Your name> as <Role name> at <Organization>" />
                            <MudButton Variant="Variant.Filled" Style="width:fit-content;" OnClick="@(async () => await StoreHashAndConnect())" Disabled="@(!IsValidNewInfo || IsKeriaConfigured)" Color="Color.Primary"><MudText>Connect and Create Initial Identifier</MudText></MudButton>
                        }
                    }
                }
                @if (IsProcessing)
                {
                    <MudText Typo="Typo.h6">Connecting...</MudText>
                    <MudStack Class="mt-5">
                        @if (!IsUsingExistingPasscode)
                        {
                            <OperationDisplayComponent ops="@ops1LivenessCheck"></OperationDisplayComponent>
                            <OperationDisplayComponent ops="@ops2HealthCheck"></OperationDisplayComponent>
                        }
                        <OperationDisplayComponent ops="@ops3BootMaybeAndConnect"></OperationDisplayComponent>
                        <OperationDisplayComponent ops="@ops4ListAids"></OperationDisplayComponent>
                        <OperationDisplayComponent ops="@ops5CreatePersonalAid"></OperationDisplayComponent>
                    </MudStack>
                }
            </MudStack>
        </MudStack>
    </div>
    <MudStack Row="true" class="bt-button-tray">
        <!-- Intentionally no back button here -->
        <MudSpacer />
        <MudButton Disabled="@(!IsKeriaConfigured)" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => navManager.NavigateTo(RouteToIndex))" Class="justify-start" data-testid="next">Next</MudButton>
    </MudStack>
</div>
