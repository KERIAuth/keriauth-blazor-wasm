@page "/Configure"

@using KeriAuth.BrowserExtension.Helper

@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@using static KeriAuth.BrowserExtension.AppConfig
@using static KeriAuth.BrowserExtension.Helper.UIHelper
@using static KeriAuth.BrowserExtension.Services.SignifyService.SignifyServiceConfig
@using FluentResults
@using JsBind.Net
@using JsBind.Net.Configurations
@using System.Diagnostics
@using System.Text.Json
@using System.Text.Json.Nodes
@using Blazor.BrowserExtension
@using WebExtensions.Net
@using WebExtensions.Net.Runtime
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using JsonSerializer = System.Text.Json.JsonSerializer
@using static System.Net.WebRequestMethods
@using System.ComponentModel.DataAnnotations
@using System.Linq
@using System.Text
@using System.Security.Cryptography

@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject ILogger<ConfigurePage> logger
@inject HttpClient http
@inject NavigationManager navManager
@inject IJSRuntime js
@inject ISignifyClientService signifyClientService
@inject ISnackbar snackbar

<div id="@this.GetType().Name" class="bt-body-page">
    <div class="d-flex gap-3 bt-main">
        <MudStack Style="min-width: 340px; width:100%">
            <MudText Typo="Typo.h6">Configure</MudText>
            <MudStack Class="bt-create-card-top-scrollable">
                <MudText Typo="Typo.h6">KERI Agent Service</MudText>
                <MudSelect T="Preset" Label="Preset" @bind-Value="@PresetChoice">
                    @foreach (var preset in presetAgents)
                    {
                        <MudSelectItem Value="@preset">@preset.ProviderName</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField Label="Agent URL"
                              @bind-Value="@urlModel.AdminUrl"
                              For="@(() => urlModel.AdminUrl)"
                              Immediate="true"
                              OnBlur="@HandleOnBlur" />
                <MudTextField Label="Boot URL (optional if you already have account)"
                              @bind-Value="@urlModel.BootUrl"
                              For="@(() => urlModel.BootUrl)"
                              Immediate="true"
                              OnBlur="@HandleOnBlur" />
                <MudText Typo="Typo.h6">Your KERI Agent Account</MudText>
                <MudRadioGroup T="Boolean" ValueChanged="async (bool v) => await SetIsNewAccount(v)">
                    <MudRadio Value="false">
                        Use existing
                    </MudRadio>
                    <MudRadio Value="true">
                        Create new
                    </MudRadio>
                </MudRadioGroup>
                @if (UseExistingPasscode)
                {
                    <MudTextField Label="Your passcode"
                                  InputType="InputType.Password"
                                  @bind-Value="@configuredPasscodeModel.Passcode"
                                  For="@(() => configuredPasscodeModel.Passcode)"
                                  Immediate="true"
                                  OnBlur="@HandleOnBlur" />
                    <!-- TODO consider adding a Loading Button while connecting. See https://mudblazor.com/components/button#loading-button -->
                    <MudButton Variant="Variant.Filled" Style="width:fit-content;" OnClick="@(async () => await StoreHashAndConnect())" Disabled="@(!IsValidNewInfo || IsKeriaConfigured() )" Color="Color.Primary">Connect</MudButton>
                }
                else // create a new passcode
                {
                    <MudTextField Label="Generated random passcode"
                                  InputType="InputType.Password"
                                  @bind-Value="@RandomPasscode"
                                  ReadOnly="true"
                                  Immediate="true" />
                    <!-- TODO implmement Reveal and CopyToClipboard -->
                    <MudCheckBox @bind-Value="isPasscodeCopyConfirmed" Style="overflow-wrap:break-word;">I have copied and stored this passcode in a secure place</MudCheckBox>
                    @if (isPasscodeCopyConfirmed)
                    {
                        <MudTextField Label="Confirm your passcode"
                                      InputType="InputType.Password"
                                      @bind-Value="@configuredPasscodeModel.Passcode"
                                      For="@(() => configuredPasscodeModel.Passcode)"
                                      Immediate="true"
                                      OnBlur="@HandleOnBlur" />
                        @if (@configuredPasscodeModel.Passcode.Length != 21)
                        {
                            <MudText></MudText>
                        }
                        else if (@configuredPasscodeModel.Passcode != RandomPasscode)
                        {
                            <MudText Color="Color.Error">Passcode does not match</MudText>
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"></MudIcon>
                            <MudTextField Label="Alias for your initial identifier"
                                          InputType="InputType.Text"
                                          @bind-Value="@InitialAlias"
                                          spellcheck="false"
                                          Immediate="true"
                                          HelperText="e.g. <Your name> as <Role name> at <Organization>" />
                            <MudButton Variant="Variant.Filled" Style="width:fit-content;" OnClick="@(async () => await StoreHashAndConnect())" Disabled="@(!IsValidNewInfo || IsKeriaConfigured())" Color="Color.Primary"><MudText>Connect and Create Initial Identifier</MudText></MudButton>
                        }
                    }
                }
                @if (IsProcessing)
                {
                    <MudText Typo="Typo.h6">Connecting...</MudText>
                    <MudStack Class="mt-5">
                        <OperationDisplayComponent ops="@ops1LivenessCheck"></OperationDisplayComponent>
                        <OperationDisplayComponent ops="@ops2HealthCheck"></OperationDisplayComponent>
                        <OperationDisplayComponent ops="@ops3BootAndConnect"></OperationDisplayComponent>
                        <OperationDisplayComponent ops="@ops4ListAids"></OperationDisplayComponent>
                        <OperationDisplayComponent ops="@ops5CreatePersonalAid"></OperationDisplayComponent>
                    </MudStack>
                }
            </MudStack>
        </MudStack>
    </div>
    <MudStack Row="true" class="bt-button-tray">
        <!-- Intentionally no back button here -->
        <MudSpacer />
        <MudButton Disabled="@(!IsKeriaConfigured())" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => navManager.NavigateTo(RouteToStart))" Class="justify-start" data-testid="next">Next</MudButton>
    </MudStack>
</div>

@code {
    private static string InitialAlias { get; set; } = "";
    private string RandomPasscode { get; set; } = "";
    private bool isPasscodeCopyConfirmed;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        logger.LogInformation("OnInitializedAsync");
    }

    private static readonly KeriaConnectConfig defaultKeriaConnectConfig = new KeriaConnectConfig(AppConfig.DefaultKeriaConnectAlias, AppConfig.DefaultKeriaAdminUrl, AppConfig.DefaultKeriaBootUrl, 0);
    private KeriaConnectConfig? keriaConnectConfig;

    private bool IsKeriaConfigured()
    {
        if (keriaConnectConfig is null)
            return false;
        return keriaConnectConfig.IsConfigured();
    }
    private Preset _presetChoice = presetAgents[0];
    private Preset PresetChoice
    {
        get
        {
            return _presetChoice;
        }
        set
        {
            _presetChoice = value;
            urlModel.AdminUrl = value.AgentUrl;
            urlModel.BootUrl = value.BootUrl;
        }
    }

    private static List<Preset> presetAgents = new List<Preset>
    {
        new Preset("localhost", AppConfig.DefaultKeriaAdminUrl, AppConfig.DefaultKeriaBootUrl),
        new Preset("Roots ID", "https://keria-dev.rootsid.cloud/admin", "https://keria-dev.rootsid.cloud"),
        new Preset("Custom", "", "")
    };

    struct Preset
    {
        public string ProviderName { get; init; }
        public string AgentUrl { get; init; }  // TODO here and in the UI is it Agent or Admin?
        public string BootUrl { get; init; }

        public Preset(string provider, string adminUrl, string bootUrl)
        {
            ProviderName = provider;
            AgentUrl = adminUrl;
            BootUrl = bootUrl;
        }
    }

    private bool UseExistingPasscode { get; set; } = true;
    private bool IsProcessing { get; set; }

    private async Task SetIsNewAccount(bool isNewAccount)
    {
        logger.LogInformation("SetUseExistingPasscodeAsync");
        UseExistingPasscode = !isNewAccount;
        RandomPasscode = RandomStringGenerator.GenerateRandomString(21);
        // clear in case radio is toggled after passcode is copied, entered
        configuredPasscodeModel.Passcode = "";
        isPasscodeCopyConfirmed = false;
        StateHasChanged();
        await Copy2Clipboard(RandomPasscode);
    }

    private readonly OperationDisplay ops1LivenessCheck = new OperationDisplay("Checking KERI Agent Service liveness", "Live");
    private readonly OperationDisplay ops2HealthCheck = new OperationDisplay("Checking KERI Agent Service health", "Healthy");
    private readonly OperationDisplay ops3BootAndConnect = new OperationDisplay("Reconnecting to or establishing new connection", "Connected");
    private readonly OperationDisplay ops4ListAids = new OperationDisplay("Retrieving your identifiers", "Identifiers retrieved");
    private readonly OperationDisplay ops5CreatePersonalAid = new OperationDisplay("Creating personal identifier", "Created personal identifier");

    private UrlModel urlModel = new UrlModel()
        {
            AdminUrl = AppConfig.DefaultKeriaAdminUrl,
            BootUrl = AppConfig.DefaultKeriaBootUrl
        };

    private void HandleOnBlur()
    {
        // This method will be triggered when the text field loses focus
        // You can check for validity here if needed
    }

    private PasscodeModel configuredPasscodeModel = new PasscodeModel();

    private bool IsValidNewInfo
    {
        get
        {
            if (!IsValidURLs)
            {
                return false;
            }
            if (string.IsNullOrWhiteSpace(configuredPasscodeModel.Passcode))
            {
                return false;
            }
            if (configuredPasscodeModel.Passcode.Length != 21)
            {
                return false;
            }
            if (!UseExistingPasscode && (string.IsNullOrEmpty(InitialAlias) || RandomPasscode != configuredPasscodeModel.Passcode || !isPasscodeCopyConfirmed))
            {
                return false;
            }
            return true;
        }
    }

    private async Task<bool> ConnectToKeria()
    {
        ops1LivenessCheck.Reset();
        ops2HealthCheck.Reset();
        ops3BootAndConnect.Reset();
        ops5CreatePersonalAid.Reset();
        ops4ListAids.Reset();
        if (IsValidURLs) // TODO EE! should to a more thorough check of other conditions. See what enables the button(s)
        {
            // TODO since BootUrl is optional, we should check if AdminUrl is reachable
            // check if BootUrl is reachable.
            ops1LivenessCheck.SetIsRunning();
            StateHasChanged();
            UriBuilder healthUriBuilder = new($"{urlModel.BootUrl}/health");
            var postResult = await signifyClientService.HealthCheck(healthUriBuilder.Uri);
            if (!postResult.IsSuccess)
            {
                var message = $"KERIA service is not reachable";
                logger.LogWarning($"{message} at {healthUriBuilder.Uri}.");
                ops1LivenessCheck.SetCompletedWithError(message);
                return false;
            }
            ops1LivenessCheck.SetCompletedWithoutErrors();
            StateHasChanged();

            // TODO since BootUrl is optional, we should check if AdminUrl is reachable
            // check if KERIA is reporting as healthy
            ops2HealthCheck.SetIsRunning();
            StateHasChanged();
            // TODO move this into service code
            var httpClientService2 = new HttpClientService(new HttpClient());
            var postResult2 = await httpClientService2.GetJsonAsync<String>($"{urlModel.BootUrl}/health");
            if (!postResult2.IsSuccess || postResult2.Value.StatusCode != System.Net.HttpStatusCode.OK)
            {
                ops2HealthCheck.SetCompletedWithError(postResult2.Reasons.First().Message);
                StateHasChanged();
                return false;
            }
            ops2HealthCheck.SetCompletedWithoutErrors();
            if (!ops2HealthCheck.CompletedSuccessfully)
            {
                StateHasChanged();
            }

            // Create a new KERIA client
            // See client.ts create_agent.ts and other Integration scrips here: https://github.com/WebOfTrust/signify-integration/tree/main/scripts
            ops3BootAndConnect.SetIsRunning();
            StateHasChanged();
            var clientRes = await signifyClientService.Connect($"{urlModel.AdminUrl}", configuredPasscodeModel.Passcode, $"{urlModel.BootUrl}", !UseExistingPasscode);
            if (clientRes.IsFailed)
            {
                ops3BootAndConnect.SetCompletedWithError(clientRes.Reasons.First().Message);
                StateHasChanged();
                return false;
            }
            ops3BootAndConnect.SetCompletedWithoutErrors();
            // now that we have a connection....
            await stateService.Configure();
            StateHasChanged();

            ops4ListAids.SetIsRunning();
            StateHasChanged();
            var identifiersRes = await signifyClientService.GetIdentifiers();
            if (identifiersRes.IsFailed)
            {
                ops4ListAids.SetCompletedWithError(identifiersRes.Reasons.First().Message);
                StateHasChanged();
                return false;
            }
            var identifiers = identifiersRes.Value;
            // logger.LogWarning("Identifiers: {identifiers}", identifiers.ToString());
            // identifiers.ToList().ForEach(i => logger.LogInformation($"Identifiers: {i}"));
            ops4ListAids.SetCompletedWithoutErrors();
            StateHasChanged();

            if (identifiers.Aids.Count == 0)
            {
                ops5CreatePersonalAid.SetIsRunning();
                StateHasChanged();
                var aidRes = await signifyClientService.RunCreateAid(InitialAlias);
                if (aidRes.IsFailed)
                {
                    ops5CreatePersonalAid.SetCompletedWithError(aidRes.Reasons.First().Message);
                    StateHasChanged();
                    return false;
                }

                // set the selected aid in preferences, e.g. so it shows up in the AppBar as identicon
                var prefs = await preferencesService.GetPreferences();
                prefs = prefs with { SelectedAid = aidRes.Value };
                await preferencesService.SetPreferences(prefs);

                // logger.LogInformation("Identifier: {aid}", aidRes.Value);
                ops5CreatePersonalAid.SetCompletedWithoutErrors();
                StateHasChanged();
            }
            else
            {
                // don't need to create another AID, but still need to pick a default one
                var prefs = await preferencesService.GetPreferences();
                prefs = prefs with { SelectedAid = identifiers.Aids.First().Prefix };
                await preferencesService.SetPreferences(prefs);

                ops5CreatePersonalAid.SetCompletedWithoutErrors(); // ("One or more identifier(s) already exist");
                StateHasChanged();
            }

            // Success from testing the connection at this point
            return true;
        }
        return false;
    }

    private async Task StoreHashAndConnect()
    {
        // Since user has confirmed the passcode, we can now hash it and store it once the connection is successful
        IsProcessing = true;
        var isConnected = await ConnectToKeria();
        if (isConnected)
        {
            int tmpHash = GetNumberFromHash.HashInt(configuredPasscodeModel.Passcode);
            keriaConnectConfig = new KeriaConnectConfig("TBD333", urlModel.AdminUrl, urlModel.BootUrl, tmpHash);
            var res = await storageService.SetItem<KeriaConnectConfig>(keriaConnectConfig);
            if (res.IsFailed)
            {
                logger.LogError("Failed to store connection details");
                logger.LogError(res.Reasons.First().Message);
                return;
            }
            await stateService.Configure();
            await stateService.Authenticate(true); // TODO EE! temporary location here, to enable testing
                                                   // TODO EE! reactive effects of stateservice should disable the Connect button and enable the Next button??
                                                   // navManager.NavigateTo("Home");
        }
        // TODO EE! else show Error message
    }

    private bool IsValidURLs
    {
        get
        {
            if (string.IsNullOrWhiteSpace(urlModel.AdminUrl)
                || !Uri.IsWellFormedUriString(urlModel.AdminUrl, UriKind.Absolute)
                || string.IsNullOrWhiteSpace(urlModel.BootUrl)
                || !Uri.IsWellFormedUriString(urlModel.BootUrl, UriKind.Absolute))
            {
                return false;
            }
            return true;
        }
    }

    private class UrlModel
    {
        // TODO add setters that validate these values are a URL.  If not equal to the selected preset, set the preset to "Custom"

        [Required]
        [Url(ErrorMessage = "Enter KERIA Agent Admin URL")]
        public string AdminUrl { get; set; } = AppConfig.DefaultKeriaAdminUrl;

        // TODO should be optional or nullableSCrqAIjxIWIoFCe2zpRMq
        [Required]
        [Url(ErrorMessage = "Enter KERIA Boot URL")]
        public string BootUrl { get; set; } = AppConfig.DefaultKeriaBootUrl;
    }

    // TODO DRY with UnlockView
    private class PasscodeModel
    {
        [Required]
        [StringLength(21, ErrorMessage = "Passcode must be 21 characters long", MinimumLength = 21)]
        [DataType(DataType.Password)]
        public string Passcode { get; set; } = "";
    }
}