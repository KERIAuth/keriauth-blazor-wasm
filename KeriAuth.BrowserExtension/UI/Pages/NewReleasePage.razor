@page "/NewRelease"

@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@using static KeriAuth.BrowserExtension.AppConfig;
@using static KeriAuth.BrowserExtension.Helper.UIHelper;
@using static KeriAuth.BrowserExtension.Services.SignifyService.SignifyServiceConfig
@using FluentResults
@using JsBind.Net
@using JsBind.Net.Configurations
@using System.Diagnostics
@using System.Text.Json
@using System.Text.Json.Nodes
@using Blazor.BrowserExtension
@using WebExtensions.Net
@using WebExtensions.Net.Runtime
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using JsonSerializer = System.Text.Json.JsonSerializer
@using static System.Net.WebRequestMethods
@using System.ComponentModel.DataAnnotations
@using System.Linq
@using System.Text
@using System.Security.Cryptography

@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject ILogger<NewReleasePage> logger
@inject HttpClient http
@inject NavigationManager navManager
@inject IJSRuntime js
@inject ISignifyClientService signifyClientService
@inject ISnackbar snackbar

@code {
    // fields
    MudButton? buttonRef;
    const string releaseUrlPath = "content/release.html";
    static MarkupString releaseMarkup = new("Placeholder for Release Notes");
    const string releaseHistoryUrlPath = "content/release_history.html";
    static MarkupString releaseHistoryMarkup = new("Placeholder for Release Notes");

    // properties

    // reactive properties


    protected override async Task OnInitializedAsync()
    {
        // logger.LogInformation("OnInitializedAsync");
        releaseMarkup = new MarkupString(await http.GetStringAsync(releaseUrlPath));
        releaseHistoryMarkup = new MarkupString(await http.GetStringAsync(releaseHistoryUrlPath));
    }

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        if (/* isFirstRender && */ buttonRef is not null)
            await buttonRef.FocusAsync();
    }

    async Task AckNewRelease()
    {
        var res = await storageService.GetItem<OnboardState>();
        if (res.IsFailed || res.Value is null)
        {
            throw new Exception("Failed to get OnboardState");
        }
        var onboardState = res.Value;
        onboardState = onboardState with
            {
                HasAcknowledgedNewVersion = true
            };
        _ = await storageService.SetItem<OnboardState>(onboardState);
        navManager.NavigateTo(RouteToIndex);
    }
}


<div id="@this.GetType().Name" class="bt-body-page">
    <div class="d-flex gap-3 bt-main">
        <MudStack>
            <MudText Typo="Typo.h6">Updated Release</MudText>
            <MudStack Style="gap:0;">
                <MudText Typo="Typo.body1">
                    The software version of KERI Auth has been recently installed or updated.
                    You can review the current Release Notes and Release History below.
                </MudText>
                <MudStack Class="d-flex bt-terms-section">
                    <MudIconButton Icon="@Icons.Material.Filled.Print" Variant="Variant.Text" Href="@releaseUrlPath" Target="_blank" Class="bt-terms-button" />
                    <div class="bt-terms-markup">
                        @(releaseMarkup)
                    </div>
                </MudStack>
                <MudStack Class="d-flex bt-terms-section">
                    <MudIconButton Icon="@Icons.Material.Filled.Print" Variant="Variant.Text" Href="@releaseHistoryUrlPath" Target="_blank" Class="bt-terms-button" />
                    <div class="bt-terms-markup">
                        @(releaseHistoryMarkup)
                    </div>
                </MudStack>
            </MudStack>
        </MudStack>
    </div>
    <MudStack Row="true" class="bt-button-tray">
        <!-- <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
            -->
        <MudSpacer></MudSpacer>
        <MudButton @ref="buttonRef" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => AckNewRelease())" Class="justify-end" data-testid="next">Next</MudButton>
    </MudStack>
</div>