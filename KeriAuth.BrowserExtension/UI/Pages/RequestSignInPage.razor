@page "/RequestSignIn/{encodedOrigin}"
@layout Layouts.DialogLayout

@using System.Linq
@using System.Text.Json
@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.UI.Pages
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.AppConfig
@using System.Diagnostics
@using Microsoft.AspNetCore.WebUtilities
@using MudBlazor
@using FluentResults
@using System.Web
@using System.Text.Json.Serialization
@using System;
@using System.Collections.Generic;


@implements IDisposable

@inject IStorageService storageService
@inject IStateService stateService
@inject NavigationManager navManager
@inject IJSRuntime js
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@inject ILogger<RequestSignInPage> logger
@inject IdentifiersService identifiersService
@inject ISignifyClientService signifyClientService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inject IWebsiteConfigService websiteConfigService
@inject IStorageService storageService
@inject IPreferencesService preferencesService
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject IAppSwMessagingService appSwMessagingService
@inject IJSRuntime jsRuntime

@code {
    [Parameter]
    public string encodedOrigin { get; set; } = "";

    public string requestId { get; set; } = "";

    string OriginStr => HttpUtility.UrlDecode(encodedOrigin).Trim().Trim('"');

    Uri? GetOriginUri()
    {
        try
        {
            var x = new Uri(OriginStr);
            return x;
        }
        catch (Exception ex)
        {
            logger.LogError("Error parsing OriginStr '{o}': {e}", OriginStr, ex);
            return null;
        }
    }

    string AppActivePrefix { get; set; } = string.Empty;

    List<IdentifierHeadline> IdentifierHeadlines { get; set; } = [];

    // TODO P2 should property be something like  get => ThisWebsiteConfig?.RememberedPrefixOrNothing == SelectedPrefix;
    bool IsPrefixRemembered { get; set; }
    bool IsCredentialRemembered { get; set; }
    enum SignInMode { Credential, Identifier, Prompt }
    SignInMode RequestedSignInMode { get; set; } = SignInMode.Prompt;

    IdentifierHeadline? SelectedHeadlineOrNothing { get; set; }

    string SelectedPrefix { get; set; } = "unknown";

    // TODO P2 should be something like  get => ThisWebsiteConfig?.AutoSignInChoice == AutoSignInMode.Identifier;
    bool IsAutoSignIn { get; set; }

    WebsiteConfig? ThisWebsiteConfig { get; set; }

    async Task updateSelectedPrefix(string prefix)
    {
        SelectedPrefix = prefix;
        // TODO P2 following should be just un/resubscribe to another websiteConfig? ... and this UI is made responsive to an IObserver<WebsiteConfig>
        Debug.Assert(GetOriginUri() is not null);
        await getWebsiteConfig(GetOriginUri()!);
        StateHasChanged();
    }

    async Task updateIsCredentialRemembered(bool isChecked)
    {
        IsCredentialRemembered = isChecked;

        // TODO P2 EE! See updateIsPrefixRemembered for how this should be implemented
        if (isChecked)
        {
            IsPrefixRemembered = true;
        }
        await Task.Delay(0);
        return;
    }

    async Task updateIsPrefixRemembered(bool isChecked)
    {
        // TODO P2 implementation should just push an update into websiteConfigService, and rest be reactive to that.
        IsPrefixRemembered = isChecked;
        Debug.Assert(GetOriginUri() is not null);
        var getOrCreateWebsiteRes = await websiteConfigService.GetOrCreateWebsiteConfig(GetOriginUri()!);
        if (getOrCreateWebsiteRes.IsFailed)
        {
            logger.LogError("Error in websiteService {0}", getOrCreateWebsiteRes.Errors);
            return;
        }
        WebsiteConfig newWebsite = getOrCreateWebsiteRes.Value;
        if (SelectedHeadlineOrNothing is not null)
        {
            if (isChecked)
            {
                newWebsite = newWebsite with { RememberedPrefixOrNothing = SelectedPrefix };
            }
            else
            {
                // since the user has chosen to forget this identifier, we will also forget the auto sign in choice
                // TODO P2 once this UI is made responsive to an IObserver<WebsiteConfig> we can move this logic into the service
                IsAutoSignIn = false;
                IsCredentialRemembered = false;
                newWebsite = newWebsite with
                    {
                        RememberedPrefixOrNothing = null,
                        AutoSignInChoice = AutoSignInMode.None,

                        RememberedCredSaidOrNothing = null
                    };
            }

            logger.LogInformation("updateIsRemembered: about to update: {0}", newWebsite);
            var res = await websiteConfigService.Update(newWebsite);
            if (res is null || res.IsFailed)
            {
                throw new Exception($"Error updating website: {res?.Errors}");
            }
            Debug.Assert(GetOriginUri() is not null);
            await getWebsiteConfig(GetOriginUri()!); // StateHasChanged();
            return;
        }
        else
        {
            logger.LogError("updateIsRemembered: Unexpected null Identifier selection");
        }
        return;
    }

    async Task updateIsAutoSignIn(bool isChecked)
    {
        // TODO P2 implementation should just push an update into websiteConfigService, and rest be reactive to that.
        IsAutoSignIn = isChecked;
        Debug.Assert(GetOriginUri() is not null);
        var result = await websiteConfigService.GetOrCreateWebsiteConfig(GetOriginUri()!);

        WebsiteConfig newWebsiteConfig = result.Value;
        if (SelectedHeadlineOrNothing is not null)
        {
            if (isChecked)
            {
                // TODO P2 issues if user changes identifier after setting willSignInAutomatically or if willSignAutomatically was set for a different identifier earlier
                // put this logic into service and simplify here once this UI is made responsive to an IObserver<WebsiteConfig>
                IsPrefixRemembered = true;
                newWebsiteConfig = newWebsiteConfig with { RememberedPrefixOrNothing = SelectedPrefix, AutoSignInChoice = AutoSignInMode.Identifier };
            }
            else
            {
                newWebsiteConfig = newWebsiteConfig with { RememberedPrefixOrNothing = SelectedPrefix, AutoSignInChoice = AutoSignInMode.None };
            }


            logger.LogInformation("updateWillSignInAutomatically: about to update: {0}", newWebsiteConfig);
            var res = await websiteConfigService.Update(newWebsiteConfig);
            if (res is null || res.IsFailed)
            {
                IsAutoSignIn = false;
                logger.LogError("Error updating website: {0}", res?.Errors);
            }
            else
            {
                logger.LogInformation("updateWillSignInAutomatically: setting willSignInAutomatically2 {0}", res);
                IsAutoSignIn = isChecked;
            }
            Debug.Assert(GetOriginUri() is not null);
            await getWebsiteConfig(GetOriginUri()!); //  StateHasChanged();
            return;
        }
        else
        {
            logger.LogError("Unexpected null Identifier selection");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        logger.LogInformation($"OnInitialized");
        await getCredentials();
        return;
    }

    protected override async Task OnParametersSetAsync()
    {
        logger.LogInformation($"OnParametersSetAsync");
        await base.OnParametersSetAsync();
        InitializeOrOnNextPrefs(await preferencesService.GetPreferences());
        await GetInitialHeadlines();

        logger.LogInformation("OnParametersSetAsync requestId {r}", requestId);

        // TODO P3 remove temporary code below for exploration.  Will be useful when requested to sign a specific request, such as issuing a credential
        var initialUriQuery = extensionEnvironmentService.InitialUriQuery;
        logger.LogInformation($"URI query: {initialUriQuery}");
        // TODO P1 add try-catch?
        // TODO P2 decide whether these values (RequestId, Type, and others) should come in page parameters, initialUriQuery, or database/service.
        if (QueryHelpers.ParseQuery(initialUriQuery).TryGetValue("message", out var outterMessage))
        {
            var decodedMsg = HttpUtility.UrlDecode(outterMessage);
            logger.LogInformation("Chrome URI query message decoded: {msg}", decodedMsg);
            var decodedMsg2 = HttpUtility.UrlDecode(decodedMsg);
            logger.LogInformation("Chrome URI query message decoded2: {msg}", decodedMsg2);

            if (!IsJsonValid(decodedMsg2))
            {
                logger.LogError("Chrome URI query Invalid JSON message: {msg}", decodedMsg2);
                return;
            };

            string jsonString = decodedMsg2.ToString(); // Convert StringValues to string

            // Parse the JSON string
            var jsonDocument = JsonDocument.Parse(jsonString);
            var jsonObject = jsonDocument.RootElement;

            // Extract the "Type" value
            if (jsonObject.TryGetProperty("type", out var typeElement))
            {
                string type = typeElement.GetString() ?? String.Empty;

                if (jsonObject.TryGetProperty("requestId", out var requestId2))
                {
                    string requestId3 = requestId2.GetString() ?? String.Empty;
                    requestId = requestId3;
                    logger.LogInformation("Chrome URI query requestId: '{0}'", requestId);
                }

                logger.LogInformation("Processing message of type: {t}", type);
                switch (type)
                {
                    // TODO P3 how should these string values be aligned with the definitions in ExCsInterface.ts?
                    case "/signify/authorize":
                        RequestedSignInMode = SignInMode.Prompt;
                        break;
                    case "/signify/authorize/identifier":
                    case "/signify/authorize/aid":
                        RequestedSignInMode = SignInMode.Identifier;
                        break;
                    case "/signify/authorize/credential":
                        RequestedSignInMode = SignInMode.Credential;
                        break;
                    default:
                        logger.LogInformation("Unknown message type: {0}", type);
                        return;
                }
            }
            else
            {
                logger.LogError("No 'type' property found in outer message");
                return;
            }

        }
        else
        {
            logger.LogError("Could not find UriQuery content containing outter \"message\".");
            return;
        }
    }

    async Task GetInitialHeadlines()
    {
        logger.LogInformation("GetHeadlines...");
        var res = await identifiersService.GetIdentifierHeadlines();
        if (res != null && res.IsSuccess)
        {
            logger.LogInformation("GetIdentifierHeadlines: count {1}", res.Value.Count);
            IdentifierHeadlines = res.Value;
            IdentifierHeadlines = IdentifierHeadlines.OrderBy(a => a.Alias).ToList();
            if (IdentifierHeadlines.Count > 0)
            {
                Debug.Assert(GetOriginUri() is not null);
                var wcRes = await websiteConfigService.GetOrCreateWebsiteConfig(GetOriginUri()!);
                logger.LogInformation("GetHeadlines: getOrCreateWebsite: {0}", JsonSerializer.Serialize(wcRes));
                if (wcRes.IsFailed)
                {
                    logger.LogError("Error in websiteService: {0}", wcRes.Errors);
                    return;
                }
                WebsiteConfig newWebsite = wcRes.Value;
                if (newWebsite.RememberedPrefixOrNothing is not null)
                {
                    SelectedHeadlineOrNothing = IdentifierHeadlines.First(a => a.Prefix == newWebsite.RememberedPrefixOrNothing);
                }
                else
                {
                    // use the user's general preferences or otherwise the first headline
                    SelectedHeadlineOrNothing = IdentifierHeadlines.First(a => a.Prefix == AppActivePrefix);
                    if (SelectedHeadlineOrNothing is null)
                    {
                        SelectedHeadlineOrNothing = IdentifierHeadlines.First();
                    }
                }
                logger.LogInformation("SelectedHeadlineOrNothing: Alias: {0}", SelectedHeadlineOrNothing?.Alias ?? "UNSET!");
                SelectedPrefix = SelectedHeadlineOrNothing?.Prefix ?? "UNSET!";
                Debug.Assert(SelectedHeadlineOrNothing is null, "Unexpected null value for SelectedHeadlineOrNothing");
                Debug.Assert(GetOriginUri() is not null);
                await getWebsiteConfig(GetOriginUri()!);
                StateHasChanged();
            }
            else
            {
                throw new Exception("No Identifiers found");
            }
        };
    }

    async Task getWebsiteConfig(Uri uri)
    {
        logger.LogInformation("getWebsiteConfig uri: {uri}", uri);
        var x = await websiteConfigService.GetOrCreateWebsiteConfig(uri);
        if (x.IsSuccess)
        {
            ThisWebsiteConfig = x.Value;
            // TODO P3 update the getter for the following properties to use this
            IsPrefixRemembered = x.Value.RememberedPrefixOrNothing == SelectedPrefix;
            IsAutoSignIn = x.Value.AutoSignInChoice == AutoSignInMode.Identifier;
            StateHasChanged();
        }
        else
        {
            throw new Exception("No Identifiers found");
        }
    }

    void InitializeOrOnNextPrefs(Preferences prefs)
    {
        AppActivePrefix = prefs.SelectedAid;
        this.StateHasChanged();
    }


    List<Dictionary<string, object>> credentials = new();

    private async Task getCredentials()
    {
        // TODO P2 implement filtering to show only the holder's credentials
        // typescript:  client.credentials().list({ filter: { '-a-i': holderAid.prefix } })
        var res = await signifyClientService.GetCredentials();
        if (res.IsFailed || res.Value is null)
        {
            logger.LogError($"Error: {res.Errors}");
            return;
        }
        else
        {
            credentials = res.Value as List<Dictionary<string, object>>;
            Debug.Assert(credentials is not null);
            logger.LogInformation("Credentials: count {res}", credentials.Count);
            // foreach (Dictionary<string, object> credential in credentials)
            // {
            //     logger.LogInformation("Credential: {credential}", credential);
            //     logger.LogInformation("Credential title: {credential}", DictionaryConverter.GetValueByPath(credential, "schema.title").Value);
            // }
        }
    }





    /*
    // SignIn()
    */
    async Task SignIn(SignInMode RequestedSignInMode, string requestId2, string? SelectedPrefix, Dictionary<string, object>? credentialDictionary)
    {
        ReplyMessageData<AuthorizeResult> replyMessageData;
        switch (RequestedSignInMode)
        {
            case SignInMode.Identifier:
                logger.LogInformation("SignIn with Identifier: {0}", SelectedPrefix);
                if (SelectedPrefix is null)
                {
                    throw (new Exception("SelectedPrefix is null"));
                }
                replyMessageData = new(
                    "/signify/reply",
                    new AuthorizeResult(null, new AuthorizeResultIdentifier(SelectedPrefix)),
                    requestId: requestId2
                );
                break;
            case SignInMode.Credential:
                // populate a C# record that mirrors the JSON structure and typescript of ICredential from signify-browser-extension/src/config/types.ts

                // Deserialize JSON string to ICredential record
                var options = new JsonSerializerOptions
                    {
                        PropertyNamingPolicy = JsonNamingPolicy.CamelCase, // Camel case property names
                        PropertyNameCaseInsensitive = true,                 // Case-insensitive properties
                        DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull, // Ignore null values
                        IgnoreReadOnlyProperties = true,                    // Ignore read-only properties
                        UnmappedMemberHandling = JsonUnmappedMemberHandling.Skip // Ignore unmapped members
                    };

                var json = JsonSerializer.Serialize(credentialDictionary, options);

                // Deserialize with options, which gets rid of excess properties that are not in the ICredential record
                var credential2 = JsonSerializer.Deserialize<ICredential>(json, options);

                logger.LogInformation("SignIn with Credential: {0}", credential2);
                if (credential2 is null)
                {
                    throw (new Exception("Credential is null"));
                };
                var cesr = await Signify_ts_shim.GetCredential(credential2.sad.d, true);
                logger.LogInformation("SignIn with Credential: sad: {0}", credential2.sad.d);
                replyMessageData = new(
                    type: "/KeriAuth/signify/replyCredential",
                    payload: new AuthorizeResult(new AuthorizeResultCredential(JsonSerializer.Serialize(credential2), cesr), null),
                    requestId: requestId2
                );
                break;
            default:
                return;
        }
        await appSwMessagingService.SendToServiceWorkerAsync<AuthorizeResult>(replyMessageData);
        UIHelper.CloseWindow();
    }

    async Task Cancel()
    {
        var cr = new ReplyMessageData<AuthorizeResult>(
            "/KeriAuth/signify/replyCancel",
            new AuthorizeResult(null, null),
            requestId: requestId
        );
        await appSwMessagingService.SendToServiceWorkerAsync<AuthorizeResult>(cr);
        // Close blazor application
        UIHelper.CloseWindow();
    }

    public void Dispose()
    {
        // TODO P4 unsubscribe from services, observables
        ;
    }

    static bool IsJsonValid(string jsonString)
    {
        try
        {
            // Attempt to parse the JSON string
            var jsonDocument = JsonDocument.Parse(jsonString);
            return true;
        }
        catch (JsonException ex)
        {
            // JSON parsing failed, likely due to improper escaping or formatting
            Console.WriteLine($"JSON Parsing Error: {ex.Message}");
            return false;
        }
    }

    private Dictionary<string, object>? SelectedCredential;

    private bool IsExpanded = false;

    protected override void OnInitialized()
    {
        // SelectedCredential = new Dictionary<string, object>();
    }

    private void ToggleExpand()
    {
        IsExpanded = !IsExpanded;
    }

    private void SelectCredential(Dictionary<string, object> item)
    {
        if (SelectedCredential == item)
        {
            IsExpanded = false;
        }
        else
        {
            SelectedCredential = item;
            IsExpanded = false;
        }
    }

    private string ExpandIcon => IsExpanded ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore;

    private string GetCredentialItemClass(Dictionary<string, object> item)
    {
        return item == SelectedCredential ? "selected-item" : String.Empty;
    }
}

<div id="@this.GetType().Name" class="bt-body-page">
    <MudStack Class="bt-main">
        <div class="bt-main-inside-scroll">
            @switch (RequestedSignInMode)
            {
                case SignInMode.Identifier:
                    <MudText Typo="Typo.h6">Request to Sign In with Identifier</MudText>
                    break;
                case SignInMode.Credential:
                    <MudText Typo="Typo.h6">Request to Sign In with Credential</MudText>
                    break;
                case SignInMode.Prompt:
                    <MudText Typo="Typo.h6">Request to Sign In</MudText>
                    break;
            }
            <MudText Typo="Typo.body1"><em>@OriginStr</em></MudText>

            @switch (RequestedSignInMode)
            {
                case SignInMode.Identifier:
                    <MudStack Class="gap-0">
                        <MudText Class="mt-6"><b>Identifier</b></MudText>
                        <MudSelect T="string" Value="@SelectedPrefix" ValueChanged="async (string v) => await updateSelectedPrefix(v)">
                            @foreach (var identifierHeadline in IdentifierHeadlines)
                            {
                                <MudSelectItem Value="@identifierHeadline.Prefix">
                                    <MudStack Row Style="align-items:center;">
                                        <MudIcon Icon=@identifierHeadline.Identicon ViewBox="0 0 100 100" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden; margin-top: 3px;" />
                                        <div class="bt-sad-2" style="display:contents;">
                                            <MudText Typo="Typo.subtitle2" Color="Color.Primary">@identifierHeadline.Alias</MudText>
                                        </div>
                                    </MudStack>
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudStack>
                    break;
                case SignInMode.Credential:
                    <MudStack Class="gap-0">
                        <MudText Class="mt-6"><b>Credential</b></MudText>
                        <MudPaper Class="pa-0 mr-3">
                            <!-- Display Selected Credential -->
                            <MudPaper Class="d-flex align-items-center">
                                @if (SelectedCredential is null)
                                {
                                    <MudText>Select a credential</MudText>
                                }
                                else
                                {
                                    <CredentialDisplay credential="@SelectedCredential" displayDetail="@CredentialDisplay.CredentialDisplayDetail.Minimal" />
                                }
                                <MudSpacer />
                                <MudIconButton Icon="@ExpandIcon" OnClick="@ToggleExpand" />
                            </MudPaper>
                            <!-- Display Credential List When Expanded -->
                            @if (IsExpanded)
                            {
                                <MudList Dense="true" T="Dictionary<string, object>">
                                    @foreach (var credential in credentials)
                                    {
                                        <MudListItem OnClick="@(() => SelectCredential(credential))"
                                                     Class="@GetCredentialItemClass(credential)">
                                            <CredentialDisplay credential="@credential" />
                                        </MudListItem>
                                    }
                                </MudList>
                            }
                        </MudPaper>
                    </MudStack>
                    break;
                case SignInMode.Prompt:
                    <MudStack Class="gap-0">
                        <MudText Class="mt-6"><b>Sign-in method</b></MudText>
                        <MudRadioGroup @bind-Value="RequestedSignInMode" T=@SignInMode Row="true">
                            <MudRadio Class="d-block" Value=@(SignInMode.Identifier)>Identifier</MudRadio>
                            <MudRadio Class="d-block" Value=@(SignInMode.Credential)>Credential</MudRadio>
                        </MudRadioGroup>
                    </MudStack>
                    break;
            }

            <MudStack Class="gap-0 " Spacing="1">
                <span style="margin-top:20px;">
                    <MudText Inline Class="mt-6"><b>Options</b></MudText>
                    <MudText Inline> for future requests from <em>@OriginStr</em></MudText>
                </span>
                <MudCheckBox Label="Remember this identifier" Class="my-0" style="height: 28px;" Value="@IsPrefixRemembered" id="rememberCheckBox" ValueChanged="async (bool b) => await updateIsPrefixRemembered(b)" />
                <MudCheckBox Label="Remember this credential" Class="my-0" style="height: 28px; margin-left:38px;" Value="@IsCredentialRemembered" id="rememberCredentialCheckBox" ValueChanged="async (bool b) => await updateIsCredentialRemembered(b)" />
                <MudCheckBox Label="Enable Auto-SignIn" Class="my-0" style="height: 28px; margin-left:38px;" Value="@IsAutoSignIn" id="enableAutoSitnInCheckBox" ValueChanged="async (bool b) => await updateIsAutoSignIn(b)" />
                @{
                    /* If "Enable auto SignIn" is set, but not with this Identifier, show the other identifier */
                    if (ThisWebsiteConfig?.AutoSignInChoice == AutoSignInMode.Identifier && ThisWebsiteConfig?.RememberedPrefixOrNothing != SelectedPrefix)
                    {
                        <MudText Class="pt-0 mt-0 pl-10" Typo="Typo.caption">(enabled for "@IdentifierHeadlines.First(x => x.Prefix == ThisWebsiteConfig?.RememberedPrefixOrNothing).Alias)"</MudText>
                    }
                }
            </MudStack>
        </div>
    </MudStack>
    <MudStack Row="true" class="bt-button-tray">
        <MudSpacer />
        <MudButton StartIcon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled" Color="Color.Tertiary" @onclick="Cancel">Cancel</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.Login" Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => await SignIn(RequestedSignInMode, requestId, SelectedPrefix, SelectedCredential)">Sign In</MudButton>
    </MudStack>
</div>

<style>
    .mud-select .mud-select-input .mud-input-slot {
        height: auto;
    }

    .selected-item {
        border-left: 4px solid blue;
    }
</style>