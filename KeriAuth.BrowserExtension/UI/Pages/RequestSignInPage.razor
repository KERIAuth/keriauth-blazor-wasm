@page "/RequestSignIn/{encodedOrigin}"
@layout Layouts.DialogLayout

@using System.Linq
@using System.Text.Json
@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.UI.Pages
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.AppConfig
@using System.Diagnostics
@using Microsoft.AspNetCore.WebUtilities
@using MudBlazor
@using FluentResults
@using System.Web
@using System.Text.Json.Serialization
@using System;
@using System.Collections.Generic;

@implements IDisposable

@inject IStorageService storageService
@inject IStateService stateService
@inject NavigationManager navManager
@inject IJSRuntime js
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@inject ILogger<RequestSignInPage> logger
@inject IdentifiersService identifiersService
@inject ISignifyClientService signifyClientService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inject IWebsiteConfigService websiteConfigService
@inject IStorageService storageService
@inject IPreferencesService preferencesService
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject IAppSwMessagingService appSwMessagingService
@inject IJSRuntime jsRuntime

@code {
    [Parameter] public string encodedOrigin { get; set; } = "";

    // fields and types
    enum SignInMode { Credential, Identifier, Prompt }
    private MudButton? signInButton;

    // properties
    public string requestId { get; set; } = "";
    SignInMode RequestedSignInMode { get; set; } = SignInMode.Prompt;
    string? SelectedPrefix { get; set; }
    Dictionary<string, object>? SelectedCredentialOrNothing { get; set; }

    // reactive properties
    string OriginStr => HttpUtility.UrlDecode(encodedOrigin).Trim().Trim('"');

    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnParametersSetAsync()
    {
        logger.LogInformation($"OnParametersSetAsync");

        // TODO P2 instead use webExtensionsApi.Runtime.GetContexts
        // remove temporary code below for exploration.  Will be useful when requested to sign a specific request, such as issuing a credential
        var initialUriQuery = extensionEnvironmentService.InitialUriQuery;
        // logger.LogInformation($"URI query: {initialUriQuery}");
        // TODO P2 decide whether these values (RequestId, Type, and others) should come in page parameters, initialUriQuery, or database/service.
        if (QueryHelpers.ParseQuery(initialUriQuery).TryGetValue("message", out var outterMessage))
        {
            var decodedMsg = HttpUtility.UrlDecode(outterMessage);
            // logger.LogInformation("Chrome URI query message decoded: {msg}", decodedMsg);
            var decodedMsg2 = HttpUtility.UrlDecode(decodedMsg);
            logger.LogInformation("Chrome URI query message decoded2: {msg}", decodedMsg2);

            if (!IsJsonValid(decodedMsg2))
            {
                logger.LogError("Chrome URI query Invalid JSON message: {msg}", decodedMsg2);
                return;
            };

            string jsonString = decodedMsg2.ToString(); // Convert StringValues to string

            // Parse the JSON string
            var jsonDocument = JsonDocument.Parse(jsonString);
            var jsonObject = jsonDocument.RootElement;

            // Extract the "Type" value
            if (jsonObject.TryGetProperty("type", out var typeElement))
            {
                string type = typeElement.GetString() ?? String.Empty;

                if (jsonObject.TryGetProperty("requestId", out var requestId2))
                {
                    string requestId3 = requestId2.GetString() ?? String.Empty;
                    requestId = requestId3;
                    // logger.LogInformation("Chrome URI query requestId: '{0}'", requestId);
                }

                // logger.LogInformation("Processing message of type: {t}", type);
                switch (type)
                {
                    // TODO P3 how should these string values be aligned with the definitions in ExCsInterface.ts?
                    case "/signify/authorize":
                        RequestedSignInMode = SignInMode.Prompt;
                        break;
                    case "/signify/authorize/identifier":
                    case "/signify/authorize/aid":
                        RequestedSignInMode = SignInMode.Identifier;
                        break;
                    case "/signify/authorize/credential":
                        RequestedSignInMode = SignInMode.Credential;
                        break;
                    default:
                        logger.LogInformation("Unknown message type: {0}", type);
                        break;
                }
                await SetSignInFocus();
                return;
            }
            else
            {
                logger.LogError("No 'type' property found in outer message");
                return;
            }
        }
        else
        {
            logger.LogError("Could not find UriQuery content containing outter \"message\".");
            return;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // if (firstRender)
        {
            await SetSignInFocus();
        }
    }

    async Task SetSignInFocus()
    {
        if (signInButton is not null)
        {
            logger.LogInformation("setting focus on Sign In button");
            await signInButton.FocusAsync();
        }
    }

    /*
     * SignIn()
     */
    async Task SignIn(SignInMode RequestedSignInMode, string requestId2)
    {
        // will received prefix and credential via callback from WebsiteConfigDisplay component

        ReplyMessageData<AuthorizeResult> replyMessageData;

        switch (RequestedSignInMode)
        {
            case SignInMode.Identifier:
                logger.LogInformation("SignIn with Identifier: {0}", SelectedPrefix);
                if (SelectedPrefix is null)
                {
                    throw (new Exception("SelectedPrefix is null"));
                }
                replyMessageData = new(
                    "/signify/reply",
                    new AuthorizeResult(null, new AuthorizeResultIdentifier(SelectedPrefix)),
                    requestId: requestId2
                );
                break;
            case SignInMode.Credential:
                // Populate a C# record that mirrors the JSON structure and typescript of ICredential from signify-browser-extension/src/config/types.ts
                // Deserialize JSON string to ICredential record
                var options = new JsonSerializerOptions
                    {
                        PropertyNamingPolicy = JsonNamingPolicy.CamelCase, // Camel case property names
                        PropertyNameCaseInsensitive = true,                 // Case-insensitive properties
                        DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull, // Ignore null values
                        IgnoreReadOnlyProperties = true,                    // Ignore read-only properties
                        UnmappedMemberHandling = JsonUnmappedMemberHandling.Skip // Ignore unmapped members
                    };

                var json = JsonSerializer.Serialize(SelectedCredentialOrNothing, options);

                // Deserialize with options, which gets rid of excess properties that are not in the ICredential record
                var credential2 = JsonSerializer.Deserialize<ICredential>(json, options);

                logger.LogInformation("SignIn with Credential: {0}", credential2);
                if (credential2 is null)
                {
                    throw (new Exception("Credential is null"));
                };
                var cesr = await Signify_ts_shim.GetCredential(credential2.sad.d, true);
                logger.LogInformation("SignIn with Credential: sad: {0}", credential2.sad.d);
                replyMessageData = new(
                    type: "/KeriAuth/signify/replyCredential",
                    payload: new AuthorizeResult(new AuthorizeResultCredential(JsonSerializer.Serialize(credential2), cesr), null),
                    requestId: requestId2
                );
                break;
            default:
                return;
        }
        await appSwMessagingService.SendToServiceWorkerAsync<AuthorizeResult>(replyMessageData);
        await Task.Delay(100);
        UIHelper.CloseWindow();
    }

    async Task Cancel()
    {
        var cr = new ReplyMessageData<AuthorizeResult>(
            "/KeriAuth/signify/replyCancel",
            new AuthorizeResult(null, null),
            requestId: requestId
        );
        await appSwMessagingService.SendToServiceWorkerAsync<AuthorizeResult>(cr);
        // Close blazor application
        UIHelper.CloseWindow();
    }

    public void Dispose()
    {
        // TODO P4 unsubscribe from services, observables
        ;
    }

    static bool IsJsonValid(string jsonString)
    {
        try
        {
            // Attempt to parse the JSON string
            var jsonDocument = JsonDocument.Parse(jsonString);
            return true;
        }
        catch (JsonException ex)
        {
            // JSON parsing failed, likely due to improper escaping or formatting
            Console.WriteLine($"JSON Parsing Error: {ex.Message}");
            return false;
        }
    }

    private async Task HandleIdOrCredChanged((string selectedPrefix, Dictionary<string, object>? selectedCredentialOrNothing) value)
    {
        logger.LogInformation($"HandleValueChanged prefix {value.selectedPrefix} | selectedCredential {value.selectedCredentialOrNothing is not null}");
        SelectedPrefix = value.selectedPrefix;
        SelectedCredentialOrNothing = value.selectedCredentialOrNothing;
        StateHasChanged();
        await SetSignInFocus();
    }

    private bool IsSignInDisabled
    {
        get
        {
            // logger.LogWarning("isSignInDisabled: RequestedSignInMode: {m} SelectedCredentialOrNothing: {s}", RequestedSignInMode, SelectedCredentialOrNothing?.GetType().ToString() );
            if (SelectedPrefix is null || (RequestedSignInMode == SignInMode.Credential && SelectedCredentialOrNothing is null))
            {
                // logger.LogWarning("isSignInDisabled {b}", true);
                return true;
            }
            else
            {
                // logger.LogWarning("isSignInDisabled {b}", false);
                return false;
            }
        }
    }

    //
    //
    //
    private async Task SignInHandler()
    {
        await SignIn(RequestedSignInMode, requestId);
    }

    //
    //
    //
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Code == "NumpadEnter")
        {
            await SignInHandler();
        }
    }

}

<div id="@this.GetType().Name" class="bt-body-page">
    <MudStack Class="bt-main">
        <div class="bt-main-inside-scroll">
            @switch (RequestedSignInMode)
            {
                case SignInMode.Identifier:
                    <MudText Typo="Typo.h6">Request to Sign In with Identifier</MudText>
                    break;
                case SignInMode.Credential:
                    <MudText Typo="Typo.h6">Request to Sign In with Credential</MudText>
                    break;
                case SignInMode.Prompt:
                    <MudText Typo="Typo.h6">Request to Sign In</MudText>
                    break;
                default:
                    <MudText Typo="Typo.h6">Unsupported SignIn Mode: @RequestedSignInMode</MudText>
                    break;
            }

            @switch (RequestedSignInMode)
            {
                case SignInMode.Prompt:
                    <MudStack Class="gap-0">
                        <MudText Class="mt-6"><b>Sign-in method</b></MudText>
                        <MudRadioGroup @bind-Value="RequestedSignInMode" T=@SignInMode>
                            <MudRadio Class="d-block" Value=@(SignInMode.Identifier)>Identifier</MudRadio>
                            <MudRadio Class="d-block" Value=@(SignInMode.Credential)>Credential</MudRadio>
                        </MudRadioGroup>
                    </MudStack>
                    break;
                case SignInMode.Identifier:
                    <WebsiteConfigDisplay OriginStr="@OriginStr" IsOriginShown="true" IsCredentialShown="false" IsAutoSignShown="false" ValueChanged="async (v) => await HandleIdOrCredChanged(v)" />
                    break;
                case SignInMode.Credential:
                    <WebsiteConfigDisplay OriginStr="@OriginStr" IsOriginShown="true" IsCredentialShown="true" IsAutoSignShown="false" ValueChanged="async (v) => await HandleIdOrCredChanged(v)" />
                    break;
                default:
                    <MudText>Unsupported SignInMode: @RequestedSignInMode</MudText>
                    break;
            }
        </div>
    </MudStack>
    <MudStack Row="true" class="bt-button-tray">
        <MudButton StartIcon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled" Color="Color.Tertiary" @onclick="Cancel">Cancel</MudButton>
        <MudButton @ref="signInButton"
                   StartIcon="@Icons.Material.Filled.Login"
                   Disabled="IsSignInDisabled"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="SignInHandler"
                   @onkeydown="HandleKeyDown">
            Sign In
        </MudButton>
    </MudStack>
</div>

<style>
    .mud-select .mud-select-input .mud-input-slot {
        height: auto;
    }

    .selected-item {
        border-left: 4px solid blue;
    }
</style>