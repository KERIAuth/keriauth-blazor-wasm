@page "/RequestSignIn/{escapedOriginStr}"
@layout Layouts.MainLayout

@using System.Linq
@using System.Text.Json
@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.UI.Pages
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.AppConfig
@using System.Diagnostics
@using Microsoft.AspNetCore.WebUtilities
@using MudBlazor
@using FluentResults
@using System.Web

@implements IDisposable

@inject IStorageService storageService
@inject IStateService stateService
@inject NavigationManager navManager
@inject IJSRuntime js
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@inject ILogger<RequestSignInPage> logger
@inject IdentifiersService identifiersService
@inject ISignifyClientService signifyClientService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inject IWebsiteConfigService websiteConfigService
@inject IStorageService storageService
@inject IPreferencesService preferencesService
@inject IExtensionEnvironmentService extensionEnvironmentService

@code {
    [Parameter]
    public string escapedOriginStr { get; set; } = "";

    string OriginStr { get; set; } = "http://example.com";

    Uri GetOriginUri()
    {
        // TODO try-catch
        var x = new Uri(OriginStr);
        return x;
    } 

    string AppActivePrefix { get; set; } = string.Empty;

    List<IdentifierHeadline> IdentifierHeadlines { get; set; } = [];

    // TODO should be something like  get => ThisWebsiteConfig?.RememberedPrefixOrNothing == SelectedPrefix;
    bool IsPrefixRemembered { get; set; }

    IdentifierHeadline? SelectedHeadlineOrNothing { get; set; }

    string SelectedPrefix { get; set; } = "unknown";

    // TODO should be something like  get => ThisWebsiteConfig?.AutoSignInChoice == AutoSignInMode.Identifier;
    bool IsAutoSignIn { get; set; }

    WebsiteConfig? ThisWebsiteConfig { get; set; }

    async Task updateSelectedPrefix(string prefix)
    {
        SelectedPrefix = prefix;
        // TODO following should be just un/resubscribe to another websiteConfig? ... and this UI is made responsive to an IObserver<WebsiteConfig>
        await getWebsiteConfig(GetOriginUri());
        StateHasChanged();
    }

    async Task updateIsPrefixRemembered(bool isChecked)
    {
        // TODO implementation should just push an update into websiteConfigService, and rest be reactive to that.
        IsPrefixRemembered = isChecked;
        var getOrCreateWebsiteRes = await websiteConfigService.GetOrCreateWebsiteConfig(GetOriginUri());
        if (getOrCreateWebsiteRes.IsFailed)
        {
            logger.LogError("Error in websiteService {0}", getOrCreateWebsiteRes.Errors);
            return;
        }
        WebsiteConfig newWebsite = getOrCreateWebsiteRes.Value;
        if (SelectedHeadlineOrNothing is not null)
        {
            if (isChecked)
            {
                newWebsite = newWebsite with { RememberedPrefixOrNothing = SelectedPrefix };
            }
            else
            {
                // since the user has chosen to forget this identifier, we will also forget the auto sign in choice
                // TODO: once this UI is made responsive to an IObserver<WebsiteConfig> we can move this logic into the service
                IsAutoSignIn = false;
                newWebsite = newWebsite with { RememberedPrefixOrNothing = null, AutoSignInChoice = AutoSignInMode.None };
            }

            logger.LogInformation("updateIsRemembered: about to update: {0}", newWebsite);
            var res = await websiteConfigService.Update(newWebsite);
            if (res is null || res.IsFailed)
            {
                throw new Exception($"Error updating website: {res?.Errors}");
            }
            await getWebsiteConfig(GetOriginUri()); // StateHasChanged();
            return;
        }
        else
        {
            logger.LogError("updateIsRemembered: Unexpected null Identifier selection");
        }
        return;
    }

    async Task updateIsAutoSignIn(bool isChecked)
    {
        // TODO implementation should just push an update into websiteConfigService, and rest be reactive to that.
        IsAutoSignIn = isChecked;
        var result = await websiteConfigService.GetOrCreateWebsiteConfig(GetOriginUri());

        WebsiteConfig newWebsiteConfig = result.Value;
        if (SelectedHeadlineOrNothing is not null)
        {
            if (isChecked)
            {
                // TODO issues if user changes identifier after setting willSignInAutomatically or if willSignAutomatically was set for a different identifier earlier
                // put this logic into service and simplify here once this UI is made responsive to an IObserver<WebsiteConfig>
                IsPrefixRemembered = true;
                newWebsiteConfig = newWebsiteConfig with { RememberedPrefixOrNothing = SelectedPrefix, AutoSignInChoice = AutoSignInMode.Identifier };
            }
            else
            {
                newWebsiteConfig = newWebsiteConfig with { RememberedPrefixOrNothing = SelectedPrefix, AutoSignInChoice = AutoSignInMode.None };
            }


            logger.LogInformation("updateWillSignInAutomatically: about to update: {0}", newWebsiteConfig);
            var res = await websiteConfigService.Update(newWebsiteConfig);
            if (res is null || res.IsFailed)
            {
                IsAutoSignIn = false;
                logger.LogError("Error updating website: {0}", res?.Errors);
            }
            else
            {
                logger.LogInformation("updateWillSignInAutomatically: setting willSignInAutomatically2 {0}", res);
                IsAutoSignIn = isChecked;
            }
            await getWebsiteConfig(GetOriginUri()); //  StateHasChanged();
            return;
        }
        else
        {
            logger.LogError("Unexpected null Identifier selection");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        logger.LogInformation($"OnInitialized");
        return;
    }

    protected override async Task OnParametersSetAsync()
    {
        logger.LogInformation($"OnParametersSetAsync");
        await base.OnParametersSetAsync();
        InitializeOrOnNextPrefs(await preferencesService.GetPreferences());
        await GetInitialHeadlines();

        // TODO remove temporary code below for exploration.  Will be useful when requested to sign a specific request, such as issuing a credential
        var initialUriQuery = extensionEnvironmentService.InitialUriQuery;
        logger.LogWarning($"Chrome URI query: {initialUriQuery}");
        if (QueryHelpers.ParseQuery(initialUriQuery).TryGetValue("message", out var message))
        {
            var decodedMsg = HttpUtility.UrlDecode(message);
            logger.LogInformation("Chrome URI query message decoded: {msg}", decodedMsg);
            // TODO try-parse the message into a known type and handle it
        } // TODO implement else

        logger.LogWarning("escapedOriginStr: {x}", escapedOriginStr);
        var xxx = HttpUtility.UrlDecode(escapedOriginStr);
        logger.LogWarning("OriginStr: {x}", xxx);
        OriginStr = xxx.Trim('"'); 

        // if (QueryHelpers.ParseQuery(initialUriQuery).TryGetValue("origin", out var encodedOrigin))
        // {
        //     OriginStr = HttpUtility.UrlDecode(encodedOrigin);
        //     logger.LogInformation("Chrome URI initialUriQuery origin: {originStr}", OriginStr);
        //     logger.LogInformation("Chrome originAuthority: {originAuthority}", OriginUrl.Authority);
        //     logger.LogWarning("escapedOriginStr: {x}", escapedOriginStr);
        // } TODO implement else
    }

    async Task GetInitialHeadlines()
    {
        logger.LogInformation("GetHeadlines...");
        var res = await identifiersService.GetIdentifierHeadlines();
        if (res != null && res.IsSuccess)
        {
            logger.LogInformation("GetIdentifierHeadlines: count {1}", res.Value.Count);
            IdentifierHeadlines = res.Value;
            IdentifierHeadlines = IdentifierHeadlines.OrderBy(a => a.Alias).ToList();
            if (IdentifierHeadlines.Count > 0)
            {
                var wcRes = await websiteConfigService.GetOrCreateWebsiteConfig(GetOriginUri());
                logger.LogInformation("GetHeadlines: getOrCreateWebsite: {0}", JsonSerializer.Serialize(wcRes));
                if (wcRes.IsFailed)
                {
                    logger.LogError("Error in websiteService: {0}", wcRes.Errors);
                    return;
                }
                WebsiteConfig newWebsite = wcRes.Value;
                if (newWebsite.RememberedPrefixOrNothing is not null)
                {
                    SelectedHeadlineOrNothing = IdentifierHeadlines.First(a => a.Prefix == newWebsite.RememberedPrefixOrNothing);
                }
                else
                {
                    // use the user's general preferences or otherwise the first headline
                    SelectedHeadlineOrNothing = IdentifierHeadlines.First(a => a.Prefix == AppActivePrefix);
                    if (SelectedHeadlineOrNothing is null)
                    {
                        SelectedHeadlineOrNothing = IdentifierHeadlines.First();
                    }
                }
                logger.LogInformation("SelectedHeadlineOrNothing: Alias: {0}", SelectedHeadlineOrNothing?.Alias ?? "UNSET!");
                SelectedPrefix = SelectedHeadlineOrNothing?.Prefix ?? "UNSET!";
                Debug.Assert(SelectedHeadlineOrNothing is null, "Unexpected null value for SelectedHeadlineOrNothing");
                await getWebsiteConfig(GetOriginUri());
                StateHasChanged();
            }
            else
            {
                throw new Exception("No Identifiers found");
            }
        };
    }

    async Task getWebsiteConfig(Uri uri)
    {
        logger.LogInformation("getWebsiteConfig uri: {uri}", uri);
        var x = await websiteConfigService.GetOrCreateWebsiteConfig(uri);
        if (x.IsSuccess)
        {
            ThisWebsiteConfig = x.Value;
            // TODO: update the getter for the following properties to use this
            IsPrefixRemembered = x.Value.RememberedPrefixOrNothing == SelectedPrefix;
            IsAutoSignIn = x.Value.AutoSignInChoice == AutoSignInMode.Identifier;
            StateHasChanged();
        }
        else
        {
            throw new Exception("No Identifiers found");
        }
    }

    void InitializeOrOnNextPrefs(Preferences prefs)
    {
        AppActivePrefix = prefs.SelectedAid;
        this.StateHasChanged();
    }

    public void Dispose()
    {
        // TODO unsubscribe from services, observables
        ;
    }
}

<div id="@this.GetType().Name" class="bt-body-page" style="height:100%;">
    <div class="d-flex gap-3 bt-main" style="height:100%;">
        <MudStack>
            <div class="bt-main-inside-scroll">
                <MudText Typo="Typo.h6">Request to Sign In</MudText>
                <MudText Typo="Typo.body1"><em>@OriginStr</em></MudText>
                <MudStack Class="gap-0">
                    <MudText Class="mt-6"><b>Identifier</b></MudText>
                    <MudSelect T="string" Value="@SelectedPrefix" ValueChanged="async (string v) => await updateSelectedPrefix(v)">
                        @foreach (var identifierHeadline in IdentifierHeadlines)
                        {
                            <MudSelectItem Value="@identifierHeadline.Prefix">
                                <MudStack Row Style="align-items:center;">
                                    <MudIcon Icon=@identifierHeadline.Identicon ViewBox="0 0 100 100" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden; margin-top: 3px;" />
                                    <div class="bt-sad-2" style="display:contents;">
                                        <MudText Typo="Typo.subtitle2" Color="Color.Primary">@identifierHeadline.Alias</MudText>
                                    </div>
                                </MudStack>
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudStack>
                <MudStack Class="gap-0">
                    <MudText Class="mt-6"><b>Options</b></MudText>
                    <MudText Typo="Typo.body1">for future requests from <em>@OriginStr</em></MudText>
                    <MudCheckBox Label="Remember this identifier" Value="@IsPrefixRemembered" ValueChanged="async (bool b) => await updateIsPrefixRemembered(b)" />
                    <MudCheckBox Label="Enable auto SignIn" Value="@IsAutoSignIn" ValueChanged="async (bool b) => await updateIsAutoSignIn(b)" />
                    @{
                        /* If "Enable auto SignIn" is set, but not with this Identifier, show the other identifier */
                        if (ThisWebsiteConfig?.AutoSignInChoice == AutoSignInMode.Identifier && ThisWebsiteConfig?.RememberedPrefixOrNothing != SelectedPrefix)
                        {
                            <MudText Class="pt-0 mt-0 pl-10" Typo="Typo.caption">(enabled for "@IdentifierHeadlines.First(x => x.Prefix == ThisWebsiteConfig?.RememberedPrefixOrNothing).Alias)"</MudText>
                        }
                    }
                </MudStack>
            </div>
            <MudSpacer />
            <MudStack Row="true" class="bt-button-tray">
                <MudSpacer />
                <MudButton StartIcon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled" Color="Color.Tertiary">Cancel</MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Login" Variant="Variant.Filled" Color="Color.Primary">Sign In</MudButton>
            </MudStack>
        </MudStack>
    </div>
</div>

<style>
    .mud-select .mud-select-input .mud-input-slot {
        height: auto;
    }
</style>