@page "/Authenticators"

@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.AppConfig;
@using static KeriAuth.BrowserExtension.Helper.Identicon;
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@using System.Diagnostics
@using System.Text.Json
@using WebExtensions.Net
@using WebExtensions.Net.Runtime
@using JsBind.Net

@using System.Net.Http.Json
@inject HttpClient httpClient
@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService
@inject NavigationManager navManager
@inject IJSRuntime js
@inject ILogger<Authenticators> logger
@inject IdentifiersService identifiersService
@inject ISignifyClientService signifyClientService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inject IWebExtensionsApi webExtensionsApi
@inject IJsRuntimeAdapter jsRuntimeAdapter

@code {
    // [Parameter]
    // public string? CredentialId { get; set; }

    // fields

    // properties


    public record RegisteredAuthenticator
    {
        public string? credential { get; init; }
        public required string name { get; init; }
    }
    List<RegisteredAuthenticator> RegisteredAuthenticators = new List<RegisteredAuthenticator>();

    // reactive properties
    string CountLabel => "(" + RegisteredAuthenticators.Count + ")";


    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation($"OnInitializedAsync");
    }

    protected override async Task OnParametersSetAsync()
    {
        logger.LogInformation($"OnParametersSetAsync");
        webExtensionsApi = new WebExtensionsApi(jsRuntimeAdapter);
        var jsonElement = await webExtensionsApi.Storage.Sync.Get("credentialId");
        logger.LogWarning("jsonElement: {j}", jsonElement);
        if (jsonElement.GetRawText().Length > 5) //  .TryGetBytesFromBase64(out byte[]? bytes))
        {
            logger.LogWarning("jsonElement length > 5");
            RegisteredAuthenticators.Add(new RegisteredAuthenticator() { name = "Authenticator added " + DateTime.UtcNow.ToString() });
            logger.LogWarning("ras: {r}", RegisteredAuthenticators.ToArray());
        }
        StateHasChanged();
    }

    async Task AddAuthenticator()
    {
        navManager.NavigateTo(AppConfig.RouteToAddAuthenticator);
    }
}

<div id="@this.GetType().Name" class="bt-body-page">
    <MudStack Class="bt-main">
        <div class="d-flex gap-3 bt-main">
            <div class="bt-main-inside-scroll">
                <MudStack Row="true">
                    <MudText Typo="Typo.h6">Authenticators</MudText>
                    <MudText Typo="Typo.h6">@CountLabel</MudText>
                </MudStack>
                <MudStack Class="pt-8">
                    @if (RegisteredAuthenticators.Any())
                    {
                        @foreach (RegisteredAuthenticator ra in RegisteredAuthenticators)
                        {
                            <MudText>@ra.name</MudText>
                            <MudButton>Delete</MudButton>
                        }
                    }
                </MudStack>
            </div>
        </div>
    </MudStack>
    <MudStack Row="true" class="bt-button-tray">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
        <MudSpacer />
        <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="async () => await AddAuthenticator()" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
    </MudStack>
</div>
