@page "/Authenticators"

@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.AppConfig;
@using static KeriAuth.BrowserExtension.Helper.Identicon;
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@using System.Diagnostics
@using System.Text.Json
@using WebExtensions.Net
@using WebExtensions.Net.Runtime
@using JsBind.Net
@using System.Linq;

@using System.Net.Http.Json
@inject HttpClient httpClient
@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService
@inject NavigationManager navManager
@inject IJSRuntime js
@inject ILogger<Authenticators> logger
@inject IdentifiersService identifiersService
@inject ISignifyClientService signifyClientService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inject IWebExtensionsApi webExtensionsApi
@inject IJsRuntimeAdapter jsRuntimeAdapter
@inject IWebauthnService webauthnService

@code {
    // [Parameter]
    // public string? CredentialId { get; set; }

    // fields

    // properties


    public record RegisteredAuthenticator
    {
        public string? credential { get; init; }
        public required string name { get; init; }
    }

    RegisteredAuthenticators MyRegisteredAuthenticators = new RegisteredAuthenticators();

    // reactive properties
    string CountLabel => "(" + MyRegisteredAuthenticators.Authenticators.Count + ")";


    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation($"OnInitializedAsync");
        // TODO P2 does this need to be recreated here?
        webExtensionsApi ??= new WebExtensionsApi(jsRuntimeAdapter);
    }

    protected override async Task OnParametersSetAsync()
    {
        logger.LogInformation($"OnParametersSetAsync");
        MyRegisteredAuthenticators = await webauthnService.getRegisteredAuthenticators();
        StateHasChanged();
    }

    async Task AddAuthenticator()
    {
        navManager.NavigateTo(AppConfig.RouteToAddAuthenticator);
    }

    async Task rename(string newName, string credentialBase64)
    {
        if (newName.Length == 0)
        {
            return;
        }
        var updatedAuthenticators = new RegisteredAuthenticators()
            {
                Authenticators = MyRegisteredAuthenticators.Authenticators
                        .Select(auth => auth.CredentialBase64.GetHashCode() == credentialBase64.GetHashCode()
                            ? auth with { Name = newName, LastUpdatedUtc = DateTime.UtcNow }
                            : auth)
                        .ToList()
            };
        await webExtensionsApi.Storage.Sync.Set(updatedAuthenticators);
        snackbar.Add("Successfully renamed authenticator", Severity.Success);
        // update page's collection
        MyRegisteredAuthenticators = await webauthnService.getRegisteredAuthenticators();
    }

    async Task delete(string credentialBase64)
    {
        var updatedAuthenticators = new RegisteredAuthenticators()
            {
                Authenticators = MyRegisteredAuthenticators.Authenticators
                                .Where(auths => auths.CredentialBase64.GetHashCode() != credentialBase64.GetHashCode())
                                .ToList()
            };
        await webExtensionsApi.Storage.Sync.Set(updatedAuthenticators);
        snackbar.Add("Successfully removed authenticator registration", Severity.Success);
        // update page's collection
        MyRegisteredAuthenticators = await webauthnService.getRegisteredAuthenticators();
    }

    async Task test(string credentialBase64)
    {
        var authCredResult = await webauthnService.AuthenticateCredential([credentialBase64]);
        if (authCredResult.IsSuccess) {
            // TODO P2 do a complete decription test
            logger.LogWarning("tested, sort-of, but not the passcode encryption: {e}", authCredResult.ValueOrDefault);
            snackbar.Add("Successfully tested", Severity.Success);
        } else
        {
            snackbar.Add("Failed test", Severity.Warning);
        }
        return;
    }
}

<div id="@this.GetType().Name" class="bt-body-page">
    <MudStack Class="bt-main">
        <div class="d-flex gap-3 bt-main">
            <div class="bt-main-inside-scroll">
                <MudStack Row="true">
                    <MudText Typo="Typo.h6">Authenticators</MudText>
                    <MudText Typo="Typo.h6">@CountLabel</MudText>
                </MudStack>
                <MudStack Class="pt-8">
                    @if (MyRegisteredAuthenticators.Authenticators.Any())
                    {
                        @foreach (var ra in MyRegisteredAuthenticators.Authenticators)
                        {
                            <MudCard>
                                <MudCardContent Style="pb-0 mb-0">
                                    <MudTextField Value="@ra.Name" HelperText="" Label="" DebounceInterval="2000" OnDebounceIntervalElapsed="@(async (newName) => await rename(newName, ra.CredentialBase64))" />
                                    <MudText Color="Color.Secondary" Style="font-weight:100; font-size:small;"><span>Registered: </span>@ra.CreationTime.ToString("u")</MudText>
                                    <MudText Color="Color.Secondary" Style="font-weight:100; font-size:small;"><span>Updated: </span>@ra.LastUpdatedUtc.ToString("u")</MudText>
                                </MudCardContent>
                                <MudCardActions Style="justify-content:flex-end; padding:0;">
                                    <MudButton OnClick="async () => await test(ra.CredentialBase64)">Test</MudButton>
                                    <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Error" OnClick="async () => await delete(ra.CredentialBase64)">Delete</MudIconButton>
                                </MudCardActions>
                            </MudCard>
                        }
                    }
                </MudStack>
            </div>
        </div>
    </MudStack>
    <MudStack Row="true" class="bt-button-tray">
        <MudIconButton Icon="@Icons.Material.Filled.ArrowBackIosNew" Variant="Variant.Text" OnClick='@( async () => await GoBack(js) )' Class="justify-start" />
        <MudSpacer />
        <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="async () => await AddAuthenticator()" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
    </MudStack>
</div>
