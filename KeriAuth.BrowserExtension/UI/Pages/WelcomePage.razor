@page "/Welcome"
@layout MainLayout

@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension
@using KeriAuth.BrowserExtension.UI.Layouts
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.Services.SignifyService.Models
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@using static KeriAuth.BrowserExtension.AppConfig;
@using static KeriAuth.BrowserExtension.Helper.UIHelper;
@using static KeriAuth.BrowserExtension.Services.SignifyService.SignifyServiceConfig
@using FluentResults
@using JsBind.Net
@using JsBind.Net.Configurations
@using System.Diagnostics;
@using System.Text.Json;
@using System.Text.Json.Nodes
@using Blazor.BrowserExtension
@using WebExtensions.Net
@using WebExtensions.Net.Runtime
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using JsonSerializer = System.Text.Json.JsonSerializer
@using static System.Net.WebRequestMethods
@using System.ComponentModel.DataAnnotations
@using System.Linq
@using System.Text
@using System.Security.Cryptography

@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject ILogger<WelcomePage> logger
@inject HttpClient http
@inject NavigationManager navManager
@inject IJSRuntime js
@inject ISignifyClientService signifyClientService
@inject ISnackbar snackbar

@code {
    protected override async Task OnInitializedAsync()
    {
        // logger.LogInformation("OnInitializedAsync");
    }

    private async Task AcknowledgeWelcome()
    {
        var res = await storageService.GetItem<OnboardState>();
        // logger.LogWarning("pre-stored OnboardStateRes: {s}", res);
        if (res.IsFailed || res.Value is null)
        {
            throw new Exception("OnboardState not found");
        }
        var onboardState = res.Value;
        onboardState = onboardState with { HasAcknowledgedInstall = true };
        await storageService.SetItem(onboardState);

        navManager.NavigateTo(RouteToIndex);
        return;
    }
}

<div id="@this.GetType().Name" class="bt-body-page">
    <div class="d-flex gap-3 bt-main">
        <div class="bt-main-inside-scroll">
            <MudText Typo="Typo.h6">Welcome</MudText>
            <MudStack>
                <MudText Typo="Typo.body1">
                    Thank you for installing KERI Auth.
                    Enjoy exploring our features and capabilities.
                    <br />
                    This beta release supports the following features:
                </MudText>
                <MudContainer>
                    <ul style="list-style-type:circle;">
                        <li>Configure a connection with a KERI Agent Service (KERIA) of your choosing</li>
                        <li>Create one or more KERI identifiers</li>
                        <li>Select your current KERI identifier</li>
                        <li>View credentials issued to your identifiers</li>
                        <li>
                            Visit websites supporting KERI's Signify protocol, and:
                            <ul style="list-style-type:circle; margin-left:10px;">
                                <li>Launch this extension</li>
                                <li>Sign In with your KERI identifier or a credential</li>
                                <li>Authorize access to websites resources by signing Http Request Headers, presented with a credential you have</li>
                            </ul>
                        </li>
                    </ul>
                </MudContainer>
                <MudText Typo="Typo.body1">For more information, see <a href="https://keriauth.com" target="blank">keriauth.com</a>.</MudText>
            </MudStack>
        </div>
    </div>
    <MudStack Row="true" class="bt-button-tray">
        <MudSpacer></MudSpacer>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await AcknowledgeWelcome())" Class="justify-end" data-testid="next">Next</MudButton>
    </MudStack>
</div>
