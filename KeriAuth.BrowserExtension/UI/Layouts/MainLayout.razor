@inherits BaseLayout

@using KeriAuth.BrowserExtension;
@using KeriAuth.BrowserExtension.Helper;
@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using KeriAuth.BrowserExtension.UI.Components
@using KeriAuth.BrowserExtension.UI.Pages
@using FluentResults;
@using System.Diagnostics;
@using static KeriAuth.BrowserExtension.AppConfig;
@using System.Reactive.Linq
@using System.Text.Json
@inject HttpClient http
@inject IJSRuntime js
<!-- inject Blazor.BrowserExtension.IBrowserExtensionEnvironment BrowserExtensionEnvironment  -->
@inject NavigationManager navManager
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject IStorageService storageService
@inject IPreferencesService preferencesService
@inject ISnackbar snackbar
@inject IAlarmService alarmService
@inject ILogger<MainLayout> logger
@inject IStateService stateService
@inject IdentifiersService identifiersService
@inject ISignifyClientService signifyClientService
@implements IDisposable

<!-- Note this is wrapped by the outter content in BaseLayout -->

<MudThemeProvider Theme="@AppConfig.MyCustomTheme" @bind-IsDarkMode="@App.IsDarkTheme" />
<MudDialogProvider />
<MudSnackbarProvider Style="z-index:9999" />


<MudLayout id="MainLayout" Style="overflow-y:hidden; overflow-x:hidden; box-sizing: border-box; position:absolute; top:0; width:100vw;">
    <!-- APP BAR -->
    <MudAppBar Elevation="2" Style="padding-left: 0px; padding-right: 0px; height:var(--bt-appbar-height);">
        <MudStack Style="height:inherit; width: 100%; padding-bottom:8px;" Class="d-flex pt-2" Row="true">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleMenuDrawer" Style="padding-left: 5px;" data-testid="menuHamburger" />
            <MudButton Href="@RouteToStart" Style="padding: 10px; height:fit-content; align-self:center; border:none; border-radius:16px; background:#00000020;">
                <img src="images/512_keri_logo.png" alt="Icon" style="width: 24px; height: 24px;" />
                <MudText Style="margin-left:7px; font-size:larger; color:hsl(274deg 78% 75%)">KERI Auth</MudText>
            </MudButton>

            <MudSpacer />
            <div style="align-items: center; display: flex; Background:Transparent">
                @if (HasNewMessages)
                {
                    <MudTooltip Text="Notifications" Delay="1000">
                        <MudIconButton OnClick="GoToChat" Icon="@Icons.Material.Filled.Message" Color="Color.Inherit" />
                    </MudTooltip>
                }
            </div>
            <!-- KERIA Connected Indicator -->
            <div style="align-self:center; height: 35px; margin-right: -8px;">
                @if (IsAuthenticated)
                {
                    <MudTooltip Text="Connected to KERI Agent" Arrow="true" Placement="Placement.Left" Delay="1000">
                        @if (CurrentState == IStateService.States.AuthenticatedDisconnected)
                        {
                            <MudPaper Style="width: 35px; height: 35px; border-radius: 50%; display: flex; box-shadow:none; align-items: center; justify-content: center; background-color: transparent; color:var(--mud-palette-error)">
                                <MudIcon Icon="@Icons.Material.Filled.LinkOff" @onclick="async () => await RefreshConnect()" />
                            </MudPaper>
                        }
                        else
                        {
                            <MudPaper Style="width: 35px; height: 35px; border-radius: 50%; display: flex; box-shadow:none; align-items: center; justify-content: center; background-color: transparent; color:var(--mud-palette-success)">
                                <MudIcon Icon="@Icons.Material.Filled.Link" @onclick="async () => await RefreshConnect()" />
                            </MudPaper>
                        }
                    </MudTooltip>
                }
            </div>

            <!-- Current Identifier Identicon -->
            <div style="align-self:center; height: 35px; margin-right: -8px;">
                @if (!IsIdenticonHidden)
                {
                    <MudTooltip Text="@ActiveAidTooltip" Arrow="true" Placement="Placement.Left" Delay="1000">
                        <MudIcon @onclick="ClickToggleProfilePanel" ViewBox="0 0 100 100" Icon="@ActiveAidIdenticon" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                    </MudTooltip>
                }
            </div>

        </MudStack>
        <!-- The AID selector overlay covers entire page -->
        <MudOverlay DarkBackground LightBackground @bind-Visible="@IsProfilePanelOpen" OnClick="ToggleProfilePanel" Style="display: block; width:100vw; min-height:100vh; height:fit-content; overflow-y:auto; color:var(--mud-palette-primary);">
            <div style="background:var(--mud-palette-background); position:absolute; height: auto; right: 0px; display:block; width:300px; margin-top: var(--bt-appbar-height); border-style: solid; border-top-style:none; border-width: 1px; border-color: #CACACA;">
                <MudList Clickable="true" @bind-SelectedValue="ActiveAid" Class="bt-sad-4;" Style="padding: 0px">
                    @foreach (var identifierHeadline in IdentifiersHeadlines)
                    {
                        <MudListItem Value="@identifierHeadline.Prefix" OnClick="async () => await SetActiveAid()" Style="@IdentifiersPage.cardClass((string)ActiveAid, identifierHeadline.Prefix)" Class="bt-sad-5">
                            <MudStack Row="true">
                                <MudIcon Icon=@identifierHeadline.Identicon ViewBox="0 0 100 100" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden; margin-top: 3px;" />
                                <div class="bt-sad-2" style="display:contents;">
                                    <MudText Typo="Typo.subtitle2" Color="Color.Primary">@identifierHeadline.Alias</MudText>
                                </div>
                            </MudStack>
                        </MudListItem>
                        <MudDivider DividerType="DividerType.Inset" />
                    }
                </MudList>
                <MudStack Row="true" Class="mt-3 mb-3 d-flex justify-end" Style="padding-right:8px;">
                    <MudSpacer></MudSpacer>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" Href=@RouteToIdentifiers>Manage Identifiers</MudButton>
                </MudStack>
            </div>
        </MudOverlay>
    </MudAppBar>



    <!-- MENU DRAWER AND MAIN CONTENT -->
    @{
        /* TODO P3 the linear gradient background experiment should either eliminated or make visually good and depending on IsDarkTheme setting */
    }
    <MudDrawerContainer id="MudDrawerContainer" Style="height:calc(100vh - var(--mud-appbar-height)); top:var(--mud-appbar-height); position:absolute; width:inherit; display:flex;">
        <!--  background-image:linear-gradient( 135deg, HSLA(205, 45%, 44%, 0.0), HSLA(189, 100%, 50%, 0.1) );">  -->
        <MudDrawer id="MudDrawer" @ref="mudDrawerRef" @bind-Open="@IsMenuDrawerOpen" Elevation="1" ClipMode="DrawerClipMode.Never" Variant="@DrawerMode" OpenMiniOnHover="true">
            <MudNavMenu Style="Background: var(--mud-palette-appbar-background); height:calc(100vh - var(--mud-appbar-height)); overflow-y:auto;">
                <MudNavLink Href=@(RouteToRequestSignIn + System.Web.HttpUtility.UrlEncode("https://unset.com")) Icon="@Icons.Material.Filled.Key" IconColor="Color.Surface">Request SignIn</MudNavLink>
                <MudNavLink Href=@RouteToIdentifiers Disabled="@(!IsAuthenticated)" Icon="@Icons.Material.Filled.Key" IconColor="Color.Surface">Identifiers</MudNavLink>
                <MudNavLink Href=@RouteToGroups Disabled="@(!IsAuthenticated)" Icon="@Icons.Material.Filled.Groups" IconColor="Color.Surface">Groups</MudNavLink>
                <MudNavLink Href=@RouteToCredentials Disabled="@(!IsAuthenticated)" Icon="@Icons.Material.Filled.Badge" IconColor="Color.Surface">Credentials</MudNavLink>
                <MudNavLink Href=@RouteToNotifications Disabled="@(!IsAuthenticated)" Icon="@Icons.Material.Filled.Notifications" IconColor="Color.Surface">Notifications</MudNavLink>
                <MudNavLink Href=@RouteToContacts Disabled="@(!IsAuthenticated)" Icon="@Icons.Material.Filled.Contacts" IconColor="Color.Surface">Contacts</MudNavLink>
                <MudNavLink Href=@RouteToSchemas Disabled="@(!IsAuthenticated)" Icon="@Icons.Material.Filled.Schema" IconColor="Color.Surface">Schemas</MudNavLink>
                <MudNavLink Href=@RouteToContacts Disabled="@(!IsAuthenticated)" Icon="@Icons.Material.Filled.Web" IconColor="Color.Surface" data-testid="menuContacts">Websites</MudNavLink>
                <MudNavLink Disabled=@(!IsInPopup) OnClick=OpenTabAndClosePopUp Icon="@Icons.Material.Filled.OpenInFull" IconColor="Color.Surface">Pop out to tab</MudNavLink>
                <MudNavGroup Title="Advanced" Icon="@Icons.Material.Filled.Settings" IconColor="Color.Surface">
                    @{
                        /* TODO P3 convert to a "navigate(url)" type of method, so tooltip of URL doesn't show in browser?' */
                    }
                    <MudNavLink Href=@RouteToManagePrefs Disabled="@(!IsAuthenticated)" Icon="@Icons.Material.Filled.SettingsApplications" IconColor="Color.Surface">Preferences</MudNavLink>
                    <MudNavLink Href=@RouteToManageAgents Disabled="@(!IsAuthenticated)" Icon="@Icons.Material.Outlined.PeopleOutline" IconColor="Color.Surface">KERI Agent Service</MudNavLink>
                    @{
                        /*
                        <MudNavLink Disabled="true" Icon="@Icons.Material.Filled.Key" IconColor="Color.Surface">Keys</MudNavLink>
                        */
                    }
                    <MudNavLink OnClick="async () => await Lock()" Disabled="@(!IsAuthenticated)" Icon="@Icons.Material.Filled.Lock" IconColor="Color.Surface">Lock</MudNavLink>
                    <MudNavLink Href=@RouteToDelete Icon="@Icons.Material.Filled.DeleteForever" IconColor="Color.Surface">Delete Configuration&hellip;</MudNavLink>
                </MudNavGroup>
                <MudNavGroup Title="About" Icon="@Icons.Material.Filled.Info" IconColor="Color.Surface">
                    <MudNavLink Href=@RouteToHelp Target="_blank" Icon="@Icons.Material.Filled.Help" IconColor="Color.Surface">Help</MudNavLink>
                    <MudNavLink Href=@RouteToRelease Target="_blank" Icon="@Icons.Material.Filled.StickyNote2" IconColor="Color.Surface">Current Release Notes</MudNavLink>
                    <MudNavLink Href=@RouteToReleaseHistory Icon="@Icons.Material.Filled.StickyNote2" IconColor="Color.Surface">Release History</MudNavLink>
                    <MudNavLink Href=@RouteToTerms Target="_blank" Icon="@Icons.Material.Filled.StickyNote2" IconColor="Color.Surface">Terms of Use</MudNavLink>
                    <MudNavLink Href=@RouteToPrivacyHtml Target="_blank" Icon="@Icons.Material.Filled.StickyNote2" IconColor="Color.Surface">Privacy Policy</MudNavLink>
                    <MudNavLink Href=@RouteToLicenses Icon="@Icons.Material.Filled.StickyNote2" IconColor="Color.Surface">Licenses</MudNavLink>
                    <MudNavLink Href=@RouteToReleaseHistory Icon="@Icons.Material.Filled.Info" IconColor="Color.Surface">Version @version_name</MudNavLink>
                </MudNavGroup>
            </MudNavMenu>
        </MudDrawer>

        <!-- MAIN CONTENT -->
        <MudMainContent Class="bt-main-content" Style="@MainContentStyle">
            <MudContainer MaxWidth="MaxWidth.Large" Style="height:inherit; min-height:inherit; padding-left:0; padding-right:0;">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudDrawerContainer>
</MudLayout>



@code {
    bool IsMenuDrawerOpen { get; set; }
    bool IsProfilePanelOpen { get; set; }
    bool IsIdenticonHidden
    {
        get
        {
            return (string.IsNullOrEmpty((string)ActiveAid) || stateService.GetState() == IStateService.States.Unauthenticated);
        }
    }
    bool IsInPopup { get; set; }
    bool HasNewMessages { get; set; }
    object ActiveAid { get; set; } = "";
    string ActiveAidIdenticon { get; set; } = "";
    string ActiveAidTooltip { get; set; } = "";
    string version = "0.0.0";
    string version_name = "unset 33";
    string MainContentStyle { get; set; } = " left:0; ";
    bool IsAuthenticated => stateService.IsAuthenticated();
    MudBlazor.MudDrawer mudDrawerRef = new();
    DrawerVariant DrawerMode { get; set; }
    IdleAlarm? idleAlarm;

    // TODO: Implement instead the newer [JSExport] attribute? See https://learn.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/import-export-interop?view=aspnetcore-8.0
    [JSInvokable]
    public Task ResetInactivityTimer()   // this method name needs to match the JS literal that invokes this
    {
        Debug.Assert(idleAlarm != null);
        idleAlarm.Reset();
        return Task.CompletedTask;
    }

    private async Task OnIdleHandler()
    {
        // Action to perform on inactivity
        logger.LogInformation("Timed out OnIdleHandler");
        await stateService.TimeOut();
        // note that lock() will be invoked in a reactive method
    }

    public class ManifestData
    {
        public string Version { get; set; } = "0.0.0";
        public string Version_name { get; set; } = "unset verson name";
    }

    private IDisposable? preferencesSubscription;
    private IDisposable? stateSubscription;

    private async Task RefreshConnect()
    {
        // TODO not yet implemented
        snackbar.Add("Refreshing connection...", Severity.Info);
        await Task.Delay(0);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        logger.LogInformation("OnParametersSetAsync");

        // If not currently authenticated and are now on a page
        // that requires authentication, then redirect to Start
        if (!IsAuthenticated)
        {
            var ap = new Uri(navManager.Uri).AbsolutePath;
            if (ViewsNotRequiringAuth.Contains(ap))
            {
                return;
            }
            else
            {
                logger.LogInformation("Navigating to Start because not authenticated");
                navManager.NavigateTo(RouteToStart);
            }
        }
    }

    static public IJSObjectReference? utilModule;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        switch (stateService.GetState())
        {
            case IStateService.States.AuthenticatedDisconnected:
                IdentifiersHeadlines = [];
                break;
            case IStateService.States.AuthenticatedConnected:
                var res = await identifiersService.GetIdentifierHeadlines();
                if (res.IsSuccess)
                {
                    IdentifiersHeadlines = res.Value;
                    IdentifiersHeadlines = IdentifiersHeadlines.OrderBy(a => a.Alias).ToList();
                    return;
                }
                break;
            default:
                IdentifiersHeadlines = [];
                break;
        }
    }

    List<IdentifierHeadline> IdentifiersHeadlines { get; set; } = [];

    // Compute the Left position for MainContent depending on the type of Drawer and its open state
    // This complexity might be needed because we want to support multiple DrawerVariant's and because of issues such as mentioned here: https://github.com/MudBlazor/MudBlazor/issues/4213
    private void UpdateMainContentStyle()
    {
        const string miniWidth = "var(--mud-drawer-mini-width-left)";
        const string openWidth = "var(--mud-drawer-width-left)";

        // TODO P3 Menu: Handle the corner case: if the Panel's Variant is Responsive and left value is not 0, then the left value is negative and off-screen.  Effectively, it is closed.
        // This can be seen in the dynamic classes for MudDrawer such as "mud-drawer.mud-drawer-responsive.mud-drawer-pos-left.mud-drawer--open"
        // An implemenentation idea is to compute the MudDrawer's "effectiveOpenState" for how it appears visually.
        // One could get the html MudDrawer element by id and/or class, and see if its left value is 0 or something else.
        // See also https://www.syncfusion.com/faq/blazor/javascript-interop/how-do-i-get-an-element-by-id-or-class-in-blazor

        // logger.LogInformation("MainLayout: UpdateMainContentStyle: isMenuDrawerOpen:" + isMenuDrawerOpen + " mudDrawerRef.Variant=" + mudDrawerRef.Variant);

        MainContentStyle = (IsMenuDrawerOpen, mudDrawerRef.Variant) switch
        {
            (_, DrawerVariant.Mini) => $"left: {miniWidth}; width:calc(100vw - {miniWidth});",
            (_, DrawerVariant.Temporary) => $"left: 0; width:calc(100vw);",
            (true, DrawerVariant.Persistent) => $"left: {openWidth}; width:calc(100vw - {openWidth}); padding-right: {openWidth};",
            (true, _) => $"left: 0; width:calc(100vw);",
            (false, DrawerVariant.Persistent) => $"left: 0; width:calc(100vw);",
            (false, _) => $"left: {openWidth}; width:calc(100vw - {openWidth});",
        };
        StateHasChanged();
    }

    public void Dispose()
    {
        preferencesSubscription?.Dispose();
    }

    async Task HandleNextFromPreferencesService(Preferences value)
    {
        await InitializeOrOnNextPrefs(value);
    }

    async Task HandleErrorFromPreferencesService(Exception error)
    {
        await Task.Delay(0);
        logger.LogError("Error from PreferencesService: " + error.Message);
    }

    async Task HandleCompletedFromPreferencesService()
    {
        await Task.Delay(0);
        logger.LogInformation("Completed from PreferencesService");
    }

    async Task HandleNextFromStateService(IStateService.States updatedState)
    {
        await Task.Delay(0);
        switch (CurrentState, updatedState)
        {
            case (IStateService.States.AuthenticatedDisconnected, IStateService.States.Unauthenticated):
            case (IStateService.States.Unauthenticated, IStateService.States.Unauthenticated):
                CurrentState = updatedState;
                StateHasChanged();
                navManager.NavigateTo(RouteToStart);
                return; // intentionally not break
            case (_, IStateService.States.AuthenticatedDisconnected):
            case (_, IStateService.States.AuthenticatedConnected):
            case (_, _):
                break;
        }
        CurrentState = updatedState;
        StateHasChanged();
    }

    async Task HandleErrorFromStateService(Exception error)
    {
        await Task.Delay(0);
        logger.LogError("Error from stateService: " + error.Message);
    }

    async Task HandleCompletedFromStateService()
    {
        await Task.Delay(0);
        logger.LogInformation("Completed from stateService");
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        logger.LogInformation("OnInitializedAsync");

        // Set properties affecting UI layout depending on the hosting environment
        logger.LogInformation("OnInitializedAsync env: {env}", extensionEnvironmentService.ExtensionEnvironment.ToString());
        switch (extensionEnvironmentService.ExtensionEnvironment)
        {
            case ExtensionEnvironment.ActionPopup:
                IsInPopup = true;
                break;
            case ExtensionEnvironment.None:
                break;
            case ExtensionEnvironment.BrowserPopup:
                IsInPopup = true;
                break;
            case ExtensionEnvironment.Iframe:
            case ExtensionEnvironment.Extension:
            default:
                break;
        }

        // TODO P2: update this to use chrome.runtime.getManifest()
        // Get version info from Manifest file
        const string manifestFilePath = "./manifest.json";
        var manifestData = await http.GetFromJsonAsync<ManifestData>(manifestFilePath);
        if (manifestData is not null)
        {
            version = manifestData.Version;
            version_name = manifestData.Version_name;
        }

        preferencesSubscription = preferencesService.Subscribe(
            onNext: async (Preferences value) => await HandleNextFromPreferencesService(value),
            onError: async (Exception error) => await HandleErrorFromPreferencesService(error),
            onCompleted: async () => await HandleCompletedFromPreferencesService());
        await InitializeOrOnNextPrefs(await preferencesService.GetPreferences());

        stateSubscription = stateService.Subscribe(
            onNext: async (IStateService.States value) => await HandleNextFromStateService(value),
            onError: async (Exception error) => await HandleErrorFromStateService(error),
            onCompleted: async () => await HandleCompletedFromStateService());
        CurrentState = stateService.GetState();

        idleAlarm = new IdleAlarm(alarmService, async () => await OnIdleHandler());
        await js.InvokeVoidAsync("window.registerInactivityTimerResetEvents", DotNetObjectReference.Create(this));

        return;
    }

    async Task ToggleDarkTheme()
    {
        var prefs = await preferencesService.GetPreferences();
        prefs = prefs with { IsDarkTheme = !prefs.IsDarkTheme };
        App.IsDarkTheme = prefs.IsDarkTheme;
        await preferencesService.SetPreferences(prefs);
    }

    void UpdateDrawerMode(DrawerVariant oldDrawerMode, Preferences prefs)
    {
        // set drawerMode based on environment and preferences
        // TODO move this drawerMode code
        switch (extensionEnvironmentService.ExtensionEnvironment)
        {
            case ExtensionEnvironment.Iframe:
            case ExtensionEnvironment.BrowserPopup:
            case ExtensionEnvironment.ActionPopup:
                DrawerMode = prefs.DrawerVariantInPopup;
                break;
            case ExtensionEnvironment.None:
            case ExtensionEnvironment.Extension:
            default:
                DrawerMode = prefs.DrawerVariantInTab;
                break;
        }
        // if the drawer mode has changed, update the UI to reasonable drawer state
        if (oldDrawerMode != DrawerMode)
        {
            // TODO this might be better if dependant on (oldDrawerMode, drawerMode, isMenuDrawerOpen)
            switch (DrawerMode)
            {
                case DrawerVariant.Mini:
                    IsMenuDrawerOpen = false;
                    break;
                case DrawerVariant.Temporary:
                    IsMenuDrawerOpen = true;
                    break;
                case DrawerVariant.Responsive:
                    IsMenuDrawerOpen = false;
                    break;
                case DrawerVariant.Persistent:
                default:
                    break;
            }
        }
        // TODO persiste the isMenuDrawerOpen state in preferences if Persistence drawer mode is selected. Depends on ExtensionEnvironment.
        // For now, just assume the following:
        if (DrawerMode == DrawerVariant.Persistent && extensionEnvironmentService.ExtensionEnvironment == ExtensionEnvironment.None)
        {
            IsMenuDrawerOpen = true;
        }
    }

    async Task InitializeOrOnNextPrefs(Preferences prefs)
    {
        // logger.LogInformation("received prefs: " + JsonSerializer.Serialize(prefs));
        App.IsDarkTheme = prefs.IsDarkTheme;
        // TODO P4 set the background-image depending on isDarkTheme.
        ActiveAid = (object)prefs.SelectedAid;
        UpdateDrawerMode(DrawerMode, prefs);
        UpdateMainContentStyle();
        // logger.LogInformation("setting ActiveAid to {aid}", prefs.SelectedAid);
        await UpdateActiveAid(prefs.SelectedAid);
        StateHasChanged();
    }

    async Task UpdateActiveAid(string activeAid)
    {
        await Task.Delay(0);
        if (string.IsNullOrEmpty(activeAid))
        {
            ActiveAidIdenticon = "";
            ActiveAidTooltip = "";
            return;
        }
        ActiveAidIdenticon = Helper.Identicon.MakeIdenticon(activeAid);
        var headline = IdentifiersHeadlines.Find(x => x.Prefix == activeAid);
        if (headline is not null)
        {
            ActiveAidTooltip = headline.Alias;
            return;
        }
    }

    async Task OpenTabAndClosePopUp()
    {
        await UIHelper.NewTabAndClosePopup();
        await Task.Delay(8000);  // TODO this will go out of scope when the popup closes.  This is a temporary workaround.
        return;
    }

    async Task Lock()
    {
        await stateService.Unauthenticate();
        navManager.NavigateTo(RouteToStart);
        // Other side-effects will be reactive. See IObserver<StateService>
    }

    async Task SetActiveAid()
    {
        IsProfilePanelOpen = false;
        var pref = await preferencesService.GetPreferences();
        pref = pref with
            {
                SelectedAid = (string)ActiveAid
            };
        await preferencesService.SetPreferences(pref);
        // Other side-effects will be reactive. See IObserver<Preferences>
    }

    private void ClickToggleProfilePanel(MouseEventArgs args)
    {
        ToggleProfilePanel();
    }

    void ToggleProfilePanel()
    {
        IsProfilePanelOpen = !IsProfilePanelOpen;
    }

    void OpenMenuDrawer()
    {
        IsMenuDrawerOpen = true;
        UpdateMainContentStyle();
    }

    void ToggleMenuDrawer()
    {
        IsMenuDrawerOpen = !IsMenuDrawerOpen;
        UpdateMainContentStyle();
    }

    private void GoToChat()
    {
        // TODO P3 Chat: hasNewMessages should be responsive to existence of unread messages, not this click
        HasNewMessages = false;
        navManager.NavigateTo(RouteToChat);
    }

    // TODO why not make this always get the current state from stateService?
    public static IStateService.States CurrentState { get; set; } = IStateService.States.Unknown;
}
