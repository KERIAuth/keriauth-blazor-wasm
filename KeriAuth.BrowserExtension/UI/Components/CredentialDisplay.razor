@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Services
@using Microsoft.VisualBasic
@using System.Text.Json;
@using System.Diagnostics;
@using System.Diagnostics.CodeAnalysis;
@using static KeriAuth.BrowserExtension.Helper.Identicon;
@inject ILogger<CredentialDisplay> logger
@inject IJSRuntime js
@inject ISnackbar snackbar
@inject IStorageService storageService

@code {
    [Parameter]
    [NotNull]
    public Dictionary<string, object>? credential { get; init; }

    [Parameter]
    [NotNull]
    public CredentialDisplayDetail displayDetail { get; init; }

    // fields and types
    public enum CredentialDisplayDetail
    {
        Minimal,
        MinimalWithoutIssuee,
        Typical,
        Full
    }

    // properties

    // reactive properties
    string? SchemaTitle => DictionaryConverter.GetValueByPath(credential, "schema.title")?.Value?.ToString() ?? string.Empty;
    string? SchemaDescr => DictionaryConverter.GetValueByPath(credential, "schema.description")?.Value?.ToString() ?? string.Empty;
    string? IssuerLabel => DictionaryConverter.GetValueByPath(credential, "schema.properties.i.description")?.Value?.ToString() ?? String.Empty;
    string IssuerValue => DictionaryConverter.GetValueByPath(credential, "sad.i")?.Value.ToString() ?? String.Empty;
    string? IssuedDate => DictionaryConverter.GetValueByPath(credential, "sad.a.dt")?.Value?.ToString()?.Substring(0, 10) ?? string.Empty;
    string? PersonLegalNameLabel => (SchemaProperties1 is null) ? null : DictionaryConverter.GetValueByPath(SchemaProperties1, "properties.personLegalName.description")?.Value.ToString() ?? String.Empty;
    string? PersonLegalNameValue => DictionaryConverter.GetValueByPath(credential, "sad.a.personLegalName")?.Value.ToString() ?? String.Empty;
    string? IssueeLabel => (SchemaProperties1 is null) ? null : DictionaryConverter.GetValueByPath(SchemaProperties1, "properties.i.description")?.Value.ToString() ?? String.Empty;
    string? IssueeValue => DictionaryConverter.GetValueByPath(credential, "sad.a.i")?.Value.ToString() ?? String.Empty;
    string? EcrDescription => (SchemaProperties1 is null) ? null : @DictionaryConverter.GetValueByPath(SchemaProperties1, "properties.engagementContextRole.description")?.Value.ToString() ?? String.Empty;
    string? EcrValue => @DictionaryConverter.GetValueByPath(credential, "sad.a.engagementContextRole")?.Value.ToString() ?? String.Empty;
    // Get label for personLegalName
    TypedValue? SchemaPropertiesTypeValue => DictionaryConverter.GetValueByPath(credential, "schema.properties.a.oneOf");
    List<object>? SchemaProperties => SchemaPropertiesTypeValue?.Value as List<object>;
    Dictionary<string, object>? SchemaProperties1 => (SchemaProperties is null || SchemaProperties[1] is null) ? null : SchemaProperties[1] as Dictionary<string, object>;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        logger.LogInformation("OnInitializedAsync");
    }

    protected override async Task OnParametersSetAsync()
    {
        // StateHasChanged();
    }
}

<MudCard Class="pa-3">
    <MudStack>
        @switch (displayDetail)
        {
            case CredentialDisplayDetail.MinimalWithoutIssuee:
            case CredentialDisplayDetail.Minimal:
                <MudText><b>@SchemaTitle </b></MudText>
                break;
            case CredentialDisplayDetail.Typical:
            case CredentialDisplayDetail.Full:
            default:
                <MudText><b>@SchemaTitle </b><br /><em>@SchemaDescr</em></MudText>
                break;
        }

        @switch (displayDetail)
        {
            case CredentialDisplayDetail.Typical:
            case CredentialDisplayDetail.Full:
            case CredentialDisplayDetail.Minimal:
                <MudText><b>Issued</b> @IssuedDate</MudText>

                if (IssuerLabel != String.Empty)
                {
                    <MudText><b>Issuer</b></MudText>
                    <MudStack Row Style="align-items: center;">
                        <MudIcon ViewBox="0 0 100 100" Icon="@MakeIdenticon(IssuerValue)" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                        <MudText Style="overflow-wrap: anywhere;">@IssuerLabel: <br /><b>@IssuerValue</b></MudText>
                    </MudStack>
                }
                break;
            case CredentialDisplayDetail.MinimalWithoutIssuee:
            default:
                break;
        }
        
        @switch (displayDetail)
        {
            case CredentialDisplayDetail.MinimalWithoutIssuee:
                break;
            case CredentialDisplayDetail.Typical:
            case CredentialDisplayDetail.Full:
            case CredentialDisplayDetail.Minimal:
            default:
                <MudText><b>Issuee</b></MudText>
                if (PersonLegalNameLabel != String.Empty)
                {
                    <MudText>@PersonLegalNameLabel: <b>@PersonLegalNameValue</b></MudText>
                }
                
                if (IssueeLabel is not null && IssueeLabel != String.Empty && IssueeValue is not null)
                {
                    <MudStack Row Style="align-items: center;">
                        <MudIcon ViewBox="0 0 100 100" Icon="@MakeIdenticon(IssueeValue)" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                        <MudText Style="overflow-wrap: anywhere;">@IssueeLabel: <br /><b>@IssueeValue</b></MudText>
                    </MudStack>
                }
                break;
        }

        @if (!string.IsNullOrEmpty(EcrDescription))
        {
            @switch (displayDetail)
            {
                case CredentialDisplayDetail.MinimalWithoutIssuee:
                    <MudText><i>@EcrValue</i></MudText>
                    break;
                case CredentialDisplayDetail.Typical:
                case CredentialDisplayDetail.Full:
                case CredentialDisplayDetail.Minimal:
                default:
                    <MudText>@EcrDescription: <b>@EcrValue</b></MudText>
                    break;
            }
        }

    </MudStack>
    @{
        switch (displayDetail)
        {
            case CredentialDisplayDetail.Full:
                <MudStack Row>
                    <MudSpacer />
                    <MudIconButton Style="padding: 0px !important;" Size="Size.Small" OnClick="async () => await UIHelper.Copy2Clipboard(JsonSerializer.Serialize(credential))" Icon="@Icons.Material.Filled.ContentCopy" aria-label="delete"></MudIconButton>
                </MudStack>
                break;
            default:
                break;
        }
    }
</MudCard>

