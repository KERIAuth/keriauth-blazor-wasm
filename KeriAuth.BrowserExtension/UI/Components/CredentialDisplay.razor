@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Services
@using Microsoft.VisualBasic
@using System.Text.Json;
@using System.Diagnostics;
@using System.Diagnostics.CodeAnalysis;
@using KeriAuth.BrowserExtension.Helper.DictionaryConverters
@using static KeriAuth.BrowserExtension.Helper.Identicon;
@inject ILogger<CredentialDisplay> logger
@inject IJSRuntime js
@inject ISnackbar snackbar
@inject IStorageService storageService

<MudCard Class="pa-3">
    <MudStack>
        @{
            string SchemaTitle = " ";
            string SchemaDescr = " ";
            try
            {
                SchemaTitle = DictionaryConverter.GetValueByPath(credential, "schema.title")?.Value?.ToString() ?? string.Empty;
                SchemaDescr = DictionaryConverter.GetValueByPath(credential, "schema.description")?.Value?.ToString() ?? string.Empty;
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error getting schema title or description");
            }
            finally
            {
                @switch (displayDetail)
                {
                    case CredentialDisplayDetail.MinimalWithoutIssuee:
                    case CredentialDisplayDetail.Minimal:
                        <MudText><b>@SchemaTitle </b></MudText>
                        break;
                    case CredentialDisplayDetail.Typical:
                    case CredentialDisplayDetail.Full:
                    default:
                        <MudText><b>@SchemaTitle </b><br /><em>@SchemaDescr</em></MudText>
                        break;
                }
            }

            @switch (displayDetail)
            {
                case CredentialDisplayDetail.Typical:
                case CredentialDisplayDetail.Full:
                case CredentialDisplayDetail.Minimal:
                    // Issued date
                    string dt = " ";
                    try
                    {
                        dt = DictionaryConverter.GetValueByPath(credential, "sad.a.dt")?.Value?.ToString()?.Substring(0, 10) ?? string.Empty;
                    }
                    catch (Exception ex)
                    {
                        logger.LogError(ex, "Error getting date issued");
                    }
                    finally
                    {
                        <MudText>Issued: <b>@dt</b></MudText>
                    }

                    // Issuer
                    string iLabel = " ";
                    string iValue = " ";
                    try
                    {
                        iLabel = DictionaryConverter.GetValueByPath(credential, "schema.properties.i.description")?.Value?.ToString() ?? String.Empty;
                        iValue = DictionaryConverter.GetValueByPath(credential, "sad.i")?.Value.ToString()?.Substring(0, 10) ?? String.Empty;
                    }
                    catch (Exception ex)
                    {
                        logger.LogError(ex, "Error getting issuer AID or date issued");
                    }
                    finally
                    {
                        if (iLabel != String.Empty)
                        {
                            <MudText>@iLabel: <b>@iValue</b></MudText>
                        }
                    }
                    break;
                case CredentialDisplayDetail.MinimalWithoutIssuee:
                default:
                    break;
            }
        }

        @{
            // Issuee
            string personValue = " ";
            string personLabel = " ";
            string aiLabel = " ";
            string iValueValue = " ";

            string ecrLabel = " ";
            string ecrValue = " ";
            try
            {
                // Get label for personLegalName
                var collectionResult = DictionaryConverter.GetValueByPath(credential, "schema.properties.a.oneOf");
                var collection = collectionResult?.Value as List<object>;
                Debug.Assert(collection is not null && collection.Count > 1);
                var secondItem = collection[1] as Dictionary<string, object>;
                Debug.Assert(secondItem is not null);
                personLabel = DictionaryConverter.GetValueByPath(secondItem, "properties.personLegalName.description")?.Value.ToString() ?? String.Empty;

                // Get value for personLegalName
                personValue = DictionaryConverter.GetValueByPath(credential, "sad.a.personLegalName")?.Value.ToString() ?? String.Empty;

                // get label for i (e.g. Issuee AID or LE Issuer AID (typo in schema?), depending on credential Type)
                aiLabel = DictionaryConverter.GetValueByPath(secondItem, "properties.i.description")?.Value.ToString() ?? String.Empty;
                // get value for i
                iValueValue = DictionaryConverter.GetValueByPath(credential, "sad.a.i")?.Value.ToString() ?? String.Empty;

                ecrLabel = @DictionaryConverter.GetValueByPath(secondItem, "properties.engagementContextRole.description")?.Value.ToString() ?? String.Empty;
                ecrValue = @DictionaryConverter.GetValueByPath(credential, "sad.a.engagementContextRole")?.Value.ToString() ?? String.Empty;
            }
            catch (Exception ex)
            {
                logger.LogError(ex, "Error getting personLegalName or i or engagementContextRole");
            }
            finally
            {
                @switch (displayDetail)
                {
                    case CredentialDisplayDetail.MinimalWithoutIssuee:
                        break;
                    case CredentialDisplayDetail.Typical:
                    case CredentialDisplayDetail.Full:
                    case CredentialDisplayDetail.Minimal:
                    default:
                        if (personLabel != String.Empty)
                        {
                            <MudText>@personLabel: <b>@personValue</b></MudText>
                        }
                        if (aiLabel != String.Empty)
                        {
                            <MudStack Row Style="align-items: center;">
                                <MudIcon ViewBox="0 0 100 100" Icon="@MakeIdenticon(iValueValue)" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden;" />
                                <MudText Style="overflow-wrap: anywhere;">@aiLabel: <br /><b>@iValueValue</b></MudText>
                            </MudStack>
                        }
                        break;
                }

                if (!string.IsNullOrEmpty(ecrLabel))
                {
                    @switch (displayDetail)
                    {
                        case CredentialDisplayDetail.MinimalWithoutIssuee:
                            <MudText><i>@ecrValue</i></MudText>
                            break;
                        case CredentialDisplayDetail.Typical:
                        case CredentialDisplayDetail.Full:
                        case CredentialDisplayDetail.Minimal:
                        default:
                            <MudText>@ecrLabel: <b>@ecrValue</b></MudText>
                            break;
                    }
                }
            }
        }

    </MudStack>
    @{
        switch (displayDetail)
        {
            case CredentialDisplayDetail.Full:
                <MudStack Row>
                    <MudSpacer />
                    <MudIconButton Style="padding: 0px !important;" Size="Size.Small" OnClick="async () => await UIHelper.Copy2Clipboard(JsonSerializer.Serialize(credential))" Icon="@Icons.Material.Filled.ContentCopy" aria-label="delete"></MudIconButton>
                </MudStack>
                break;
            default:
                break;
        }
    }
</MudCard>

@code {
    /*
    [Parameter]
    [NotNull]
    public EventCallback<int> OnCredentialDeleted { get; init; }
    */

    [Parameter]
    [NotNull]
    public Dictionary<string, object>? credential { get; init; }

    [Parameter]
    [NotNull]
    public CredentialDisplayDetail displayDetail { get; init; }

    public enum CredentialDisplayDetail
    {
        Minimal,
        MinimalWithoutIssuee,
        Typical,
        Full
    }

    /*
    private async Task DeleteCredential()
        {
        // Debug.Assert(WalletCredential is not null);
        // await WalletService.DeleteCredential(WalletCredential);
        await OnCredentialDeleted.InvokeAsync();
        StateHasChanged();
    }
    */
}