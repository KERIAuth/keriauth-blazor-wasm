@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Services
@using Microsoft.VisualBasic
@using System.Text.Json;
@using System.Diagnostics;
@using System.Diagnostics.CodeAnalysis;
@inject IJSRuntime js
@inject ISnackbar snackbar
@inject IStorageService storageService

<MudPaper Class="mb-2 pa-3">
    <MudText Typo="Typo.caption">Issued By:</MudText>
    <MudStack Row="true">
        <MudText>DID Issuer</MudText>
    </MudStack>
    <div class="mt-3">
        <MudText Typo="Typo.caption">Claims:</MudText>
    </div>
    @{
        // var claims = WalletCredential.PrismCredential.GetClaims();
    }
    <MudExpansionPanels Dense="true" Class="mt-3 mb-3">
        <MudExpansionPanel Dense="true" Text="Show Details">
            <MudStack Row="true" Class="mb-1">
                <div>
                    <MudText Typo="Typo.body2"><strong>Created at:</strong> datetime...</MudText>
                </div>
            </MudStack>
            <MudStack Row="true" Class="mb-1">
                <MudText Typo="Typo.body2"><strong>Signature:</strong></MudText>
                <MudText Typo="Typo.body2" Style="max-height: 20px;">
                    <Ellipsis IncludeCopyIcon="true" StringContent="signature...."></Ellipsis>
                </MudText>
            </MudStack>
            <MudStack Row="true" Class="mb-1">
                <MudText Typo="Typo.body2"><strong>Json:</strong></MudText>
                <MudText Typo="Typo.body2" Style="max-height: 20px;">
                    <Ellipsis IncludeCopyIcon="true" StringContent=" json ...."></Ellipsis>
                </MudText>
            </MudStack>
            
        </MudExpansionPanel>
    </MudExpansionPanels>
    <MudStack Row="true">
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.CopyAll">Copy</MudButton>
        <MudSpacer></MudSpacer>
        <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Text" OnClick="async () => await DeleteCredential()"></MudIconButton>
    </MudStack>
</MudPaper>

@code {

    [Parameter]
    [NotNull]
    public EventCallback<int> OnCredentialDeleted { get; init; }

    // [Parameter]
    // [NotNull]
    // public WalletCredential? WalletCredential { get; init; }

    


    private async Task DeleteCredential()
    {
        // Debug.Assert(WalletCredential is not null);
        // await WalletService.DeleteCredential(WalletCredential);
        await OnCredentialDeleted.InvokeAsync();
        StateHasChanged();
    }

}