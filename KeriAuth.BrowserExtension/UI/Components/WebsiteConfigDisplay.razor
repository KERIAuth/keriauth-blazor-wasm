@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using System.Text.Json;
@using System.Diagnostics;
@using KeriAuth.BrowserExtension.Helper.DictionaryConverters
@using static KeriAuth.BrowserExtension.Helper.Identicon
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@using MudBlazor
@using Newtonsoft.Json;

@inject ILogger<WebsiteConfigDisplay> logger
@inject IWebsiteConfigService websiteConfigService
@inject IStateService stateService
@inject ISignifyClientService signifyClientService
@inject IdentifiersService identifiersService
@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject IAppSwMessagingService appSwMessagingService
@inject IJSRuntime jsRuntime
@inject NavigationManager navManager

@code {
    [Parameter] public required string OriginStr { get; init; }
    [Parameter] public required bool IsCredentialShown { get; init; }
    [Parameter] public required bool IsOriginShown { get; init; }
    [Parameter] public EventCallback<(string? selectedPrefix, Dictionary<string, object>? selectedCredential)> ValueChanged { get; init; }

    private bool IsCredListExpanded { get; set; }
    private string AppActivePrefix { get; set; } = string.Empty;
    private List<IdentifierHeadline> IdentifierHeadlines { get; set; } = new();
    private bool IsPrefixRemembered { get; set; }
    private bool IsAutoSignInIdentifier { get; set; }
    private bool IsAutoSignInCred { get; set; }
    private bool IsCredentialRemembered { get; set; }
    private IdentifierHeadline? SelectedHeadlineOrNothing { get; set; }
    private string SelectedPrefix { get; set; } = "unknown";
    private WebsiteConfig? ThisWebsiteConfig { get; set; }
    private Dictionary<string, object>? SelectedCredentialOrNothing { get; set; }
    private List<Dictionary<string, object>> CredentialsDict { get; set; } = new();
    private string? SelectedCredSaidOrNothing { get; set; }
    private List<Dictionary<string, object>>? FilteredCredentials { get; set; }

    private string ExpandIcon => IsCredListExpanded ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore;

    Uri? GetOriginUri()
    {
        try
        {
            return new Uri(OriginStr);
        }
        catch (Exception ex)
        {
            logger.LogError("Error parsing OriginStr '{OriginStr}': {Error}", OriginStr, ex);
            return null;
        }
    }

    async Task SendValueToParent()
    {
        logger.LogWarning($"SendValueToParent prefix: {SelectedPrefix} | SelectedCredential {SelectedCredentialOrNothing is not null}");
        await ValueChanged.InvokeAsync((SelectedPrefix, SelectedCredentialOrNothing));
    }

    async Task RefreshFromWebsiteConfig()
    {
        var originUri = GetOriginUri();
        if (originUri is null)
        {
            throw new Exception($"RefreshThisWebsiteConfig: origin must be set.");
        }

        var getOrCreateWebsiteRes = await websiteConfigService.GetOrCreateWebsiteConfig(originUri);
        if (getOrCreateWebsiteRes.IsFailed)
        {
            throw new Exception($"Error from websiteService {getOrCreateWebsiteRes.Errors}");
        }
        var (newWebsite, isConfigNew) = getOrCreateWebsiteRes.Value;
        ThisWebsiteConfig = newWebsite;

        if (isConfigNew)
        {
            SelectedPrefix = (await preferencesService.GetPreferences()).SelectedAid;
            ThisWebsiteConfig = ThisWebsiteConfig with { RememberedPrefixOrNothing = SelectedPrefix };
            await websiteConfigService.Update(ThisWebsiteConfig);
        }
        else
        {
            SelectedPrefix = ThisWebsiteConfig.RememberedPrefixOrNothing!;
        }

        FilteredCredentials = filterCredentials(CredentialsDict, [("sad.a.i", SelectedPrefix)]);
        // logger.LogWarning("FilteredCredentials: {i}", FilteredCredentials?.Count() ?? 0);

        SelectedCredSaidOrNothing = ThisWebsiteConfig.RememberedCredSaidOrNothing;

        if (SelectedCredSaidOrNothing is null)
        {
            SelectedCredentialOrNothing = null;
        }
        else
        {
            SelectedCredentialOrNothing = filterCredentials(CredentialsDict, [("sad.d", SelectedCredSaidOrNothing)])?.FirstOrDefault();
        }

        // TODO P3 implement and test ensurance
        // Ensure the SelectedCredentialOrNothing's issuee's value is consistent with the SelectedPrefix
        /*
            if (SelectedCredentialOrNothing is not null)
            {
            TypedValue? tv = DictionaryConverter.GetValueByPath(SelectedCredentialOrNothing, "sad.d");
            if (tv?.Value.ToString() != SelectedPrefix)
                {
                SelectedCredSaidOrNothing = null;
                SelectedCredentialOrNothing = null;
                ThisWebsiteConfig = ThisWebsiteConfig with { RememberedCredSaidOrNothing = SelectedCredSaidOrNothing };
                await websiteConfigService.Update(ThisWebsiteConfig);
        }
        }
        */

        // send relevant values to parent (e.g. a page for SignIn or website config)
        await SendValueToParent();
        StateHasChanged(); // TODO EE! should not need this to force refresh of filtered credentials?
    }

    private async Task GetInitialIdentifierHeadlines()
    {
        var res = await identifiersService.GetIdentifierHeadlines();
        if (res?.IsSuccess == true)
        {
            IdentifierHeadlines = res.Value.OrderBy(a => a.Alias).ToList();
            /*
        if (IdentifierHeadlines.Any())
        {
            await RefreshFromWebsiteConfig();
            if (ThisWebsiteConfig is null)
                {
                throw new Exception("GetInitialHeadlines: website config must not be null here");
                }
                                          var newWebsite = ThisWebsiteConfig;
                                          SelectedHeadlineOrNothing = IdentifierHeadlines.FirstOrDefault(a => a.Prefix == newWebsite.RememberedPrefixOrNothing)
                                          ?? IdentifierHeadlines.FirstOrDefault(a => a.Prefix == AppActivePrefix)
                                          ?? IdentifierHeadlines.First();
                                          if (SelectedHeadlineOrNothing is null)
                    {
                    throw new Exception("GetInitialHeadlines: must set a prefix");
                }
                SelectedPrefix = SelectedHeadlineOrNothing.Prefix;
                var updateRes = await websiteConfigService.Update(ThisWebsiteConfig with { RememberedPrefixOrNothing = SelectedPrefix });
                if (updateRes is null || updateRes.IsFailed)
                {
                    throw new Exception($"updateSelectedPrefix: Error updating website: {updateRes?.Errors}");
                }
                await RefreshFromWebsiteConfig();
                StateHasChanged(); // needed?
            }
            else
                {
                throw new Exception("No Identifiers found");
            }
            */
        }
    }

    // TODO move this to a helper
    List<Dictionary<string, object>>? filterCredentials(List<Dictionary<string, object>> credentialDictList, List<(string filterPath, string match)> filters)
    {
        if (!filters.Any())
        {
            throw new Exception("filterCredentials must have at least one filter string");
        }
        List<Dictionary<string, object>> filteredCredentials = new();
        foreach (var credDict in credentialDictList)
        {
            foreach (var filter in filters)
            {
                if (DictionaryConverter.GetValueByPath(credDict, filter.filterPath)?.Value as string == filter.match)
                {
                    filteredCredentials.Add(credDict);
                    break;
                }
            }
        }
        return filteredCredentials;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    async Task updateSelectedPrefix(string prefix)
    {
        logger.LogInformation("updateSelectedPrefix set prefix to ", prefix);
        IsCredListExpanded = false;
        SelectedCredentialOrNothing = null;
        if (ThisWebsiteConfig is null)
        {
            throw new Exception($"updateSelectedPrefix: ThisWebsiteConfig should not be null here.");
        }
        // when changing the prefix, any prior selection of RememberedCred will not be relevant
        var newWebsiteConfig = ThisWebsiteConfig with { RememberedPrefixOrNothing = prefix, RememberedCredSaidOrNothing = null };
        newWebsiteConfig.Validate();
        var updateRes = await websiteConfigService.Update(newWebsiteConfig);
        if (updateRes is null || updateRes.IsFailed)
        {
            throw new Exception($"updateSelectedPrefix: Error updating website: {updateRes?.Errors}");
        }
        await RefreshFromWebsiteConfig();
    }

    private async Task updateSelectedCredential(Dictionary<string, object>? item)
    {
        if (item is null || !item.Any())
        {
            throw new Exception($"updateSelectedCredential: credential should not be null or empty here.");
        }
        if (ThisWebsiteConfig is null)
        {
            throw new Exception($"updateSelectedCredential: ThisWebsiteConfig should not be null here.");
        }
        SelectedCredentialOrNothing = item;

        var rememberedCredSaidOrNothing = DictionaryConverter.GetValueByPath(SelectedCredentialOrNothing, "sad.d")?.Value?.ToString() ?? null;
        if (rememberedCredSaidOrNothing is null)
        {
            string json = JsonConvert.SerializeObject(SelectedCredentialOrNothing, Formatting.Indented);
            logger.LogInformation("updateSelectedCredential set to ~ ", json);
            throw new Exception($"updateSelectedCredential: Could not find SAID of credential");
        }
        logger.LogInformation("updateSelectedCredential credSaid: ", rememberedCredSaidOrNothing);

        var newWebsite = ThisWebsiteConfig with { RememberedCredSaidOrNothing = rememberedCredSaidOrNothing, RememberedPrefixOrNothing = SelectedPrefix };
        newWebsite.Validate();
        var updateRes = await websiteConfigService.Update(newWebsite);
        if (updateRes is null || updateRes.IsFailed)
        {
            logger.LogError($"updateSelectedCredential: Error updating website: {updateRes?.Errors}");
            return;
        }
        // await Task.Delay(2000); // TODO EE! debug
        IsCredListExpanded = false;
        await RefreshFromWebsiteConfig();


        return;
    }

    async Task updateIsCredentialRemembered(bool isChecked)
    { await Task.Delay(0); }

    async Task updateIsPrefixRemembered(bool isPrefixRemembered)
    { await Task.Delay(0); }

    async Task getCredentials()
    {
        var res = await signifyClientService.GetCredentials();
        if (res.IsFailed || res.Value is null)
        {
            logger.LogError($"Error: {res.Errors}");
            return;
        }
        else
        {
            CredentialsDict = res.Value as List<Dictionary<string, object>>;
            // Debug.Assert(CredentialsDict is not null);
            // logger.LogInformation("Credentials: count {res}", CredentialsDict.Count);
            // foreach (Dictionary<string, object> credential in credentials)
            // {
            //     logger.LogInformation("Credential: {credential}", credential);
            //     logger.LogInformation("Credential title: {credential}", DictionaryConverter.GetValueByPath(credential, "schema.title").Value);
            // }
        }
    }

    async Task updateIsAutoSignInCred(bool isChecked)
    { await Task.Delay(0); }

    async Task updateIsAutoSignInIdentifier(bool isChecked)
    { await Task.Delay(0); }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // TODO P2 optimize by moving some of the above into these optimizations:
        if (firstRender)
        {
            // Initial render logic here
            await GetInitialIdentifierHeadlines(); // TODO EE! move to OnParametersSetAsync?
            await getCredentials();
            await RefreshFromWebsiteConfig(); // TODO EE! move into firstRender section?
        }
        else
        {
            // Logic for subsequent renders, if needed
        }
    }

    /*
    // TODO EE! can get rid of this?
    async Task GetInitialCredential()
    {
        logger.LogWarning("GetInitialCredential");
        await RefreshFromWebsiteConfig();
        if (ThisWebsiteConfig is null)
        {
            throw new Exception("GetInitialCredential: website config must not be null here");
        }
        var selectedCredSaidOrNothing = ThisWebsiteConfig.RememberedCredSaidOrNothing;
        logger.LogWarning("GetInitialCredential selectedCredSaidOrNothing: {c}", selectedCredSaidOrNothing);
        if (selectedCredSaidOrNothing is not null)
        {
            // get full credential by said
            var credRes = await signifyClientService.GetCredential(selectedCredSaidOrNothing);
            if (credRes.IsSuccess)
            {
                logger.LogWarning("GetInitialCredential credRes: {c}", credRes.Value);
                await updateSelectedCredential(credRes.Value);
                return;
            }
        }
        await updateSelectedCredential(null);
        return;
    }
    */
    string GetCredentialItemClass(Dictionary<string, object> item)
    {
        return item == SelectedCredentialOrNothing ? "selected-item" : String.Empty;
    }

    string GetIdentifierItemClass(string prefix)
    {
        return prefix == SelectedPrefix ? "selected-item" : String.Empty;
    }
}

<div id="@this.GetType().Name" class="bt-body-page">
    @if (IsOriginShown)
    {
        <MudText Typo="Typo.body1"><em>@OriginStr</em></MudText>
    }

    <!-- Select Identifier -->
    <MudStack Class="gap-0">
        <MudText Class="mt-4" Typo="Typo.h6">Identifier</MudText>
        <MudStack Class="ml-0" Style="gap:0;">
            @if (IdentifierHeadlines.Any())  // this prevents a flash while loading
            {
                <MudSelect T="string" Value="@SelectedPrefix" ValueChanged="async (string v) => await updateSelectedPrefix(v)">
                    @foreach (var identifierHeadline in IdentifierHeadlines)
                    {
                        <MudSelectItem Value="@identifierHeadline.Prefix" Class="@GetIdentifierItemClass(identifierHeadline.Prefix)">
                            <MudStack Row Style="align-items:center;">
                                <MudIcon Icon=@identifierHeadline.Identicon ViewBox="0 0 100 100" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden; margin-top: 3px;" />
                                <div class="bt-sad-2" style="display:contents;">
                                    <MudText Typo="Typo.subtitle2" Color="Color.Primary">@identifierHeadline.Alias</MudText>
                                </div>
                            </MudStack>
                        </MudSelectItem>
                    }
                </MudSelect>
                <!-- TODO P3 Hiding these options functionality until it is fixed -->
                <div style="display:none;">
                    <MudCheckBox Label="Use as default" Disabled="@(SelectedPrefix is null)" style="height: 28px;" Value="@IsPrefixRemembered" ValueChanged="async (bool b) => await updateIsPrefixRemembered(b)" />
                    <MudCheckBox Label="Automatically sign in" Disabled="@(SelectedPrefix is null)" style="height: 28px;" Value="@IsAutoSignInIdentifier" ValueChanged="async (bool b) => await updateIsAutoSignInIdentifier(b)" />
                    @if (IsAutoSignInIdentifier && ThisWebsiteConfig is not null)
                    {
                        if (SelectedPrefix == ThisWebsiteConfig.RememberedPrefixOrNothing)
                        {
                            <MudText>(with this identifier)</MudText>
                        }
                        else
                        {
                            <MudText>(with another identifier)</MudText>
                        }
                    }
                </div>
            }
        </MudStack>
    </MudStack>

    @if (IsCredentialShown && CredentialsDict.Any())
    {
        <!-- Select Credential --->
        <MudStack Class="gap-0">
            <MudText Class="mt-4" Typo="Typo.h6">Credential</MudText>
            <MudStack Class="ml-0" Style="gap:0;">
                <MudPaper Class="pa-0 mr-3">
                    <!-- Display Selected Credential -->
                    @if (!IsCredListExpanded)
                    {
                        <MudPaper Class="d-flex align-items-center">
                            @if (SelectedCredentialOrNothing is null)
                            {
                                <div @onclick="() => IsCredListExpanded = !IsCredListExpanded" style="width:100%; align-content:center;">
                                    <MudText Class="ml-3">Select</MudText>
                                </div>
                            }
                            else
                            {
                                <CredentialDisplay credential="@SelectedCredentialOrNothing" displayDetail="@CredentialDisplay.CredentialDisplayDetail.Minimal" />
                            }
                            <MudSpacer />
                            <MudIconButton Icon="@ExpandIcon" OnClick="() => IsCredListExpanded = !IsCredListExpanded" />
                        </MudPaper>
                    }
                    else
                    {
                        if (FilteredCredentials is not null && FilteredCredentials.Any())
                        {
                            <MudList Dense="true" T="Dictionary<string, object>">
                                @foreach (var credential in FilteredCredentials)
                                {
                                    <MudListItem OnClick="@(async () => await updateSelectedCredential(credential))"
                                                 Class="@GetCredentialItemClass(credential)">
                                        <CredentialDisplay credential="@credential" />
                                    </MudListItem>
                                }
                            </MudList>
                        }
                        else
                        {
                            <MudText>No credentials issued to this identifier.</MudText>
                        }
                    }
                </MudPaper>
                <!-- TODO P3 Hiding these options functionality until it is fixed -->
                <div style="display:none;">
                    <MudCheckBox Label="Default credential for website" Disabled="@(SelectedCredentialOrNothing is null)" style="height: 28px;" Value="@IsCredentialRemembered" ValueChanged="async (bool b) => await updateIsCredentialRemembered(b)" />
                    <MudCheckBox Label="Automatically sign in" Disabled="@(SelectedCredentialOrNothing is null)" style="height: 28px;" Value="@IsAutoSignInCred" ValueChanged="async (bool b) => await updateIsAutoSignInCred(b)" />
                </div>
            </MudStack>
        </MudStack>
    }
</div>

<style>
    .mud-select .mud-select-input .mud-input-slot {
        height: auto;
    }

    .selected-item {
        border-left: 4px solid blue;
    }
</style>