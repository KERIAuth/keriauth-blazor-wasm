@using KeriAuth.BrowserExtension.Models
@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.Services.SignifyService
@using System.Text.Json;
@using System.Diagnostics;
@using KeriAuth.BrowserExtension.Helper.DictionaryConverters
@using static KeriAuth.BrowserExtension.Helper.Identicon
@using static KeriAuth.BrowserExtension.Helper.PreviousPage
@using MudBlazor
@using Newtonsoft.Json;

@inject ILogger<WebsiteConfigDisplay> logger
@inject IWebsiteConfigService websiteConfigService
@inject IStateService stateService
@inject ISignifyClientService signifyClientService
@inject IdentifiersService identifiersService
@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IDialogService dialogService
@inject ISnackbar snackbar
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject IAppSwMessagingService appSwMessagingService
@inject IJSRuntime jsRuntime
@inject NavigationManager navManager

@code {
    [Parameter] public required string OriginStr { get; init; }
    [Parameter] public required bool IsCredentialShown { get; init; }
    [Parameter] public required bool IsOriginShown { get; init; }

    private bool IsCredListExpanded { get; set; }
    private string AppActivePrefix { get; set; } = string.Empty;
    private List<IdentifierHeadline> IdentifierHeadlines { get; set; } = new();
    private bool IsPrefixRemembered { get; set; }
    private bool IsAutoSignInIdentifier { get; set; }
    private bool IsAutoSignInCred { get; set; }
    private bool IsCredentialRemembered { get; set; }
    private IdentifierHeadline? SelectedHeadlineOrNothing { get; set; }
    private string SelectedPrefix { get; set; } = "unknown";
    private WebsiteConfig? ThisWebsiteConfig { get; set; }
    private Dictionary<string, object>? SelectedCredentialOrNothing { get; set; }

    private string ExpandIcon => IsCredListExpanded ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore;
    private string? selectedCredSaidOrNothing
    {
        get
        {
            if (SelectedCredentialOrNothing is not null)
            {
                TypedValue? tv = DictionaryConverter.GetValueByPath(SelectedCredentialOrNothing, "sad.d");
                if (tv is not null)
                {
                    return tv.Value.ToString();
                }
            }
            return null;
        }
    }

    Uri? GetOriginUri()
    {
        try
        {
            return new Uri(OriginStr);
        }
        catch (Exception ex)
        {
            logger.LogError("Error parsing OriginStr '{OriginStr}': {Error}", OriginStr, ex);
            return null;
        }
    }

    async Task RefreshThisWebsiteConfig()
    {
        // TODO P2 refactor RefreshThisWebsiteConfig to be reactive IObserver<WebsiteConfig> on websiteConfigService

        var originUri = GetOriginUri();
        if (originUri is null) return;

        var getOrCreateWebsiteRes = await websiteConfigService.GetOrCreateWebsiteConfig(originUri);
        if (getOrCreateWebsiteRes.IsFailed)
        {
            throw new Exception($"Error from websiteService {getOrCreateWebsiteRes.Errors}");
        }
        var newWebsite = getOrCreateWebsiteRes.Value;
        ThisWebsiteConfig = newWebsite;
        IsPrefixRemembered = ThisWebsiteConfig is not null && ThisWebsiteConfig.RememberedPrefixOrNothing == SelectedPrefix;
        IsAutoSignInIdentifier = ThisWebsiteConfig is not null && ThisWebsiteConfig.IsAutoSignInIdentifier;
        IsAutoSignInCred = ThisWebsiteConfig is not null && ThisWebsiteConfig.IsAutoSignInCredential;
        IsCredentialRemembered = ThisWebsiteConfig is not null && ThisWebsiteConfig.RememberedCredSaidOrNothing == selectedCredSaidOrNothing;

        await Task.Delay(0);
    }

    private async Task GetInitialHeadlines()
    {
        var res = await identifiersService.GetIdentifierHeadlines();
        if (res?.IsSuccess == true)
        {
            IdentifierHeadlines = res.Value.OrderBy(a => a.Alias).ToList();
            if (IdentifierHeadlines.Any())
            {
                await RefreshThisWebsiteConfig();
                if (ThisWebsiteConfig is null)
                {
                    throw new Exception("GetInitialHeadlines: website config must not be null here");
                }
                var newWebsite = ThisWebsiteConfig;
                SelectedHeadlineOrNothing = IdentifierHeadlines.FirstOrDefault(a => a.Prefix == newWebsite.RememberedPrefixOrNothing)
                                          ?? IdentifierHeadlines.FirstOrDefault(a => a.Prefix == AppActivePrefix)
                                          ?? IdentifierHeadlines.First();
                if (SelectedHeadlineOrNothing is null)
                {
                    throw new Exception("GetInitialHeadlines: must set a prefix");
                }                                         
                SelectedPrefix = SelectedHeadlineOrNothing.Prefix;
                var updateRes = await websiteConfigService.Update(ThisWebsiteConfig with { RememberedCredSaidOrNothing = SelectedPrefix });
                if (updateRes is null || updateRes.IsFailed)
                {
                    throw new Exception($"updateSelectedPrefix: Error updating website: {updateRes?.Errors}");
                }
                await RefreshThisWebsiteConfig();
                StateHasChanged(); // needed?
            }
            else
            {
                throw new Exception("No Identifiers found");
            }
        }
    }

    List<Dictionary<string, object>> credentials = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetInitialHeadlines();
        await getCredentials();
    }

    async Task updateSelectedPrefix(string prefix)
    {
        SelectedPrefix = prefix;
        logger.LogInformation("updateSelectedPrefix set prefix to ", SelectedPrefix);
        if (ThisWebsiteConfig is null)
        {
            throw new Exception($"updateSelectedPrefix: ThisWebsiteConfig should not be null here.");
        }
        var newWebsiteConfig = ThisWebsiteConfig with { RememberedPrefixOrNothing = SelectedPrefix };
        newWebsiteConfig.Validate();
        var updateRes = await websiteConfigService.Update(newWebsiteConfig);
        if (updateRes is null || updateRes.IsFailed)
        {
            throw new Exception($"updateSelectedPrefix: Error updating website: {updateRes?.Errors}");
        }
        await RefreshThisWebsiteConfig();
    }

    private async Task updateSelectedCredential(Dictionary<string, object>? item)
    {
        if (item is null)
        {
            throw new Exception($"updateSelectedCredential: credential should not be null here.");
        }
        if (ThisWebsiteConfig is null)
        {
            throw new Exception($"updateSelectedCredential: ThisWebsiteConfig should not be null here.");
        }
        SelectedCredentialOrNothing = item;

        var rememberedCredSaidOrNothing = DictionaryConverter.GetValueByPath(SelectedCredentialOrNothing, "sad.d")?.Value?.ToString() ?? null;
        if (rememberedCredSaidOrNothing is null)
        {
            string json = JsonConvert.SerializeObject(SelectedCredentialOrNothing, Formatting.Indented);
            logger.LogInformation("updateSelectedCredential set to ~ ", json);
            throw new Exception($"updateSelectedCredential: Could not find SAID of credential");
        }
        logger.LogInformation("updateSelectedCredential cred: ", rememberedCredSaidOrNothing);

        var newWebsite = ThisWebsiteConfig with { RememberedCredSaidOrNothing = rememberedCredSaidOrNothing, RememberedPrefixOrNothing = SelectedPrefix };
        newWebsite.Validate();
        var updateRes = await websiteConfigService.Update(newWebsite);
        if (updateRes is null || updateRes.IsFailed)
        {
            logger.LogError($"updateSelectedCredential: Error updating website: {updateRes?.Errors}");
            return;
        }
        await RefreshThisWebsiteConfig();

        IsCredListExpanded = false;
        return;
    }

    async Task updateIsCredentialRemembered(bool isChecked)
    {
        if (SelectedCredentialOrNothing is null)
        {
            throw new Exception("updateIsCredentialRemembered expects credential to be set");
        }

        logger.LogInformation("updateIsCredentialRemembered set to ", isChecked.ToString());

        var newWebsite = ThisWebsiteConfig!; // TODO P3 dangerous non-null assumption
        var rememberedCredSaidOrNothing = DictionaryConverter.GetValueByPath(SelectedCredentialOrNothing, "sad.d")?.Value?.ToString() ?? null;
        logger.LogWarning($"credential debug dictionary: {rememberedCredSaidOrNothing}");
        newWebsite = isChecked
            ? newWebsite with { RememberedCredSaidOrNothing = rememberedCredSaidOrNothing, RememberedPrefixOrNothing = SelectedPrefix }
            : newWebsite with { RememberedCredSaidOrNothing = null };
        newWebsite.Validate();
        var updateRes = await websiteConfigService.Update(newWebsite);
        if (updateRes is null || updateRes.IsFailed)
        {
            logger.LogError($"Error updating website: {updateRes?.Errors}");
            return;
        }
        await RefreshThisWebsiteConfig();
        return;
    }

    async Task updateIsPrefixRemembered(bool isPrefixRemembered)
    {
        // logger.LogWarning($"updateIsPrefixRemembered: {isPrefixRemembered} SelectedPrefix: {SelectedPrefix}");
        var newWebsite = ThisWebsiteConfig!; // TODO P3 dangerous non-null assumption
                                             // logger.LogWarning($"updateIsPrefixRemembered: ThisWebsiteConfig: {ThisWebsiteConfig}");
        newWebsite = isPrefixRemembered
            ? newWebsite with { RememberedPrefixOrNothing = SelectedPrefix }
            : newWebsite with { RememberedPrefixOrNothing = null };
        newWebsite.Validate();
        // logger.LogWarning($"updateIsPrefixRemembered: newWebsite {newWebsite}"); // TODO EE convert to JSON for printing?
        var updateRes = await websiteConfigService.Update(newWebsite);
        if (updateRes is null || updateRes.IsFailed)
        {
            logger.LogError($"Error updating website: {updateRes?.Errors}");
            return;
        }
        await RefreshThisWebsiteConfig();
        return;
    }

    async Task getCredentials()
    {
        // TODO P2 implement filtering to show only the holder's credentials
        // typescript:  client.credentials().list({ filter: { '-a-i': holderAid.prefix } })
        var res = await signifyClientService.GetCredentials();
        if (res.IsFailed || res.Value is null)
        {
            logger.LogError($"Error: {res.Errors}");
            return;
        }
        else
        {
            credentials = res.Value as List<Dictionary<string, object>>;
            Debug.Assert(credentials is not null);
            logger.LogInformation("Credentials: count {res}", credentials.Count);
            // foreach (Dictionary<string, object> credential in credentials)
            // {
            //     logger.LogInformation("Credential: {credential}", credential);
            //     logger.LogInformation("Credential title: {credential}", DictionaryConverter.GetValueByPath(credential, "schema.title").Value);
            // }
        }
    }

    async Task updateIsAutoSignInCred(bool isChecked)
    {
        await Task.Delay(0);
        // TODO P0 implement
        await RefreshThisWebsiteConfig();
        return;
    }

    async Task updateIsAutoSignInIdentifier(bool isChecked)
    {
        // logger.LogWarning($"updateIsPrefixRemembered: {isPrefixRemembered} SelectedPrefix: {SelectedPrefix}");
        var newWebsite = ThisWebsiteConfig!; // TODO P3 dangerous non-null assumption
                                             // logger.LogWarning($"updateIsPrefixRemembered: ThisWebsiteConfig: {ThisWebsiteConfig}");
        newWebsite = newWebsite with { IsAutoSignInIdentifier = isChecked && IsPrefixRemembered };
        newWebsite.Validate();
        // logger.LogWarning($"updateIsPrefixRemembered: newWebsite {newWebsite}"); // TODO EE convert to JSON for printing?
        var updateRes = await websiteConfigService.Update(newWebsite);
        if (updateRes is null || updateRes.IsFailed)
        {
            logger.LogError($"Error updating website: {updateRes?.Errors}");
            return;
        }
        await RefreshThisWebsiteConfig();
        return;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        // InitializeOrOnNextPrefs(await preferencesService.GetPreferences());
        await GetInitialHeadlines();
    }

    private string GetCredentialItemClass(Dictionary<string, object> item)
    {
        return item == SelectedCredentialOrNothing ? "selected-item" : String.Empty;
    }

    private string GetIdentifierItemClass(string prefix)
    {
        return prefix == SelectedPrefix ? "selected-item" : String.Empty;
    }
}

<div id="@this.GetType().Name" class="bt-body-page">
    @if (IsOriginShown)
    {
        <MudText Typo="Typo.body1"><em>@OriginStr</em></MudText>
    }

    <MudStack Class="gap-0">
        <MudText Class="mt-4" Typo="Typo.h6"><b>Identifier</b></MudText>
        <MudStack Class="ml-0" Style="gap:0;">
            <MudSelect T="string" Value="@SelectedPrefix" ValueChanged="async (string v) => await updateSelectedPrefix(v)">
                @foreach (var identifierHeadline in IdentifierHeadlines)
                {
                    <MudSelectItem Value="@identifierHeadline.Prefix" Class="@GetIdentifierItemClass(identifierHeadline.Prefix)">
                        <MudStack Row Style="align-items:center;">
                            <MudIcon Icon=@identifierHeadline.Identicon ViewBox="0 0 100 100" Style="border-style:solid; border-color:black; border-width:2px; border-radius:50%; width:35px; height:35px; overflow:hidden; margin-top: 3px;" />
                            <div class="bt-sad-2" style="display:contents;">
                                <MudText Typo="Typo.subtitle2" Color="Color.Primary">@identifierHeadline.Alias</MudText>
                            </div>
                        </MudStack>
                    </MudSelectItem>
                }
            </MudSelect>
            <!-- Hiding this functionality until it is fixed -->
            <div style="display:none;">
                <MudCheckBox Label="Use as default" Disabled="@(SelectedPrefix is null)" style="height: 28px;" Value="@IsPrefixRemembered" ValueChanged="async (bool b) => await updateIsPrefixRemembered(b)" />
                <MudCheckBox Label="Automatically sign in" Disabled="@(SelectedPrefix is null)" style="height: 28px;" Value="@IsAutoSignInIdentifier" ValueChanged="async (bool b) => await updateIsAutoSignInIdentifier(b)" />
                @if (IsAutoSignInIdentifier)
                {
                    if (SelectedPrefix == ThisWebsiteConfig.RememberedPrefixOrNothing)
                    {
                        <MudText>(with this identifier)</MudText>
                    }

                    else
                    {
                        <MudText>(with another identifier)</MudText>
                    }
                }
            </div>
        </MudStack>
    </MudStack>

    @if (IsCredentialShown)
    {
        <MudStack Class="gap-0">
            <MudText Class="mt-4" Typo="Typo.h6"><b>Credential</b></MudText>
            <MudStack Class="ml-0" Style="gap:0;">
                <MudPaper Class="pa-0 mr-3">
                    <!-- Display Selected Credential -->
                    @if (!IsCredListExpanded)
                    {
                        <MudPaper Class="d-flex align-items-center">
                            @if (SelectedCredentialOrNothing is null)
                            {
                                <div @onclick="() => IsCredListExpanded = !IsCredListExpanded" style="width:100%; align-content:center;">
                                    <MudText Class="ml-3">Select</MudText>
                                </div>
                            }
                            else
                            {
                                <CredentialDisplay credential="@SelectedCredentialOrNothing" displayDetail="@CredentialDisplay.CredentialDisplayDetail.Minimal" />
                            }
                            <MudSpacer />
                            <MudIconButton Icon="@ExpandIcon" OnClick="() => IsCredListExpanded = !IsCredListExpanded" />
                        </MudPaper>
                    }
                    else
                    {
                        <!-- Display Credential List When Expanded -->
                        <MudList Dense="true" T="Dictionary<string, object>">
                            @foreach (var credential in credentials)
                            {
                                <MudListItem OnClick="@(() => updateSelectedCredential(credential))"
                                             Class="@GetCredentialItemClass(credential)">
                                    <CredentialDisplay credential="@credential" />
                                </MudListItem>
                            }
                        </MudList>
                    }
                </MudPaper>
                <!-- Hiding this functionality until it is fixed -->
                <div style="display:none;">
                    <MudCheckBox Label="Default credential for website" Disabled="@(SelectedCredentialOrNothing is null)" style="height: 28px;" Value="@IsCredentialRemembered" ValueChanged="async (bool b) => await updateIsCredentialRemembered(b)" />
                    <MudCheckBox Label="Automatically sign in" Disabled="@(SelectedCredentialOrNothing is null)" style="height: 28px;" Value="@IsAutoSignInCred" ValueChanged="async (bool b) => await updateIsAutoSignInCred(b)" />
                </div>
            </MudStack>
        </MudStack>
    }
</div>

<style>
    .mud-select .mud-select-input .mud-input-slot {
        height: auto;
    }

    .selected-item {
        border-left: 4px solid blue;
    }
</style>