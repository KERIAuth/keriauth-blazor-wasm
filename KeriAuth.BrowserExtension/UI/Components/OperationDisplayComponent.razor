@using System.Diagnostics
@using System.Diagnostics.CodeAnalysis;

@inject NavigationManager NavManager

<MudStack Row="true" Class="mb-2">
	@{
		Debug.Assert(ops is not null);
	}
	@if (ops.CompletedSuccessfully)
	{
		<MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
	}
	@if (ops.IsPending && ops.IsRunning && !ops.CompletedSuccessfully)
	{
		<MudProgressCircular Style="@($"height:20px;width:20px;margin-left: 1px; color:{Colors.BlueGrey.Lighten3};")" Indeterminate="true" />
	}
	@if (!ops.IsPending && !ops.IsRunning && !ops.CompletedSuccessfully)
	{
		<MudIcon Icon="@Icons.Material.Filled.RemoveCircle" Color="Color.Error" />
	}
	@if (ops.IsPending && !ops.IsRunning && !ops.CompletedSuccessfully)
	{
		<MudIcon Icon="@Icons.Material.Filled.Pending" Style="@($"height:20px;width:20px;margin-left: 1px; color:{Colors.BlueGrey.Lighten3};")" />
	}
	<MudText>@ops.Label</MudText>
</MudStack>
@if (!ops.IsPending && !ops.IsRunning && !ops.CompletedSuccessfully && !string.IsNullOrWhiteSpace(ops.ErrorMessage))
{
	<MudAlert NoIcon="true" Severity="Severity.Error" ShowCloseIcon>@ops.ErrorMessage</MudAlert>
	<MudLink Class="mt-2" OnClick='() => NavManager.NavigateTo("/Start")'>Go back to the start screen</MudLink>
}
@code {
	[Parameter]
	[NotNull]
	// Intentionally nullable to avoid compiler warning about not being initialized
	public OperationDisplay? ops { get; init; }
}
