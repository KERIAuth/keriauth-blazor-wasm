@using Blazor.BrowserExtension
@using KeriAuth.BrowserExtension
@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.UI
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.UI.Layouts
@using MudBlazor
@using System.Runtime.InteropServices.JavaScript;
@using KeriAuth.BrowserExtension.Services.SignifyService
<!-- inject Blazor.BrowserExtension.IBrowserExtensionEnvironment BrowserExtensionEnvironment  -->
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject NavigationManager navManager
@inject IJSRuntime jsRuntime
@inject ILogger<App> logger
@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService
@inject IAppSwMessagingService appSwMessagingService
@implements IDisposable

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <PageTitle>Loading application assembly...</PageTitle>
        <LayoutView>
            <h1>Page not found</h1>
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    public static bool IsDarkTheme { get; set; }

    private IJSObjectReference _interopModule = default!;
    private IJSObjectReference? _port;
    private DotNetObjectReference<App> _objectReference = default!;

    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation($"OnInitializedAsync");
        await base.OnInitializedAsync();

        _interopModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./scripts/es6/SwAppInterop.js");
        _objectReference = DotNetObjectReference.Create(this);

        // Initialize services as needed
        var uri = navManager.ToAbsoluteUri(navManager.Uri);
        var contexts = await UIHelper.GetChromeContexts();
        logger.LogInformation($"Chrome Contexts: {contexts}");
        extensionEnvironmentService.Initialize(uri, "unknown");
        await storageService.Initialize();
        await stateService.Initialize();
        preferencesService.Initialize();

        // TODO remove test 1
        await SendMessage();

        // TODO remove test 2. These subscriptions will go into pages as needed
        appSwMessagingService.Subscribe<string>((message) =>
        {
            logger.LogError("App from SW/MessagingService: {m}", message);
        });
        // TODO use Authority instead of TabId?
        
        await appSwMessagingService.Initialize(uri.Authority);
        var msgData = "hello2 Authority: " + uri?.Authority + " initialUri: " + extensionEnvironmentService.InitialUriQuery;
        logger.LogWarning("App to SW: msgData: ", msgData);
        await appSwMessagingService.SendToServiceWorkerAsync<string>("initial Hello App via service", msgData);

        return;
    }

    private async Task InitializeMessaging()
    {
        _port = await _interopModule.InvokeAsync<IJSObjectReference>("SwAppInteropModule.initializeMessaging", _objectReference, "tab11");
    }

    private async Task SendMessage()
    {
        if (_port != null)
        {
            await _interopModule.InvokeVoidAsync("SwAppInteropModule.sendMessageToServiceWorker", _port, "Hello from Blazor");
        }
    }

    [JSInvokable]
    public void ReceiveMessage(string message)
    {
        // Handle the message received from the service worker
        logger.LogInformation("App from SW: {m}", message);
    }

    public void Dispose()
    {
        _objectReference?.Dispose();
    }
}