@using Blazor.BrowserExtension
@using static KeriAuth.BrowserExtension.AppConfig
@using KeriAuth.BrowserExtension
@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.UI
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.UI.Layouts
@using KeriAuth.BrowserExtension.Models
@using System.Text.Json
@using MudBlazor
@using JsBind.Net
@using WebExtensions.Net
@using System.Runtime.InteropServices.JavaScript;
@using KeriAuth.BrowserExtension.Services.SignifyService
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject NavigationManager navManager
@inject IJSRuntime jsRuntime
@inject ILogger<App> logger
@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService
@inject IAppSwMessagingService appSwMessagingService
@inject IJsRuntimeAdapter jsRuntimeAdapter


<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <PageTitle>Loading application assembly...</PageTitle>
        <LayoutView>
            <h1>Page not found</h1>
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    public static bool IsDarkTheme { get; set; }
    private static IStateService? staticStateService;
    private static ILogger<App>? staticLogger;
    private static NavigationManager? staticNavManager;

    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation($"OnInitializedAsync");
        await base.OnInitializedAsync();
        // TODO P1 hack. Instead, create a StaticHelper static class that has injected methods
        staticStateService = stateService;
        staticNavManager = navManager;
        staticLogger = logger;
        return;
    }

    protected override async Task OnAfterRenderAsync(bool isFirst)
    {
        logger.LogInformation($"OnAfterRenderAsync");

        // Initialize services as needed
        var uri = navManager.ToAbsoluteUri(navManager.Uri);
        var contexts = await UIHelper.GetChromeContexts();
        logger.LogInformation($"Chrome Contexts: {contexts}");
        extensionEnvironmentService.Initialize(uri, "unknown");
        await storageService.Initialize();
        await stateService.Initialize();
        preferencesService.Initialize();

        // Subscribe to and handle messages from service worker via messaging service
        appSwMessagingService.Subscribe<string>((message) =>
        {
            logger.LogInformation("App from SW/MessagingService: {m}", message);
        });

        // Initialize messaging with service worker
        await appSwMessagingService.Initialize(uri.Authority);

        await jsRuntime.InvokeVoidAsync("subscribeToUserInteractions");

        await jsRuntime.InvokeVoidAsync("registerLockListener");

        // TODO P0 remove this test
        var webExtensionsApi = new WebExtensionsApi(jsRuntimeAdapter);
        var passcodeElement = await webExtensionsApi!.Storage.Session.Get("passcode");
        if (passcodeElement.TryGetProperty("passcode", out JsonElement passcodeElement2) && passcodeElement2.ValueKind == JsonValueKind.String)
        {
            var passcode = passcodeElement2.GetString();
            logger.LogWarning("passcode is {1}", passcode);
        }
        else
        {
            logger.LogWarning("passcode was not cached");
        }
    }

    [JSInvokableAttribute("LockApp")]
    public static async Task LockApp()
    {
        if (staticStateService is null)
        {
            throw new Exception("unexpected null staticStateService");
        }
        staticLogger!.LogInformation("LockApp...");
        await staticStateService!.TimeOut(); // Other side-effects will be reactive. See IObserver<StateService>
        
        // staticNavManager!.NavigateTo(RouteToStart);
        
        return;
    }
}