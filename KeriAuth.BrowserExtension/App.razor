@using Blazor.BrowserExtension
@using KeriAuth.BrowserExtension
@using KeriAuth.BrowserExtension.Helper
@using KeriAuth.BrowserExtension.UI
@using KeriAuth.BrowserExtension.Services
@using KeriAuth.BrowserExtension.UI.Layouts
@using MudBlazor
@using System.Runtime.InteropServices.JavaScript;
@using KeriAuth.BrowserExtension.Services.SignifyService
<!-- TODO inject Blazor.BrowserExtension.IBrowserExtensionEnvironment BrowserExtensionEnvironment  -->
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject NavigationManager navManager
@inject IJSRuntime jsRuntime
@inject ILogger<App> logger
@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService
@inject IAppSwMessagingService appSwMessagingService

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <PageTitle>Loading application assembly...</PageTitle>
        <LayoutView>
            <h1>Page not found</h1>
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    public static bool IsDarkTheme { get; set; }

    protected override async Task OnInitializedAsync()
    {
        logger.LogInformation($"OnInitializedAsync");
        await base.OnInitializedAsync();

        // Initialize services as needed
        var uri = navManager.ToAbsoluteUri(navManager.Uri);
        var contexts = await UIHelper.GetChromeContexts();
        logger.LogInformation($"Chrome Contexts: {contexts}");
        extensionEnvironmentService.Initialize(uri, "unknown");
        await storageService.Initialize();
        await stateService.Initialize();
        preferencesService.Initialize();

        // Subscribe to and handle messages from service worker via messaging service
        appSwMessagingService.Subscribe<string>((message) =>
        {
            logger.LogInformation("App from SW/MessagingService: {m}", message);
        });
        
        // Initialize messaging with service worker
        await appSwMessagingService.Initialize(uri.Authority);

        // Send test message to service worker
        var msgData = "hello2 Authority: " + uri?.Authority + " initialUri: " + extensionEnvironmentService.InitialUriQuery;
        logger.LogInformation("App to SW: msgData: ", msgData);
        await appSwMessagingService.SendToServiceWorkerAsync<string>("initial Hello App via service", msgData);
    }
}