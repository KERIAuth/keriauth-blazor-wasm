@using Blazor.BrowserExtension
@using KeriAuth.BrowserExtension
@using KeriAuth.BrowserExtension.UI
@using KeriAuth.BrowserExtension.Services
@using MudBlazor
@using System.Runtime.InteropServices.JavaScript;
@using KeriAuth.BrowserExtension.Services.SignifyService
<!-- inject Blazor.BrowserExtension.IBrowserExtensionEnvironment BrowserExtensionEnvironment  -->
@inject IExtensionEnvironmentService extensionEnvironmentService
@inject NavigationManager navManager
@inject IJSRuntime js
@inject ILogger<App> logger
@inject IPreferencesService preferencesService
@inject IStorageService storageService
@inject IStateService stateService

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <PageTitle>Loading application assembly...</PageTitle>
        <LayoutView>
            <h1>Page not found</h1>
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        logger.LogInformation($"OnInitializedAsync");

        // Initialize services as needed
        var uri = navManager.ToAbsoluteUri(navManager.Uri);
        extensionEnvironmentService.Initialize(uri, "unknown"); // See chrome.runtime.getContexts
        await storageService.Initialize();
        await stateService.Initialize();
        preferencesService.Initialize();

        return;
    }
}